# coding: utf-8

"""
    VMS API

    ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class WorkerOfferedEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'object_type': 'str',
        'booking_request_id': 'str',
        'agency': 'Agency'
    }

    attribute_map = {
        'object_type': 'objectType',
        'booking_request_id': 'bookingRequestId',
        'agency': 'agency'
    }

    def __init__(self, object_type=None, booking_request_id=None, agency=None, local_vars_configuration=None):  # noqa: E501
        """WorkerOfferedEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._object_type = None
        self._booking_request_id = None
        self._agency = None
        self.discriminator = None

        self.object_type = object_type
        if booking_request_id is not None:
            self.booking_request_id = booking_request_id
        if agency is not None:
            self.agency = agency

    @property
    def object_type(self):
        """Gets the object_type of this WorkerOfferedEvent.  # noqa: E501


        :return: The object_type of this WorkerOfferedEvent.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this WorkerOfferedEvent.


        :param object_type: The object_type of this WorkerOfferedEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and object_type is None:  # noqa: E501
            raise ValueError("Invalid value for `object_type`, must not be `None`")  # noqa: E501

        self._object_type = object_type

    @property
    def booking_request_id(self):
        """Gets the booking_request_id of this WorkerOfferedEvent.  # noqa: E501

        The ID of the booking request  # noqa: E501

        :return: The booking_request_id of this WorkerOfferedEvent.  # noqa: E501
        :rtype: str
        """
        return self._booking_request_id

    @booking_request_id.setter
    def booking_request_id(self, booking_request_id):
        """Sets the booking_request_id of this WorkerOfferedEvent.

        The ID of the booking request  # noqa: E501

        :param booking_request_id: The booking_request_id of this WorkerOfferedEvent.  # noqa: E501
        :type: str
        """

        self._booking_request_id = booking_request_id

    @property
    def agency(self):
        """Gets the agency of this WorkerOfferedEvent.  # noqa: E501


        :return: The agency of this WorkerOfferedEvent.  # noqa: E501
        :rtype: Agency
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this WorkerOfferedEvent.


        :param agency: The agency of this WorkerOfferedEvent.  # noqa: E501
        :type: Agency
        """

        self._agency = agency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerOfferedEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerOfferedEvent):
            return True

        return self.to_dict() != other.to_dict()

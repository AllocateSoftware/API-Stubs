# coding: utf-8

"""
    VMS API

    ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class AgencyCosting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'agency_id': 'str',
        'agency_name': 'str',
        'cost': 'float'
    }

    attribute_map = {
        'agency_id': 'agencyId',
        'agency_name': 'agencyName',
        'cost': 'cost'
    }

    def __init__(self, agency_id=None, agency_name=None, cost=None, local_vars_configuration=None):  # noqa: E501
        """AgencyCosting - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._agency_id = None
        self._agency_name = None
        self._cost = None
        self.discriminator = None

        if agency_id is not None:
            self.agency_id = agency_id
        if agency_name is not None:
            self.agency_name = agency_name
        if cost is not None:
            self.cost = cost

    @property
    def agency_id(self):
        """Gets the agency_id of this AgencyCosting.  # noqa: E501


        :return: The agency_id of this AgencyCosting.  # noqa: E501
        :rtype: str
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this AgencyCosting.


        :param agency_id: The agency_id of this AgencyCosting.  # noqa: E501
        :type: str
        """

        self._agency_id = agency_id

    @property
    def agency_name(self):
        """Gets the agency_name of this AgencyCosting.  # noqa: E501


        :return: The agency_name of this AgencyCosting.  # noqa: E501
        :rtype: str
        """
        return self._agency_name

    @agency_name.setter
    def agency_name(self, agency_name):
        """Sets the agency_name of this AgencyCosting.


        :param agency_name: The agency_name of this AgencyCosting.  # noqa: E501
        :type: str
        """

        self._agency_name = agency_name

    @property
    def cost(self):
        """Gets the cost of this AgencyCosting.  # noqa: E501


        :return: The cost of this AgencyCosting.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this AgencyCosting.


        :param cost: The cost of this AgencyCosting.  # noqa: E501
        :type: float
        """

        self._cost = cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgencyCosting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgencyCosting):
            return True

        return self.to_dict() != other.to_dict()

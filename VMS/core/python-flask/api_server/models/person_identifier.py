# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class PersonIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, universal_id=None):  # noqa: E501
        """PersonIdentifier - a model defined in OpenAPI

        :param id: The id of this PersonIdentifier.  # noqa: E501
        :type id: str
        :param universal_id: The universal_id of this PersonIdentifier.  # noqa: E501
        :type universal_id: str
        """
        self.openapi_types = {
            'id': str,
            'universal_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'universal_id': 'universalId'
        }

        self._id = id
        self._universal_id = universal_id

    @classmethod
    def from_dict(cls, dikt) -> 'PersonIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PersonIdentifier of this PersonIdentifier.  # noqa: E501
        :rtype: PersonIdentifier
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PersonIdentifier.

        identifier of the person (worker) within the VMS  # noqa: E501

        :return: The id of this PersonIdentifier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonIdentifier.

        identifier of the person (worker) within the VMS  # noqa: E501

        :param id: The id of this PersonIdentifier.
        :type id: str
        """

        self._id = id

    @property
    def universal_id(self):
        """Gets the universal_id of this PersonIdentifier.

        Global identifer, such as National Insurance number (where known), or other identifier or composite identifier that may be used for matching purposes.  # noqa: E501

        :return: The universal_id of this PersonIdentifier.
        :rtype: str
        """
        return self._universal_id

    @universal_id.setter
    def universal_id(self, universal_id):
        """Sets the universal_id of this PersonIdentifier.

        Global identifer, such as National Insurance number (where known), or other identifier or composite identifier that may be used for matching purposes.  # noqa: E501

        :param universal_id: The universal_id of this PersonIdentifier.
        :type universal_id: str
        """

        self._universal_id = universal_id

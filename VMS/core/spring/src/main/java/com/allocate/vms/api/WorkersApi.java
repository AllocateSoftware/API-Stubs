/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.vms.api;

import com.allocate.vms.api.model.Person;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:35:12.042489Z[Europe/London]")

@Validated
@Api(value = "workers", description = "the workers API")
public interface WorkersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "getWorker", notes = "Get the details of a person (worker) from the VMS", response = Person.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "workers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request OK", response = Person.class),
        @ApiResponse(code = 400, message = "Invalid input parameter"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/workers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Person> getWorker(@ApiParam(value = "ID of the worker within the VMS.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"Doe\", \"telephoneNumber\" : \"+223504938839\", \"universalId\" : \"QQ123456C\", \"surname\" : \"John\", \"links\" : [ { \"rel\" : \"rel\", \"href\" : \"http://example.com/aeiou\" }, { \"rel\" : \"rel\", \"href\" : \"http://example.com/aeiou\" } ], \"id\" : \"123e4567-e89b-12d3-a456-426655440000\", \"email\" : \"john.doe@mail.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.vms.api;

import com.allocate.vms.api.model.AgencyCostings;
import com.allocate.vms.api.model.Duty;
import com.allocate.vms.api.model.DutyRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:35:12.042489Z[Europe/London]")

@Validated
@Api(value = "agencies", description = "the agencies API")
public interface AgenciesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "getCostings", notes = "Returns a list of agencies and their costs for the supplied duty.", response = AgencyCostings.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "agencies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = AgencyCostings.class),
        @ApiResponse(code = 400, message = "Invalid input parameter"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/agencies/costings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AgencyCostings> getCostings(@ApiParam(value = "Duty to be costed" ,required=true )  @Valid @RequestBody Duty duty) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dutyId\" : \"dutyId\", \"results\" : [ { \"cost\" : 125, \"agencyId\" : \"agencyId\", \"agencyName\" : \"agencyName\" }, { \"cost\" : 125, \"agencyId\" : \"agencyId\", \"agencyName\" : \"agencyName\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "sendDutyToAgencies", notes = "Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "agencies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty accepted by VMS.", response = String.class),
        @ApiResponse(code = 400, message = "Invalid input parameter"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/agencies",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> sendDutyToAgencies(@ApiParam(value = "Duty to be sent to agency" ,required=true )  @Valid @RequestBody DutyRequest dutyRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "sendDutyToAgency", notes = "Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "agencies", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty accepted by VMS.", response = String.class),
        @ApiResponse(code = 400, message = "Invalid input parameter"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/agencies/{agencyId}",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> sendDutyToAgency(@ApiParam(value = "ID of the agency to send the request to.",required=true) @PathVariable("agencyId") String agencyId,@ApiParam(value = "Duty to be sent to agency" ,required=true )  @Valid @RequestBody DutyRequest dutyRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

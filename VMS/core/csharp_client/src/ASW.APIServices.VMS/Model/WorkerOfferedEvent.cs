/* 
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.VMS.Client.OpenAPIDateConverter;

namespace ASW.APIServices.VMS.Model
{
    /// <summary>
    /// WorkerOfferedEvent
    /// </summary>
    [DataContract]
    public partial class WorkerOfferedEvent :  IEquatable<WorkerOfferedEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerOfferedEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkerOfferedEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerOfferedEvent" /> class.
        /// </summary>
        /// <param name="objectType">objectType (required).</param>
        /// <param name="bookingRequestId">The ID of the booking request.</param>
        /// <param name="agency">agency.</param>
        public WorkerOfferedEvent(string objectType = default(string), string bookingRequestId = default(string), Agency agency = default(Agency))
        {
            // to ensure "objectType" is required (not null)
            if (objectType == null)
            {
                throw new InvalidDataException("objectType is a required property for WorkerOfferedEvent and cannot be null");
            }
            else
            {
                this.ObjectType = objectType;
            }
            
            this.BookingRequestId = bookingRequestId;
            this.Agency = agency;
        }
        
        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name="objectType", EmitDefaultValue=false)]
        public string ObjectType { get; set; }

        /// <summary>
        /// The ID of the booking request
        /// </summary>
        /// <value>The ID of the booking request</value>
        [DataMember(Name="bookingRequestId", EmitDefaultValue=false)]
        public string BookingRequestId { get; set; }

        /// <summary>
        /// Gets or Sets Agency
        /// </summary>
        [DataMember(Name="agency", EmitDefaultValue=false)]
        public Agency Agency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerOfferedEvent {\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  BookingRequestId: ").Append(BookingRequestId).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerOfferedEvent);
        }

        /// <summary>
        /// Returns true if WorkerOfferedEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerOfferedEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerOfferedEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjectType == input.ObjectType ||
                    (this.ObjectType != null &&
                    this.ObjectType.Equals(input.ObjectType))
                ) && 
                (
                    this.BookingRequestId == input.BookingRequestId ||
                    (this.BookingRequestId != null &&
                    this.BookingRequestId.Equals(input.BookingRequestId))
                ) && 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectType != null)
                    hashCode = hashCode * 59 + this.ObjectType.GetHashCode();
                if (this.BookingRequestId != null)
                    hashCode = hashCode * 59 + this.BookingRequestId.GetHashCode();
                if (this.Agency != null)
                    hashCode = hashCode * 59 + this.Agency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

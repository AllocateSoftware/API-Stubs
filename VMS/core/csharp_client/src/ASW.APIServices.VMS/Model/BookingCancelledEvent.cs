/* 
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.VMS.Client.OpenAPIDateConverter;

namespace ASW.APIServices.VMS.Model
{
    /// <summary>
    /// BookingCancelledEvent
    /// </summary>
    [DataContract]
    public partial class BookingCancelledEvent :  IEquatable<BookingCancelledEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingCancelledEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BookingCancelledEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingCancelledEvent" /> class.
        /// </summary>
        /// <param name="bookingRequestId">bookingRequestId (required).</param>
        /// <param name="bookingId">bookingId (required).</param>
        /// <param name="agencyId">agencyId (required).</param>
        /// <param name="cost">cost.</param>
        public BookingCancelledEvent(string bookingRequestId = default(string), string bookingId = default(string), string agencyId = default(string), decimal cost = default(decimal))
        {
            // to ensure "bookingRequestId" is required (not null)
            if (bookingRequestId == null)
            {
                throw new InvalidDataException("bookingRequestId is a required property for BookingCancelledEvent and cannot be null");
            }
            else
            {
                this.BookingRequestId = bookingRequestId;
            }
            
            // to ensure "bookingId" is required (not null)
            if (bookingId == null)
            {
                throw new InvalidDataException("bookingId is a required property for BookingCancelledEvent and cannot be null");
            }
            else
            {
                this.BookingId = bookingId;
            }
            
            // to ensure "agencyId" is required (not null)
            if (agencyId == null)
            {
                throw new InvalidDataException("agencyId is a required property for BookingCancelledEvent and cannot be null");
            }
            else
            {
                this.AgencyId = agencyId;
            }
            
            this.Cost = cost;
        }
        
        /// <summary>
        /// Gets or Sets BookingRequestId
        /// </summary>
        [DataMember(Name="bookingRequestId", EmitDefaultValue=false)]
        public string BookingRequestId { get; set; }

        /// <summary>
        /// Gets or Sets BookingId
        /// </summary>
        [DataMember(Name="bookingId", EmitDefaultValue=false)]
        public string BookingId { get; set; }

        /// <summary>
        /// Gets or Sets AgencyId
        /// </summary>
        [DataMember(Name="agencyId", EmitDefaultValue=false)]
        public string AgencyId { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public decimal Cost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingCancelledEvent {\n");
            sb.Append("  BookingRequestId: ").Append(BookingRequestId).Append("\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("  AgencyId: ").Append(AgencyId).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookingCancelledEvent);
        }

        /// <summary>
        /// Returns true if BookingCancelledEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of BookingCancelledEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingCancelledEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BookingRequestId == input.BookingRequestId ||
                    (this.BookingRequestId != null &&
                    this.BookingRequestId.Equals(input.BookingRequestId))
                ) && 
                (
                    this.BookingId == input.BookingId ||
                    (this.BookingId != null &&
                    this.BookingId.Equals(input.BookingId))
                ) && 
                (
                    this.AgencyId == input.AgencyId ||
                    (this.AgencyId != null &&
                    this.AgencyId.Equals(input.AgencyId))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BookingRequestId != null)
                    hashCode = hashCode * 59 + this.BookingRequestId.GetHashCode();
                if (this.BookingId != null)
                    hashCode = hashCode * 59 + this.BookingId.GetHashCode();
                if (this.AgencyId != null)
                    hashCode = hashCode * 59 + this.AgencyId.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

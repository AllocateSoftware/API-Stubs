/* 
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ASW.APIServices.VMS.Client;
using ASW.APIServices.VMS.Model;

namespace ASW.APIServices.VMS.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgenciesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>AgencyCostings</returns>
        AgencyCostings GetCostings (Duty duty);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>ApiResponse of AgencyCostings</returns>
        ApiResponse<AgencyCostings> GetCostingsWithHttpInfo (Duty duty);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        string SendDutyToAgencies (DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SendDutyToAgenciesWithHttpInfo (DutyRequest dutyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        string SendDutyToAgency (string agencyId, DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SendDutyToAgencyWithHttpInfo (string agencyId, DutyRequest dutyRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of AgencyCostings</returns>
        System.Threading.Tasks.Task<AgencyCostings> GetCostingsAsync (Duty duty);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of ApiResponse (AgencyCostings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgencyCostings>> GetCostingsAsyncWithHttpInfo (Duty duty);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SendDutyToAgenciesAsync (DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SendDutyToAgenciesAsyncWithHttpInfo (DutyRequest dutyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SendDutyToAgencyAsync (string agencyId, DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SendDutyToAgencyAsyncWithHttpInfo (string agencyId, DutyRequest dutyRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgenciesApi : IAgenciesApi
    {
        private ASW.APIServices.VMS.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgenciesApi(String basePath)
        {
            this.Configuration = new ASW.APIServices.VMS.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// </summary>
        /// <returns></returns>
        public AgenciesApi()
        {
            this.Configuration = ASW.APIServices.VMS.Client.Configuration.Default;

            ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgenciesApi(ASW.APIServices.VMS.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ASW.APIServices.VMS.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.VMS.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.VMS.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>AgencyCostings</returns>
        public AgencyCostings GetCostings (Duty duty)
        {
             ApiResponse<AgencyCostings> localVarResponse = GetCostingsWithHttpInfo(duty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>ApiResponse of AgencyCostings</returns>
        public ApiResponse<AgencyCostings> GetCostingsWithHttpInfo (Duty duty)
        {
            // verify the required parameter 'duty' is set
            if (duty == null)
                throw new ApiException(400, "Missing required parameter 'duty' when calling AgenciesApi->GetCostings");

            var localVarPath = "/agencies/costings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (duty != null && duty.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(duty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = duty; // byte array
            }

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCostings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgencyCostings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgencyCostings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgencyCostings)));
        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of AgencyCostings</returns>
        public async System.Threading.Tasks.Task<AgencyCostings> GetCostingsAsync (Duty duty)
        {
             ApiResponse<AgencyCostings> localVarResponse = await GetCostingsAsyncWithHttpInfo(duty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of ApiResponse (AgencyCostings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AgencyCostings>> GetCostingsAsyncWithHttpInfo (Duty duty)
        {
            // verify the required parameter 'duty' is set
            if (duty == null)
                throw new ApiException(400, "Missing required parameter 'duty' when calling AgenciesApi->GetCostings");

            var localVarPath = "/agencies/costings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (duty != null && duty.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(duty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = duty; // byte array
            }

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCostings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AgencyCostings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AgencyCostings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AgencyCostings)));
        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        public string SendDutyToAgencies (DutyRequest dutyRequest)
        {
             ApiResponse<string> localVarResponse = SendDutyToAgenciesWithHttpInfo(dutyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> SendDutyToAgenciesWithHttpInfo (DutyRequest dutyRequest)
        {
            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgencies");

            var localVarPath = "/agencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dutyRequest != null && dutyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dutyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dutyRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDutyToAgencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SendDutyToAgenciesAsync (DutyRequest dutyRequest)
        {
             ApiResponse<string> localVarResponse = await SendDutyToAgenciesAsyncWithHttpInfo(dutyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SendDutyToAgenciesAsyncWithHttpInfo (DutyRequest dutyRequest)
        {
            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgencies");

            var localVarPath = "/agencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dutyRequest != null && dutyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dutyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dutyRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDutyToAgencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        public string SendDutyToAgency (string agencyId, DutyRequest dutyRequest)
        {
             ApiResponse<string> localVarResponse = SendDutyToAgencyWithHttpInfo(agencyId, dutyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> SendDutyToAgencyWithHttpInfo (string agencyId, DutyRequest dutyRequest)
        {
            // verify the required parameter 'agencyId' is set
            if (agencyId == null)
                throw new ApiException(400, "Missing required parameter 'agencyId' when calling AgenciesApi->SendDutyToAgency");
            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgency");

            var localVarPath = "/agencies/{agencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agencyId != null) localVarPathParams.Add("agencyId", this.Configuration.ApiClient.ParameterToString(agencyId)); // path parameter
            if (dutyRequest != null && dutyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dutyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dutyRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDutyToAgency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SendDutyToAgencyAsync (string agencyId, DutyRequest dutyRequest)
        {
             ApiResponse<string> localVarResponse = await SendDutyToAgencyAsyncWithHttpInfo(agencyId, dutyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SendDutyToAgencyAsyncWithHttpInfo (string agencyId, DutyRequest dutyRequest)
        {
            // verify the required parameter 'agencyId' is set
            if (agencyId == null)
                throw new ApiException(400, "Missing required parameter 'agencyId' when calling AgenciesApi->SendDutyToAgency");
            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgency");

            var localVarPath = "/agencies/{agencyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (agencyId != null) localVarPathParams.Add("agencyId", this.Configuration.ApiClient.ParameterToString(agencyId)); // path parameter
            if (dutyRequest != null && dutyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dutyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dutyRequest; // byte array
            }

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDutyToAgency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}

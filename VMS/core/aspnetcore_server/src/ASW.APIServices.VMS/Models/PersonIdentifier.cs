/*
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.VMS.Converters;

namespace ASW.APIServices.VMS.Models
{ 
    /// <summary>
    /// ID to specify a worker. Either an ID (relative to the receiving system) or universalId (such as National Insurance Number) may be used.
    /// </summary>
    [DataContract]
    public partial class PersonIdentifier : IEquatable<PersonIdentifier>
    { 
        /// <summary>
        /// identifier of the person (worker) within the VMS
        /// </summary>
        /// <value>identifier of the person (worker) within the VMS</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Global identifer, such as National Insurance number (where known), or other identifier or composite identifier that may be used for matching purposes.
        /// </summary>
        /// <value>Global identifer, such as National Insurance number (where known), or other identifier or composite identifier that may be used for matching purposes.</value>
        [DataMember(Name="universalId", EmitDefaultValue=false)]
        public string UniversalId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonIdentifier {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UniversalId: ").Append(UniversalId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonIdentifier)obj);
        }

        /// <summary>
        /// Returns true if PersonIdentifier instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonIdentifier other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    UniversalId == other.UniversalId ||
                    UniversalId != null &&
                    UniversalId.Equals(other.UniversalId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (UniversalId != null)
                    hashCode = hashCode * 59 + UniversalId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonIdentifier left, PersonIdentifier right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonIdentifier left, PersonIdentifier right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

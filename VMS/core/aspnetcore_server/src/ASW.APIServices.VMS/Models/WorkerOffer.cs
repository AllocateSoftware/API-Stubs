/*
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.VMS.Converters;

namespace ASW.APIServices.VMS.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkerOffer : IEquatable<WorkerOffer>
    { 
        /// <summary>
        /// Unique identifier for this offer.
        /// </summary>
        /// <value>Unique identifier for this offer.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The underlying booking request for this offer.
        /// </summary>
        /// <value>The underlying booking request for this offer.</value>
        [DataMember(Name="bookingRequestId", EmitDefaultValue=false)]
        public string BookingRequestId { get; set; }

        /// <summary>
        /// Gets or Sets Worker
        /// </summary>
        [Required]
        [DataMember(Name="worker", EmitDefaultValue=false)]
        public Person Worker { get; set; }

        /// <summary>
        /// Gets or Sets Agency
        /// </summary>
        [Required]
        [DataMember(Name="agency", EmitDefaultValue=false)]
        public Agency Agency { get; set; }

        /// <summary>
        /// Qualification Status:  * `qualified` - Worker has passed all trust-defined checks, and may be considered valid to book.  * `unqualified` - Worker has not passed some, or all of the trust-defined checks. These should be performed before progressing to booking the worker. 
        /// </summary>
        /// <value>Qualification Status:  * `qualified` - Worker has passed all trust-defined checks, and may be considered valid to book.  * `unqualified` - Worker has not passed some, or all of the trust-defined checks. These should be performed before progressing to booking the worker. </value>
        [TypeConverter(typeof(CustomEnumConverter<QualificationStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum QualificationStatusEnum
        {
            
            /// <summary>
            /// Enum QualifiedEnum for qualified
            /// </summary>
            [EnumMember(Value = "qualified")]
            QualifiedEnum = 1,
            
            /// <summary>
            /// Enum UnqualifiedEnum for unqualified
            /// </summary>
            [EnumMember(Value = "unqualified")]
            UnqualifiedEnum = 2
        }

        /// <summary>
        /// Qualification Status:  * &#x60;qualified&#x60; - Worker has passed all trust-defined checks, and may be considered valid to book.  * &#x60;unqualified&#x60; - Worker has not passed some, or all of the trust-defined checks. These should be performed before progressing to booking the worker. 
        /// </summary>
        /// <value>Qualification Status:  * &#x60;qualified&#x60; - Worker has passed all trust-defined checks, and may be considered valid to book.  * &#x60;unqualified&#x60; - Worker has not passed some, or all of the trust-defined checks. These should be performed before progressing to booking the worker. </value>
        [Required]
        [DataMember(Name="qualificationStatus", EmitDefaultValue=false)]
        public QualificationStatusEnum QualificationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerOffer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BookingRequestId: ").Append(BookingRequestId).Append("\n");
            sb.Append("  Worker: ").Append(Worker).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  QualificationStatus: ").Append(QualificationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkerOffer)obj);
        }

        /// <summary>
        /// Returns true if WorkerOffer instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkerOffer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerOffer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BookingRequestId == other.BookingRequestId ||
                    BookingRequestId != null &&
                    BookingRequestId.Equals(other.BookingRequestId)
                ) && 
                (
                    Worker == other.Worker ||
                    Worker != null &&
                    Worker.Equals(other.Worker)
                ) && 
                (
                    Agency == other.Agency ||
                    Agency != null &&
                    Agency.Equals(other.Agency)
                ) && 
                (
                    QualificationStatus == other.QualificationStatus ||
                    
                    QualificationStatus.Equals(other.QualificationStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BookingRequestId != null)
                    hashCode = hashCode * 59 + BookingRequestId.GetHashCode();
                    if (Worker != null)
                    hashCode = hashCode * 59 + Worker.GetHashCode();
                    if (Agency != null)
                    hashCode = hashCode * 59 + Agency.GetHashCode();
                    
                    hashCode = hashCode * 59 + QualificationStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkerOffer left, WorkerOffer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkerOffer left, WorkerOffer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

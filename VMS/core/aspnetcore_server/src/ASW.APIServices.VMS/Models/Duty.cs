/*
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.VMS.Converters;

namespace ASW.APIServices.VMS.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Duty : IEquatable<Duty>
    { 
        /// <summary>
        /// ID of the duty (from the source system)
        /// </summary>
        /// <value>ID of the duty (from the source system)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets When
        /// </summary>
        [DataMember(Name="when", EmitDefaultValue=false)]
        public DutyTiming When { get; set; }

        /// <summary>
        /// Gets or Sets Where
        /// </summary>
        [DataMember(Name="where", EmitDefaultValue=false)]
        public DutyLocation Where { get; set; }

        /// <summary>
        /// Gets or Sets Requirements
        /// </summary>
        [DataMember(Name="requirements", EmitDefaultValue=false)]
        public DutyRequirements Requirements { get; set; }

        /// <summary>
        /// BankStaff ward trust identifier
        /// </summary>
        /// <value>BankStaff ward trust identifier</value>
        [DataMember(Name="clientDeptId", EmitDefaultValue=false)]
        public string ClientDeptId { get; set; }

        /// <summary>
        /// Staff group trust identifier
        /// </summary>
        /// <value>Staff group trust identifier</value>
        [DataMember(Name="subDiscipline", EmitDefaultValue=false)]
        public string SubDiscipline { get; set; }

        /// <summary>
        /// Grade trust identifier of the request
        /// </summary>
        /// <value>Grade trust identifier of the request</value>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or Sets FallbackGrade
        /// </summary>
        [DataMember(Name="fallbackGrade", EmitDefaultValue=false)]
        public string FallbackGrade { get; set; }

        /// <summary>
        /// Gets or Sets VacancyReason
        /// </summary>
        [DataMember(Name="vacancyReason", EmitDefaultValue=false)]
        public string VacancyReason { get; set; }

        /// <summary>
        /// Need to understand if needed from Trust/Agency
        /// </summary>
        /// <value>Need to understand if needed from Trust/Agency</value>
        [DataMember(Name="poNumber", EmitDefaultValue=false)]
        public int PoNumber { get; set; }

        /// <summary>
        /// BRN / Unique number
        /// </summary>
        /// <value>BRN / Unique number</value>
        [DataMember(Name="uniqueNumber", EmitDefaultValue=false)]
        public int UniqueNumber { get; set; }

        /// <summary>
        /// Supplying agency for the duty
        /// </summary>
        /// <value>Supplying agency for the duty</value>
        [DataMember(Name="agency", EmitDefaultValue=false)]
        public string Agency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Duty {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Where: ").Append(Where).Append("\n");
            sb.Append("  Requirements: ").Append(Requirements).Append("\n");
            sb.Append("  ClientDeptId: ").Append(ClientDeptId).Append("\n");
            sb.Append("  SubDiscipline: ").Append(SubDiscipline).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  FallbackGrade: ").Append(FallbackGrade).Append("\n");
            sb.Append("  VacancyReason: ").Append(VacancyReason).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  UniqueNumber: ").Append(UniqueNumber).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Duty)obj);
        }

        /// <summary>
        /// Returns true if Duty instances are equal
        /// </summary>
        /// <param name="other">Instance of Duty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Duty other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    When == other.When ||
                    When != null &&
                    When.Equals(other.When)
                ) && 
                (
                    Where == other.Where ||
                    Where != null &&
                    Where.Equals(other.Where)
                ) && 
                (
                    Requirements == other.Requirements ||
                    Requirements != null &&
                    Requirements.Equals(other.Requirements)
                ) && 
                (
                    ClientDeptId == other.ClientDeptId ||
                    ClientDeptId != null &&
                    ClientDeptId.Equals(other.ClientDeptId)
                ) && 
                (
                    SubDiscipline == other.SubDiscipline ||
                    SubDiscipline != null &&
                    SubDiscipline.Equals(other.SubDiscipline)
                ) && 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    FallbackGrade == other.FallbackGrade ||
                    FallbackGrade != null &&
                    FallbackGrade.Equals(other.FallbackGrade)
                ) && 
                (
                    VacancyReason == other.VacancyReason ||
                    VacancyReason != null &&
                    VacancyReason.Equals(other.VacancyReason)
                ) && 
                (
                    PoNumber == other.PoNumber ||
                    
                    PoNumber.Equals(other.PoNumber)
                ) && 
                (
                    UniqueNumber == other.UniqueNumber ||
                    
                    UniqueNumber.Equals(other.UniqueNumber)
                ) && 
                (
                    Agency == other.Agency ||
                    Agency != null &&
                    Agency.Equals(other.Agency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (When != null)
                    hashCode = hashCode * 59 + When.GetHashCode();
                    if (Where != null)
                    hashCode = hashCode * 59 + Where.GetHashCode();
                    if (Requirements != null)
                    hashCode = hashCode * 59 + Requirements.GetHashCode();
                    if (ClientDeptId != null)
                    hashCode = hashCode * 59 + ClientDeptId.GetHashCode();
                    if (SubDiscipline != null)
                    hashCode = hashCode * 59 + SubDiscipline.GetHashCode();
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    if (FallbackGrade != null)
                    hashCode = hashCode * 59 + FallbackGrade.GetHashCode();
                    if (VacancyReason != null)
                    hashCode = hashCode * 59 + VacancyReason.GetHashCode();
                    
                    hashCode = hashCode * 59 + PoNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + UniqueNumber.GetHashCode();
                    if (Agency != null)
                    hashCode = hashCode * 59 + Agency.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Duty left, Duty right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Duty left, Duty right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

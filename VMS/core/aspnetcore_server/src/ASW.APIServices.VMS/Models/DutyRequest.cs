/*
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.VMS.Converters;

namespace ASW.APIServices.VMS.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DutyRequest : IEquatable<DutyRequest>
    { 
        /// <summary>
        /// Where the caller wishes to direct-book a particular worker into the duty, their identifier is specified here.
        /// </summary>
        /// <value>Where the caller wishes to direct-book a particular worker into the duty, their identifier is specified here.</value>
        [DataMember(Name="workerId", EmitDefaultValue=false)]
        public string WorkerId { get; set; }

        /// <summary>
        /// Gets or Sets Duty
        /// </summary>
        [Required]
        [DataMember(Name="duty", EmitDefaultValue=false)]
        public Duty Duty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DutyRequest {\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("  Duty: ").Append(Duty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DutyRequest)obj);
        }

        /// <summary>
        /// Returns true if DutyRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of DutyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DutyRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WorkerId == other.WorkerId ||
                    WorkerId != null &&
                    WorkerId.Equals(other.WorkerId)
                ) && 
                (
                    Duty == other.Duty ||
                    Duty != null &&
                    Duty.Equals(other.Duty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WorkerId != null)
                    hashCode = hashCode * 59 + WorkerId.GetHashCode();
                    if (Duty != null)
                    hashCode = hashCode * 59 + Duty.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DutyRequest left, DutyRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DutyRequest left, DutyRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ASW.APIServices.VMS.Attributes;
using Microsoft.AspNetCore.Authorization;
using ASW.APIServices.VMS.Models;

namespace ASW.APIServices.VMS.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BookingsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Accept an agency offer for a worker.</remarks>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <response code="200">Booking request confirmed by VMS.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">No such booking request exists</response>
        [HttpPut]
        [Route("/vms/api/v1/bookingRequests/{bookingRequestId}/offers/{offerId}/accept")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        public virtual IActionResult AcceptAgencyOffer([FromRoute][Required]string bookingRequestId, [FromRoute][Required]string offerId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.</remarks>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <response code="200">Successfully deleted booking</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">No such booking exists</response>
        [HttpDelete]
        [Route("/vms/api/v1/bookings/{bookingId}")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult CancelBooking([FromRoute][Required]string bookingId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.</remarks>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <response code="200">Successfully deleted booking request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">No such booking request exists</response>
        [HttpDelete]
        [Route("/vms/api/v1/bookingRequests/{bookingRequestId}")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult CancelBookingRequest([FromRoute][Required]string bookingRequestId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Query a duty booking by id</remarks>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <response code="200">Request OK</response>
        /// <response code="400">Invalid input parameter</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">No such booking exists</response>
        [HttpGet]
        [Route("/vms/api/v1/bookings/{bookingId}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(DutyRequest))]
        public virtual IActionResult GetBooking([FromRoute][Required]string bookingId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DutyRequest));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"workerId\" : \"workerId\",\n  \"duty\" : {\n    \"requirements\" : {\n      \"specialty\" : \"Speciality\",\n      \"fallbackSpeciality\" : \"Fallback speciality\",\n      \"skill\" : \"Skill\",\n      \"fallbackSkill\" : \"Fallback skill\"\n    },\n    \"clientDeptId\" : \"TrustA.667899\",\n    \"agency\" : \"Liberty Resourcing Admin\",\n    \"subDiscipline\" : \"TrustA.1323\",\n    \"grade\" : \"TrustA.77889\",\n    \"fallbackGrade\" : \"TrustA.9989\",\n    \"where\" : {\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    },\n    \"id\" : \"ABD.1210\",\n    \"uniqueNumber\" : 112233,\n    \"when\" : {\n      \"date\" : \"2018-07-29T00:00:00.000+0000\",\n      \"breakDuration\" : 30,\n      \"startTime\" : \"12:40\",\n      \"endTime\" : \"01:25\"\n    },\n    \"vacancyReason\" : \"TrustA.12\",\n    \"poNumber\" : 0\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DutyRequest>(exampleJson)
            : default(DutyRequest);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

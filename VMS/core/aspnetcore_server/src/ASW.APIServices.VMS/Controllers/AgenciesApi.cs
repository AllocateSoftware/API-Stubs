/*
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ASW.APIServices.VMS.Attributes;
using Microsoft.AspNetCore.Authorization;
using ASW.APIServices.VMS.Models;

namespace ASW.APIServices.VMS.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AgenciesApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Returns a list of agencies and their costs for the supplied duty.</remarks>
        /// <param name="duty">Duty to be costed</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid input parameter</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Trust not found</response>
        [HttpPost]
        [Route("/vms/api/v1/agencies/costings")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(AgencyCostings))]
        public virtual IActionResult GetCostings([FromBody]Duty duty)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AgencyCostings));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"dutyId\" : \"dutyId\",\n  \"results\" : [ {\n    \"cost\" : 125,\n    \"agencyId\" : \"agencyId\",\n    \"agencyName\" : \"agencyName\"\n  }, {\n    \"cost\" : 125,\n    \"agencyId\" : \"agencyId\",\n    \"agencyName\" : \"agencyName\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AgencyCostings>(exampleJson)
            : default(AgencyCostings);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.</remarks>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <response code="200">Duty accepted by VMS.</response>
        /// <response code="400">Invalid input parameter</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Trust not found</response>
        [HttpPost]
        [Route("/vms/api/v1/agencies")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        public virtual IActionResult SendDutyToAgencies([FromBody]DutyRequest dutyRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.</remarks>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <response code="200">Duty accepted by VMS.</response>
        /// <response code="400">Invalid input parameter</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Trust not found</response>
        [HttpPost]
        [Route("/vms/api/v1/agencies/{agencyId}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        public virtual IActionResult SendDutyToAgency([FromRoute][Required]string agencyId, [FromBody]DutyRequest dutyRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

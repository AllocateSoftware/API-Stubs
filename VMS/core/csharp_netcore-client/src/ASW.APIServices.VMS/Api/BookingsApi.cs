/* 
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASW.APIServices.VMS.Client;
using ASW.APIServices.VMS.Model;

namespace ASW.APIServices.VMS.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBookingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept an agency offer for a worker.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>string</returns>
        string AcceptAgencyOffer (string bookingRequestId, string offerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept an agency offer for a worker.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> AcceptAgencyOfferWithHttpInfo (string bookingRequestId, string offerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns></returns>
        void CancelBooking (string bookingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelBookingWithHttpInfo (string bookingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns></returns>
        void CancelBookingRequest (string bookingRequestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelBookingRequestWithHttpInfo (string bookingRequestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query a duty booking by id
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>DutyRequest</returns>
        DutyRequest GetBooking (string bookingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query a duty booking by id
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>ApiResponse of DutyRequest</returns>
        ApiResponse<DutyRequest> GetBookingWithHttpInfo (string bookingId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBookingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept an agency offer for a worker.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> AcceptAgencyOfferAsync (string bookingRequestId, string offerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Accept an agency offer for a worker.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AcceptAgencyOfferAsyncWithHttpInfo (string bookingRequestId, string offerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelBookingAsync (string bookingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelBookingAsyncWithHttpInfo (string bookingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelBookingRequestAsync (string bookingRequestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelBookingRequestAsyncWithHttpInfo (string bookingRequestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query a duty booking by id
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>Task of DutyRequest</returns>
        System.Threading.Tasks.Task<DutyRequest> GetBookingAsync (string bookingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Query a duty booking by id
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>Task of ApiResponse (DutyRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<DutyRequest>> GetBookingAsyncWithHttpInfo (string bookingId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBookingsApi : IBookingsApiSync, IBookingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BookingsApi : IBookingsApi
    {
        private ASW.APIServices.VMS.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BookingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BookingsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BookingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BookingsApi(String basePath)
        {
            this.Configuration = ASW.APIServices.VMS.Client.Configuration.MergeConfigurations(
                ASW.APIServices.VMS.Client.GlobalConfiguration.Instance,
                new ASW.APIServices.VMS.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BookingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BookingsApi(ASW.APIServices.VMS.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ASW.APIServices.VMS.Client.Configuration.MergeConfigurations(
                ASW.APIServices.VMS.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BookingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BookingsApi(ASW.APIServices.VMS.Client.ISynchronousClient client,ASW.APIServices.VMS.Client.IAsynchronousClient asyncClient, ASW.APIServices.VMS.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ASW.APIServices.VMS.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ASW.APIServices.VMS.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.VMS.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.VMS.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Accept an agency offer for a worker.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>string</returns>
        public string AcceptAgencyOffer (string bookingRequestId, string offerId)
        {
             ASW.APIServices.VMS.Client.ApiResponse<string> localVarResponse = AcceptAgencyOfferWithHttpInfo(bookingRequestId, offerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Accept an agency offer for a worker.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>ApiResponse of string</returns>
        public ASW.APIServices.VMS.Client.ApiResponse< string > AcceptAgencyOfferWithHttpInfo (string bookingRequestId, string offerId)
        {
            // verify the required parameter 'bookingRequestId' is set
            if (bookingRequestId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingRequestId' when calling BookingsApi->AcceptAgencyOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'offerId' when calling BookingsApi->AcceptAgencyOffer");

            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bookingRequestId != null)
                localVarRequestOptions.PathParameters.Add("bookingRequestId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingRequestId)); // path parameter
            if (offerId != null)
                localVarRequestOptions.PathParameters.Add("offerId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(offerId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< string >("/bookingRequests/{bookingRequestId}/offers/{offerId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptAgencyOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Accept an agency offer for a worker.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> AcceptAgencyOfferAsync (string bookingRequestId, string offerId)
        {
             ASW.APIServices.VMS.Client.ApiResponse<string> localVarResponse = await AcceptAgencyOfferAsyncWithHttpInfo(bookingRequestId, offerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Accept an agency offer for a worker.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to accept.</param>
        /// <param name="offerId">ID of the offer to accept. Depending on the VMS, this may be a unique ID, an index to locate an agency, or the agency ID itself.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.VMS.Client.ApiResponse<string>> AcceptAgencyOfferAsyncWithHttpInfo (string bookingRequestId, string offerId)
        {
            // verify the required parameter 'bookingRequestId' is set
            if (bookingRequestId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingRequestId' when calling BookingsApi->AcceptAgencyOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'offerId' when calling BookingsApi->AcceptAgencyOffer");


            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (bookingRequestId != null)
                localVarRequestOptions.PathParameters.Add("bookingRequestId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingRequestId)); // path parameter
            if (offerId != null)
                localVarRequestOptions.PathParameters.Add("offerId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(offerId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/bookingRequests/{bookingRequestId}/offers/{offerId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptAgencyOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns></returns>
        public void CancelBooking (string bookingId)
        {
             CancelBookingWithHttpInfo(bookingId);
        }

        /// <summary>
        ///  Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.VMS.Client.ApiResponse<Object> CancelBookingWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingId' when calling BookingsApi->CancelBooking");

            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bookingId != null)
                localVarRequestOptions.PathParameters.Add("bookingId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/bookings/{bookingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBooking", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelBookingAsync (string bookingId)
        {
             await CancelBookingAsyncWithHttpInfo(bookingId);

        }

        /// <summary>
        ///  Cancel a duty booking previously accepted. This does not cancel any outstanding booking requests or duty cascades.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the booking to cancel.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.VMS.Client.ApiResponse<Object>> CancelBookingAsyncWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingId' when calling BookingsApi->CancelBooking");


            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (bookingId != null)
                localVarRequestOptions.PathParameters.Add("bookingId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/bookings/{bookingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBooking", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns></returns>
        public void CancelBookingRequest (string bookingRequestId)
        {
             CancelBookingRequestWithHttpInfo(bookingRequestId);
        }

        /// <summary>
        ///  Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.VMS.Client.ApiResponse<Object> CancelBookingRequestWithHttpInfo (string bookingRequestId)
        {
            // verify the required parameter 'bookingRequestId' is set
            if (bookingRequestId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingRequestId' when calling BookingsApi->CancelBookingRequest");

            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bookingRequestId != null)
                localVarRequestOptions.PathParameters.Add("bookingRequestId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingRequestId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/bookingRequests/{bookingRequestId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBookingRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelBookingRequestAsync (string bookingRequestId)
        {
             await CancelBookingRequestAsyncWithHttpInfo(bookingRequestId);

        }

        /// <summary>
        ///  Cancel a previously requested booking. If the booking request has resulted in actual bookings, these will also be cancelled.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingRequestId">ID of the booking request to cancel.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.VMS.Client.ApiResponse<Object>> CancelBookingRequestAsyncWithHttpInfo (string bookingRequestId)
        {
            // verify the required parameter 'bookingRequestId' is set
            if (bookingRequestId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingRequestId' when calling BookingsApi->CancelBookingRequest");


            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (bookingRequestId != null)
                localVarRequestOptions.PathParameters.Add("bookingRequestId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingRequestId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/bookingRequests/{bookingRequestId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelBookingRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Query a duty booking by id
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>DutyRequest</returns>
        public DutyRequest GetBooking (string bookingId)
        {
             ASW.APIServices.VMS.Client.ApiResponse<DutyRequest> localVarResponse = GetBookingWithHttpInfo(bookingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Query a duty booking by id
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>ApiResponse of DutyRequest</returns>
        public ASW.APIServices.VMS.Client.ApiResponse< DutyRequest > GetBookingWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingId' when calling BookingsApi->GetBooking");

            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (bookingId != null)
                localVarRequestOptions.PathParameters.Add("bookingId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< DutyRequest >("/bookings/{bookingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBooking", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Query a duty booking by id
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>Task of DutyRequest</returns>
        public async System.Threading.Tasks.Task<DutyRequest> GetBookingAsync (string bookingId)
        {
             ASW.APIServices.VMS.Client.ApiResponse<DutyRequest> localVarResponse = await GetBookingAsyncWithHttpInfo(bookingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Query a duty booking by id
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bookingId">ID of the duty booking</param>
        /// <returns>Task of ApiResponse (DutyRequest)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.VMS.Client.ApiResponse<DutyRequest>> GetBookingAsyncWithHttpInfo (string bookingId)
        {
            // verify the required parameter 'bookingId' is set
            if (bookingId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'bookingId' when calling BookingsApi->GetBooking");


            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (bookingId != null)
                localVarRequestOptions.PathParameters.Add("bookingId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(bookingId)); // path parameter

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DutyRequest>("/bookings/{bookingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBooking", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

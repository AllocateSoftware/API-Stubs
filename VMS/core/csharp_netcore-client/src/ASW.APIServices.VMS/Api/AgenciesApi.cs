/* 
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASW.APIServices.VMS.Client;
using ASW.APIServices.VMS.Model;

namespace ASW.APIServices.VMS.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgenciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>AgencyCostings</returns>
        AgencyCostings GetCostings (Duty duty);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>ApiResponse of AgencyCostings</returns>
        ApiResponse<AgencyCostings> GetCostingsWithHttpInfo (Duty duty);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        string SendDutyToAgencies (DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SendDutyToAgenciesWithHttpInfo (DutyRequest dutyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        string SendDutyToAgency (string agencyId, DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SendDutyToAgencyWithHttpInfo (string agencyId, DutyRequest dutyRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgenciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of AgencyCostings</returns>
        System.Threading.Tasks.Task<AgencyCostings> GetCostingsAsync (Duty duty);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of agencies and their costs for the supplied duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of ApiResponse (AgencyCostings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgencyCostings>> GetCostingsAsyncWithHttpInfo (Duty duty);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SendDutyToAgenciesAsync (DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SendDutyToAgenciesAsyncWithHttpInfo (DutyRequest dutyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SendDutyToAgencyAsync (string agencyId, DutyRequest dutyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </remarks>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SendDutyToAgencyAsyncWithHttpInfo (string agencyId, DutyRequest dutyRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgenciesApi : IAgenciesApiSync, IAgenciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgenciesApi : IAgenciesApi
    {
        private ASW.APIServices.VMS.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgenciesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgenciesApi(String basePath)
        {
            this.Configuration = ASW.APIServices.VMS.Client.Configuration.MergeConfigurations(
                ASW.APIServices.VMS.Client.GlobalConfiguration.Instance,
                new ASW.APIServices.VMS.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgenciesApi(ASW.APIServices.VMS.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ASW.APIServices.VMS.Client.Configuration.MergeConfigurations(
                ASW.APIServices.VMS.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.VMS.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AgenciesApi(ASW.APIServices.VMS.Client.ISynchronousClient client,ASW.APIServices.VMS.Client.IAsynchronousClient asyncClient, ASW.APIServices.VMS.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ASW.APIServices.VMS.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ASW.APIServices.VMS.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ASW.APIServices.VMS.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.VMS.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.VMS.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>AgencyCostings</returns>
        public AgencyCostings GetCostings (Duty duty)
        {
             ASW.APIServices.VMS.Client.ApiResponse<AgencyCostings> localVarResponse = GetCostingsWithHttpInfo(duty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>ApiResponse of AgencyCostings</returns>
        public ASW.APIServices.VMS.Client.ApiResponse< AgencyCostings > GetCostingsWithHttpInfo (Duty duty)
        {
            // verify the required parameter 'duty' is set
            if (duty == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'duty' when calling AgenciesApi->GetCostings");

            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = duty;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AgencyCostings >("/agencies/costings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCostings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of AgencyCostings</returns>
        public async System.Threading.Tasks.Task<AgencyCostings> GetCostingsAsync (Duty duty)
        {
             ASW.APIServices.VMS.Client.ApiResponse<AgencyCostings> localVarResponse = await GetCostingsAsyncWithHttpInfo(duty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of agencies and their costs for the supplied duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duty">Duty to be costed</param>
        /// <returns>Task of ApiResponse (AgencyCostings)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.VMS.Client.ApiResponse<AgencyCostings>> GetCostingsAsyncWithHttpInfo (Duty duty)
        {
            // verify the required parameter 'duty' is set
            if (duty == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'duty' when calling AgenciesApi->GetCostings");


            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = duty;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AgencyCostings>("/agencies/costings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCostings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        public string SendDutyToAgencies (DutyRequest dutyRequest)
        {
             ASW.APIServices.VMS.Client.ApiResponse<string> localVarResponse = SendDutyToAgenciesWithHttpInfo(dutyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        public ASW.APIServices.VMS.Client.ApiResponse< string > SendDutyToAgenciesWithHttpInfo (DutyRequest dutyRequest)
        {
            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgencies");

            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dutyRequest;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< string >("/agencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendDutyToAgencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SendDutyToAgenciesAsync (DutyRequest dutyRequest)
        {
             ASW.APIServices.VMS.Client.ApiResponse<string> localVarResponse = await SendDutyToAgenciesAsyncWithHttpInfo(dutyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Forward a request for a duty to be filled by agency. Dependent upon the rules specified within the VMS, this will cascade to the appropriate agencies.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.VMS.Client.ApiResponse<string>> SendDutyToAgenciesAsyncWithHttpInfo (DutyRequest dutyRequest)
        {
            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgencies");


            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = dutyRequest;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/agencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendDutyToAgencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>string</returns>
        public string SendDutyToAgency (string agencyId, DutyRequest dutyRequest)
        {
             ASW.APIServices.VMS.Client.ApiResponse<string> localVarResponse = SendDutyToAgencyWithHttpInfo(agencyId, dutyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>ApiResponse of string</returns>
        public ASW.APIServices.VMS.Client.ApiResponse< string > SendDutyToAgencyWithHttpInfo (string agencyId, DutyRequest dutyRequest)
        {
            // verify the required parameter 'agencyId' is set
            if (agencyId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'agencyId' when calling AgenciesApi->SendDutyToAgency");

            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgency");

            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.VMS.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (agencyId != null)
                localVarRequestOptions.PathParameters.Add("agencyId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(agencyId)); // path parameter
            localVarRequestOptions.Data = dutyRequest;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< string >("/agencies/{agencyId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendDutyToAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SendDutyToAgencyAsync (string agencyId, DutyRequest dutyRequest)
        {
             ASW.APIServices.VMS.Client.ApiResponse<string> localVarResponse = await SendDutyToAgencyAsyncWithHttpInfo(agencyId, dutyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Immediately forward a request for a duty to be filled by a specific agency. If the request also specifies a worker Identity, this will be a direct booking.
        /// </summary>
        /// <exception cref="ASW.APIServices.VMS.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="agencyId">ID of the agency to send the request to.</param>
        /// <param name="dutyRequest">Duty to be sent to agency</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.VMS.Client.ApiResponse<string>> SendDutyToAgencyAsyncWithHttpInfo (string agencyId, DutyRequest dutyRequest)
        {
            // verify the required parameter 'agencyId' is set
            if (agencyId == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'agencyId' when calling AgenciesApi->SendDutyToAgency");

            // verify the required parameter 'dutyRequest' is set
            if (dutyRequest == null)
                throw new ASW.APIServices.VMS.Client.ApiException(400, "Missing required parameter 'dutyRequest' when calling AgenciesApi->SendDutyToAgency");


            ASW.APIServices.VMS.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.VMS.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (agencyId != null)
                localVarRequestOptions.PathParameters.Add("agencyId", ASW.APIServices.VMS.Client.ClientUtils.ParameterToString(agencyId)); // path parameter
            localVarRequestOptions.Data = dutyRequest;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.VMS.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/agencies/{agencyId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendDutyToAgency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

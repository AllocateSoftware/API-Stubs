/* 
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.VMS.Client.OpenAPIDateConverter;

namespace ASW.APIServices.VMS.Model
{
    /// <summary>
    /// DutyTiming
    /// </summary>
    [DataContract]
    public partial class DutyTiming :  IEquatable<DutyTiming>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DutyTiming" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DutyTiming() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DutyTiming" /> class.
        /// </summary>
        /// <param name="date">Date of the duty (yyyy-mm-dd) (required).</param>
        /// <param name="startTime">Start time of the shift (required).</param>
        /// <param name="endTime">End time of the shift (required).</param>
        /// <param name="breakDuration">Duration of break in minutes.</param>
        public DutyTiming(DateTime date = default(DateTime), string startTime = default(string), string endTime = default(string), int breakDuration = default(int))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for DutyTiming and cannot be null");
            }
            else
            {
                this.Date = date;
            }

            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new InvalidDataException("startTime is a required property for DutyTiming and cannot be null");
            }
            else
            {
                this.StartTime = startTime;
            }

            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new InvalidDataException("endTime is a required property for DutyTiming and cannot be null");
            }
            else
            {
                this.EndTime = endTime;
            }

            this.BreakDuration = breakDuration;
        }
        
        /// <summary>
        /// Date of the duty (yyyy-mm-dd)
        /// </summary>
        /// <value>Date of the duty (yyyy-mm-dd)</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// Start time of the shift
        /// </summary>
        /// <value>Start time of the shift</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// End time of the shift
        /// </summary>
        /// <value>End time of the shift</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Duration of break in minutes
        /// </summary>
        /// <value>Duration of break in minutes</value>
        [DataMember(Name="breakDuration", EmitDefaultValue=false)]
        public int BreakDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DutyTiming {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  BreakDuration: ").Append(BreakDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DutyTiming);
        }

        /// <summary>
        /// Returns true if DutyTiming instances are equal
        /// </summary>
        /// <param name="input">Instance of DutyTiming to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DutyTiming input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.BreakDuration == input.BreakDuration ||
                    this.BreakDuration.Equals(input.BreakDuration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                hashCode = hashCode * 59 + this.BreakDuration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * VMS API
 *
 * ## Description  API to be impemented by VMS systems for integration into HealthSuite business processes 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.VMS.Client.OpenAPIDateConverter;

namespace ASW.APIServices.VMS.Model
{
    /// <summary>
    /// DutyRequirements
    /// </summary>
    [DataContract]
    public partial class DutyRequirements :  IEquatable<DutyRequirements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DutyRequirements" /> class.
        /// </summary>
        /// <param name="skill">Text description.</param>
        /// <param name="specialty">Text description.</param>
        /// <param name="fallbackSkill">Text description.</param>
        /// <param name="fallbackSpeciality">Text description.</param>
        public DutyRequirements(string skill = default(string), string specialty = default(string), string fallbackSkill = default(string), string fallbackSpeciality = default(string))
        {
            this.Skill = skill;
            this.Specialty = specialty;
            this.FallbackSkill = fallbackSkill;
            this.FallbackSpeciality = fallbackSpeciality;
        }
        
        /// <summary>
        /// Text description
        /// </summary>
        /// <value>Text description</value>
        [DataMember(Name="skill", EmitDefaultValue=false)]
        public string Skill { get; set; }

        /// <summary>
        /// Text description
        /// </summary>
        /// <value>Text description</value>
        [DataMember(Name="specialty", EmitDefaultValue=false)]
        public string Specialty { get; set; }

        /// <summary>
        /// Text description
        /// </summary>
        /// <value>Text description</value>
        [DataMember(Name="fallbackSkill", EmitDefaultValue=false)]
        public string FallbackSkill { get; set; }

        /// <summary>
        /// Text description
        /// </summary>
        /// <value>Text description</value>
        [DataMember(Name="fallbackSpeciality", EmitDefaultValue=false)]
        public string FallbackSpeciality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DutyRequirements {\n");
            sb.Append("  Skill: ").Append(Skill).Append("\n");
            sb.Append("  Specialty: ").Append(Specialty).Append("\n");
            sb.Append("  FallbackSkill: ").Append(FallbackSkill).Append("\n");
            sb.Append("  FallbackSpeciality: ").Append(FallbackSpeciality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DutyRequirements);
        }

        /// <summary>
        /// Returns true if DutyRequirements instances are equal
        /// </summary>
        /// <param name="input">Instance of DutyRequirements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DutyRequirements input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Skill == input.Skill ||
                    (this.Skill != null &&
                    this.Skill.Equals(input.Skill))
                ) && 
                (
                    this.Specialty == input.Specialty ||
                    (this.Specialty != null &&
                    this.Specialty.Equals(input.Specialty))
                ) && 
                (
                    this.FallbackSkill == input.FallbackSkill ||
                    (this.FallbackSkill != null &&
                    this.FallbackSkill.Equals(input.FallbackSkill))
                ) && 
                (
                    this.FallbackSpeciality == input.FallbackSpeciality ||
                    (this.FallbackSpeciality != null &&
                    this.FallbackSpeciality.Equals(input.FallbackSpeciality))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Skill != null)
                    hashCode = hashCode * 59 + this.Skill.GetHashCode();
                if (this.Specialty != null)
                    hashCode = hashCode * 59 + this.Specialty.GetHashCode();
                if (this.FallbackSkill != null)
                    hashCode = hashCode * 59 + this.FallbackSkill.GetHashCode();
                if (this.FallbackSpeciality != null)
                    hashCode = hashCode * 59 + this.FallbackSpeciality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

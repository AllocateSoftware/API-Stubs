# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server import util


class Agency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, contact_telephone: str=None, contact_email: str=None):
        """Agency - a model defined in OpenAPI

        :param id: The id of this Agency.
        :param name: The name of this Agency.
        :param contact_telephone: The contact_telephone of this Agency.
        :param contact_email: The contact_email of this Agency.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'contact_telephone': str,
            'contact_email': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'contact_telephone': 'contactTelephone',
            'contact_email': 'contactEmail'
        }

        self._id = id
        self._name = name
        self._contact_telephone = contact_telephone
        self._contact_email = contact_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Agency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Agency of this Agency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Agency.

        ID of the agency

        :return: The id of this Agency.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Agency.

        ID of the agency

        :param id: The id of this Agency.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Agency.

        Name of the agency

        :return: The name of this Agency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Agency.

        Name of the agency

        :param name: The name of this Agency.
        :type name: str
        """

        self._name = name

    @property
    def contact_telephone(self):
        """Gets the contact_telephone of this Agency.

        Telephone number for agency

        :return: The contact_telephone of this Agency.
        :rtype: str
        """
        return self._contact_telephone

    @contact_telephone.setter
    def contact_telephone(self, contact_telephone):
        """Sets the contact_telephone of this Agency.

        Telephone number for agency

        :param contact_telephone: The contact_telephone of this Agency.
        :type contact_telephone: str
        """

        self._contact_telephone = contact_telephone

    @property
    def contact_email(self):
        """Gets the contact_email of this Agency.

        Email address for agency

        :return: The contact_email of this Agency.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Agency.

        Email address for agency

        :param contact_email: The contact_email of this Agency.
        :type contact_email: str
        """

        self._contact_email = contact_email

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server.models.link import Link
from api_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, universal_id: str=None, first_name: str=None, surname: str=None, email: str=None, telephone_number: str=None, links: List[Link]=None):
        """Person - a model defined in OpenAPI

        :param id: The id of this Person.
        :param universal_id: The universal_id of this Person.
        :param first_name: The first_name of this Person.
        :param surname: The surname of this Person.
        :param email: The email of this Person.
        :param telephone_number: The telephone_number of this Person.
        :param links: The links of this Person.
        """
        self.openapi_types = {
            'id': str,
            'universal_id': str,
            'first_name': str,
            'surname': str,
            'email': str,
            'telephone_number': str,
            'links': List[Link]
        }

        self.attribute_map = {
            'id': 'id',
            'universal_id': 'universalId',
            'first_name': 'firstName',
            'surname': 'surname',
            'email': 'email',
            'telephone_number': 'telephoneNumber',
            'links': 'links'
        }

        self._id = id
        self._universal_id = universal_id
        self._first_name = first_name
        self._surname = surname
        self._email = email
        self._telephone_number = telephone_number
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Person.

        identifier of the person (worker) within the VMS

        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.

        identifier of the person (worker) within the VMS

        :param id: The id of this Person.
        :type id: str
        """

        self._id = id

    @property
    def universal_id(self):
        """Gets the universal_id of this Person.

        Global identifer, such as National Insurance number (where known), or other identifier or composite identifier that may be used for matching purposes.

        :return: The universal_id of this Person.
        :rtype: str
        """
        return self._universal_id

    @universal_id.setter
    def universal_id(self, universal_id):
        """Sets the universal_id of this Person.

        Global identifer, such as National Insurance number (where known), or other identifier or composite identifier that may be used for matching purposes.

        :param universal_id: The universal_id of this Person.
        :type universal_id: str
        """

        self._universal_id = universal_id

    @property
    def first_name(self):
        """Gets the first_name of this Person.


        :return: The first_name of this Person.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.


        :param first_name: The first_name of this Person.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def surname(self):
        """Gets the surname of this Person.


        :return: The surname of this Person.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Person.


        :param surname: The surname of this Person.
        :type surname: str
        """

        self._surname = surname

    @property
    def email(self):
        """Gets the email of this Person.


        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.


        :param email: The email of this Person.
        :type email: str
        """

        self._email = email

    @property
    def telephone_number(self):
        """Gets the telephone_number of this Person.


        :return: The telephone_number of this Person.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this Person.


        :param telephone_number: The telephone_number of this Person.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number

    @property
    def links(self):
        """Gets the links of this Person.

        Array of HATEOAS-style references that may be followed by the client. This may include a 'worker.profile' URL, which will return an HTML page representing the worker profile within the VMS.

        :return: The links of this Person.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Person.

        Array of HATEOAS-style references that may be followed by the client. This may include a 'worker.profile' URL, which will return an HTML page representing the worker profile within the VMS.

        :param links: The links of this Person.
        :type links: List[Link]
        """

        self._links = links

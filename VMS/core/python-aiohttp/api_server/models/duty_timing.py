# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server import util


class DutyTiming(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date: date=None, start_time: str=None, end_time: str=None, break_duration: int=None):
        """DutyTiming - a model defined in OpenAPI

        :param date: The date of this DutyTiming.
        :param start_time: The start_time of this DutyTiming.
        :param end_time: The end_time of this DutyTiming.
        :param break_duration: The break_duration of this DutyTiming.
        """
        self.openapi_types = {
            'date': date,
            'start_time': str,
            'end_time': str,
            'break_duration': int
        }

        self.attribute_map = {
            'date': 'date',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'break_duration': 'breakDuration'
        }

        self._date = date
        self._start_time = start_time
        self._end_time = end_time
        self._break_duration = break_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DutyTiming':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DutyTiming of this DutyTiming.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date(self):
        """Gets the date of this DutyTiming.

        Date of the duty (yyyy-mm-dd)

        :return: The date of this DutyTiming.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this DutyTiming.

        Date of the duty (yyyy-mm-dd)

        :param date: The date of this DutyTiming.
        :type date: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def start_time(self):
        """Gets the start_time of this DutyTiming.

        Start time of the shift

        :return: The start_time of this DutyTiming.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DutyTiming.

        Start time of the shift

        :param start_time: The start_time of this DutyTiming.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this DutyTiming.

        End time of the shift

        :return: The end_time of this DutyTiming.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DutyTiming.

        End time of the shift

        :param end_time: The end_time of this DutyTiming.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def break_duration(self):
        """Gets the break_duration of this DutyTiming.

        Duration of break in minutes

        :return: The break_duration of this DutyTiming.
        :rtype: int
        """
        return self._break_duration

    @break_duration.setter
    def break_duration(self, break_duration):
        """Sets the break_duration of this DutyTiming.

        Duration of break in minutes

        :param break_duration: The break_duration of this DutyTiming.
        :type break_duration: int
        """

        self._break_duration = break_duration

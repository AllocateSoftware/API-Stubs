/*
 * VMS Provisioning API
 *
 * ## Description  API to be impemented by 247Time (and, potentially, partners) to enable provisioning of accounts and the org structure 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ProvisioningApiController binds http requests to an api service and writes the service results to the http response
type ProvisioningApiController struct {
	service ProvisioningApiServicer
}

// NewProvisioningApiController creates a default api controller
func NewProvisioningApiController(s ProvisioningApiServicer) Router {
	return &ProvisioningApiController{ service: s }
}

// Routes returns all of the api route for the ProvisioningApiController
func (c *ProvisioningApiController) Routes() Routes {
	return Routes{ 
		{
			"ProvisionStructure",
			strings.ToUpper("Put"),
			"/vms/provisioning/v1/provision/customer/{id}",
			c.ProvisionStructure,
		},
		{
			"ProvisionUser",
			strings.ToUpper("Put"),
			"/vms/provisioning/v1/provision/user/{id}",
			c.ProvisionUser,
		},
	}
}

// ProvisionStructure - 
func (c *ProvisioningApiController) ProvisionStructure(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	structureProvision := &StructureProvision{}
	if err := json.NewDecoder(r.Body).Decode(&structureProvision); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ProvisionStructure(id, *structureProvision)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// ProvisionUser - 
func (c *ProvisioningApiController) ProvisionUser(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	userProvision := &UserProvision{}
	if err := json.NewDecoder(r.Body).Decode(&userProvision); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ProvisionUser(id, *userProvision)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

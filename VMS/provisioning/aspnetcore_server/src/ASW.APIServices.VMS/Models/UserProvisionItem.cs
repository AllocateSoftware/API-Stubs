/*
 * VMS Provisioning API
 *
 * ## Description  API to be impemented by 247Time (and, potentially, partners) to enable provisioning of accounts and the org structure 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.VMS.Converters;

namespace ASW.APIServices.VMS.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserProvisionItem : IEquatable<UserProvisionItem>
    { 
        /// <summary>
        /// Identifier of the unit within the HealthSuite ecosystem
        /// </summary>
        /// <value>Identifier of the unit within the HealthSuite ecosystem</value>
        [DataMember(Name="unitId", EmitDefaultValue=false)]
        public string UnitId { get; set; }

        /// <summary>
        /// Optional list of textual roles that the user has in relation to the unit
        /// </summary>
        /// <value>Optional list of textual roles that the user has in relation to the unit</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserProvisionItem {\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserProvisionItem)obj);
        }

        /// <summary>
        /// Returns true if UserProvisionItem instances are equal
        /// </summary>
        /// <param name="other">Instance of UserProvisionItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserProvisionItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UnitId == other.UnitId ||
                    UnitId != null &&
                    UnitId.Equals(other.UnitId)
                ) && 
                (
                    Roles == other.Roles ||
                    Roles != null &&
                    other.Roles != null &&
                    Roles.SequenceEqual(other.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UnitId != null)
                    hashCode = hashCode * 59 + UnitId.GetHashCode();
                    if (Roles != null)
                    hashCode = hashCode * 59 + Roles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserProvisionItem left, UserProvisionItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserProvisionItem left, UserProvisionItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * VMS Provisioning API
 *
 * ## Description  API to be impemented by 247Time (and, potentially, partners) to enable provisioning of accounts and the org structure 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ASW.APIServices.VMS.Attributes;
using Microsoft.AspNetCore.Authorization;
using ASW.APIServices.VMS.Models;

namespace ASW.APIServices.VMS.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProvisioningApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Provision the supplied structure.</remarks>
        /// <param name="id">ID of the customer to provision</param>
        /// <param name="structureProvision">Structure of the Customer (trust). This call should be considered a &#39;set&#39; - elements omitted that were present in previous provisionings should be removed.</param>
        /// <response code="204">Provisioning successful</response>
        /// <response code="400">Invalid input parameter</response>
        /// <response code="401">Unauthorized</response>
        [HttpPut]
        [Route("/vms/provisioning/v1/provision/customer/{id}")]
        [ValidateModelState]
        public virtual IActionResult ProvisionStructure([FromRoute][Required]string id, [FromBody]StructureProvision structureProvision)
        { 

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Provision the supplied user.</remarks>
        /// <param name="id">ID of the user to provision</param>
        /// <param name="userProvision">Structure of the User</param>
        /// <response code="204">User accepted and provisioned.</response>
        /// <response code="400">Invalid input parameter</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Trust not found</response>
        [HttpPut]
        [Route("/vms/provisioning/v1/provision/user/{id}")]
        [ValidateModelState]
        public virtual IActionResult ProvisionUser([FromRoute][Required]string id, [FromBody]UserProvision userProvision)
        { 

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri=None, name=None, roles=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param uri: The uri of this User.  # noqa: E501
        :type uri: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param roles: The roles of this User.  # noqa: E501
        :type roles: List[str]
        """
        self.openapi_types = {
            'uri': str,
            'name': str,
            'roles': List[str]
        }

        self.attribute_map = {
            'uri': 'uri',
            'name': 'name',
            'roles': 'roles'
        }

        self._uri = uri
        self._name = name
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self):
        """Gets the uri of this User.

        Identifier of the user within the HealthSuite ecosystem  # noqa: E501

        :return: The uri of this User.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this User.

        Identifier of the user within the HealthSuite ecosystem  # noqa: E501

        :param uri: The uri of this User.
        :type uri: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this User.

        Name for the user  # noqa: E501

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Name for the user  # noqa: E501

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this User.

        Optional list of textual roles that the user has in relation to the unit  # noqa: E501

        :return: The roles of this User.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.

        Optional list of textual roles that the user has in relation to the unit  # noqa: E501

        :param roles: The roles of this User.
        :type roles: List[str]
        """

        self._roles = roles

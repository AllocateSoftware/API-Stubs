# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server.models.cost_centre import CostCentre
from api_server.models.staff_group import StaffGroup
from api_server import util

from api_server.models.cost_centre import CostCentre  # noqa: E501
from api_server.models.staff_group import StaffGroup  # noqa: E501

class Unit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, cost_centre=None, staff_groups=None, children=None):  # noqa: E501
        """Unit - a model defined in OpenAPI

        :param id: The id of this Unit.  # noqa: E501
        :type id: str
        :param name: The name of this Unit.  # noqa: E501
        :type name: str
        :param cost_centre: The cost_centre of this Unit.  # noqa: E501
        :type cost_centre: CostCentre
        :param staff_groups: The staff_groups of this Unit.  # noqa: E501
        :type staff_groups: List[StaffGroup]
        :param children: The children of this Unit.  # noqa: E501
        :type children: List[Unit]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'cost_centre': CostCentre,
            'staff_groups': List[StaffGroup],
            'children': List[Unit]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'cost_centre': 'costCentre',
            'staff_groups': 'staffGroups',
            'children': 'children'
        }

        self._id = id
        self._name = name
        self._cost_centre = cost_centre
        self._staff_groups = staff_groups
        self._children = children

    @classmethod
    def from_dict(cls, dikt) -> 'Unit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Unit of this Unit.  # noqa: E501
        :rtype: Unit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Unit.


        :return: The id of this Unit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Unit.


        :param id: The id of this Unit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Unit.


        :return: The name of this Unit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Unit.


        :param name: The name of this Unit.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def cost_centre(self):
        """Gets the cost_centre of this Unit.


        :return: The cost_centre of this Unit.
        :rtype: CostCentre
        """
        return self._cost_centre

    @cost_centre.setter
    def cost_centre(self, cost_centre):
        """Sets the cost_centre of this Unit.


        :param cost_centre: The cost_centre of this Unit.
        :type cost_centre: CostCentre
        """

        self._cost_centre = cost_centre

    @property
    def staff_groups(self):
        """Gets the staff_groups of this Unit.


        :return: The staff_groups of this Unit.
        :rtype: List[StaffGroup]
        """
        return self._staff_groups

    @staff_groups.setter
    def staff_groups(self, staff_groups):
        """Sets the staff_groups of this Unit.


        :param staff_groups: The staff_groups of this Unit.
        :type staff_groups: List[StaffGroup]
        """

        self._staff_groups = staff_groups

    @property
    def children(self):
        """Gets the children of this Unit.

        Children of this unit. This may be an arbitarily deep tree structure.  # noqa: E501

        :return: The children of this Unit.
        :rtype: List[Unit]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Unit.

        Children of this unit. This may be an arbitarily deep tree structure.  # noqa: E501

        :param children: The children of this Unit.
        :type children: List[Unit]
        """

        self._children = children

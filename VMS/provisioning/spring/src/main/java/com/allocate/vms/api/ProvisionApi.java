/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.vms.api;

import com.allocate.vms.api.model.StructureProvision;
import com.allocate.vms.api.model.UserProvision;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:35:34.643941Z[Europe/London]")

@Validated
@Api(value = "provision", description = "the provision API")
public interface ProvisionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "provisionStructure", notes = "Provision the supplied structure.", tags={ "provisioning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Provisioning successful"),
        @ApiResponse(code = 400, message = "Invalid input parameter"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/provision/customer/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> provisionStructure(@ApiParam(value = "ID of the customer to provision",required=true) @PathVariable("id") String id,@ApiParam(value = "Structure of the Customer (trust). This call should be considered a 'set' - elements omitted that were present in previous provisionings should be removed." ,required=true )  @Valid @RequestBody StructureProvision structureProvision) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "provisionUser", notes = "Provision the supplied user.", tags={ "provisioning", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User accepted and provisioned."),
        @ApiResponse(code = 400, message = "Invalid input parameter"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/provision/user/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> provisionUser(@ApiParam(value = "ID of the user to provision",required=true) @PathVariable("id") String id,@ApiParam(value = "Structure of the User" ,required=true )  @Valid @RequestBody UserProvision userProvision) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

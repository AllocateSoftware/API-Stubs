/* 
 * VMS Provisioning API
 *
 * ## Description  API to be impemented by 247Time (and, potentially, partners) to enable provisioning of accounts and the org structure 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.VMS.Client.OpenAPIDateConverter;

namespace ASW.APIServices.VMS.Model
{
    /// <summary>
    /// UserProvisionItem
    /// </summary>
    [DataContract]
    public partial class UserProvisionItem :  IEquatable<UserProvisionItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProvisionItem" /> class.
        /// </summary>
        /// <param name="unitId">Identifier of the unit within the HealthSuite ecosystem.</param>
        /// <param name="roles">Optional list of textual roles that the user has in relation to the unit.</param>
        public UserProvisionItem(string unitId = default(string), List<string> roles = default(List<string>))
        {
            this.UnitId = unitId;
            this.Roles = roles;
        }
        
        /// <summary>
        /// Identifier of the unit within the HealthSuite ecosystem
        /// </summary>
        /// <value>Identifier of the unit within the HealthSuite ecosystem</value>
        [DataMember(Name="unitId", EmitDefaultValue=false)]
        public string UnitId { get; set; }

        /// <summary>
        /// Optional list of textual roles that the user has in relation to the unit
        /// </summary>
        /// <value>Optional list of textual roles that the user has in relation to the unit</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserProvisionItem {\n");
            sb.Append("  UnitId: ").Append(UnitId).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserProvisionItem);
        }

        /// <summary>
        /// Returns true if UserProvisionItem instances are equal
        /// </summary>
        /// <param name="input">Instance of UserProvisionItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserProvisionItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnitId == input.UnitId ||
                    (this.UnitId != null &&
                    this.UnitId.Equals(input.UnitId))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnitId != null)
                    hashCode = hashCode * 59 + this.UnitId.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

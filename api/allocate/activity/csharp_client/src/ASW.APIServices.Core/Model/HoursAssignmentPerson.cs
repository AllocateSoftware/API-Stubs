/* 
 * Activity API
 *
 *      ## API for querying worker activity.      This is an early availabilty API, and is subject to change. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// HoursAssignmentPerson
    /// </summary>
    [DataContract]
    public partial class HoursAssignmentPerson :  IEquatable<HoursAssignmentPerson>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HoursAssignmentPerson" /> class.
        /// </summary>
        /// <param name="staffNumber">staffNumber.</param>
        /// <param name="forenames">List of forenames for the person.</param>
        /// <param name="surname">Surname for the person.</param>
        /// <param name="mobileNumber">mobileNumber.</param>
        /// <param name="grade">grade.</param>
        /// <param name="gradeType">gradeType.</param>
        /// <param name="gradeTypeCategory">gradeTypeCategory.</param>
        /// <param name="wTE">Whole time Equivalent – this is the person’s contracted hours divided by the person’s default grade type value for WTE (if the grade type has no value then use grade type category if neither have a value use system default setting). e.g. 37.5 / (2250/60) &#x3D; 1.00 NOTE if the grade type default wte is not set this will not be returned .</param>
        public HoursAssignmentPerson(string staffNumber = default(string), string forenames = default(string), string surname = default(string), string mobileNumber = default(string), Grade grade = default(Grade), GradeType gradeType = default(GradeType), GradeTypeCategory gradeTypeCategory = default(GradeTypeCategory), decimal wTE = default(decimal))
        {
            this.StaffNumber = staffNumber;
            this.Forenames = forenames;
            this.Surname = surname;
            this.MobileNumber = mobileNumber;
            this.Grade = grade;
            this.GradeType = gradeType;
            this.GradeTypeCategory = gradeTypeCategory;
            this.WTE = wTE;
        }
        
        /// <summary>
        /// Gets or Sets StaffNumber
        /// </summary>
        [DataMember(Name="staffNumber", EmitDefaultValue=false)]
        public string StaffNumber { get; set; }

        /// <summary>
        /// List of forenames for the person
        /// </summary>
        /// <value>List of forenames for the person</value>
        [DataMember(Name="forenames", EmitDefaultValue=false)]
        public string Forenames { get; set; }

        /// <summary>
        /// Surname for the person
        /// </summary>
        /// <value>Surname for the person</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets MobileNumber
        /// </summary>
        [DataMember(Name="mobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public Grade Grade { get; set; }

        /// <summary>
        /// Gets or Sets GradeType
        /// </summary>
        [DataMember(Name="gradeType", EmitDefaultValue=false)]
        public GradeType GradeType { get; set; }

        /// <summary>
        /// Gets or Sets GradeTypeCategory
        /// </summary>
        [DataMember(Name="gradeTypeCategory", EmitDefaultValue=false)]
        public GradeTypeCategory GradeTypeCategory { get; set; }

        /// <summary>
        /// Whole time Equivalent – this is the person’s contracted hours divided by the person’s default grade type value for WTE (if the grade type has no value then use grade type category if neither have a value use system default setting). e.g. 37.5 / (2250/60) &#x3D; 1.00 NOTE if the grade type default wte is not set this will not be returned 
        /// </summary>
        /// <value>Whole time Equivalent – this is the person’s contracted hours divided by the person’s default grade type value for WTE (if the grade type has no value then use grade type category if neither have a value use system default setting). e.g. 37.5 / (2250/60) &#x3D; 1.00 NOTE if the grade type default wte is not set this will not be returned </value>
        [DataMember(Name="WTE", EmitDefaultValue=false)]
        public decimal WTE { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HoursAssignmentPerson {\n");
            sb.Append("  StaffNumber: ").Append(StaffNumber).Append("\n");
            sb.Append("  Forenames: ").Append(Forenames).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  GradeType: ").Append(GradeType).Append("\n");
            sb.Append("  GradeTypeCategory: ").Append(GradeTypeCategory).Append("\n");
            sb.Append("  WTE: ").Append(WTE).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoursAssignmentPerson);
        }

        /// <summary>
        /// Returns true if HoursAssignmentPerson instances are equal
        /// </summary>
        /// <param name="input">Instance of HoursAssignmentPerson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoursAssignmentPerson input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StaffNumber == input.StaffNumber ||
                    (this.StaffNumber != null &&
                    this.StaffNumber.Equals(input.StaffNumber))
                ) && 
                (
                    this.Forenames == input.Forenames ||
                    (this.Forenames != null &&
                    this.Forenames.Equals(input.Forenames))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.GradeType == input.GradeType ||
                    (this.GradeType != null &&
                    this.GradeType.Equals(input.GradeType))
                ) && 
                (
                    this.GradeTypeCategory == input.GradeTypeCategory ||
                    (this.GradeTypeCategory != null &&
                    this.GradeTypeCategory.Equals(input.GradeTypeCategory))
                ) && 
                (
                    this.WTE == input.WTE ||
                    (this.WTE != null &&
                    this.WTE.Equals(input.WTE))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StaffNumber != null)
                    hashCode = hashCode * 59 + this.StaffNumber.GetHashCode();
                if (this.Forenames != null)
                    hashCode = hashCode * 59 + this.Forenames.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.MobileNumber != null)
                    hashCode = hashCode * 59 + this.MobileNumber.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.GradeType != null)
                    hashCode = hashCode * 59 + this.GradeType.GetHashCode();
                if (this.GradeTypeCategory != null)
                    hashCode = hashCode * 59 + this.GradeTypeCategory.GetHashCode();
                if (this.WTE != null)
                    hashCode = hashCode * 59 + this.WTE.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Activity API
 *
 *      ## API for querying worker activity.      This is an early availabilty API, and is subject to change. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// HoursAssignment
    /// </summary>
    [DataContract]
    public partial class HoursAssignment :  IEquatable<HoursAssignment>, IValidatableObject
    {
        /// <summary>
        /// Details where the duty is in it’s lifecycle. *   Requested &#x3D; (Requested Bank Duty) *   Accepted &#x3D; (Roster Approved) *   Approved &#x3D; (Finalised) *   Submitted &#x3D; (PAID) *   Paid *   Unlocked &#x3D; (Was once Finalised state.) *   Relocked &#x3D; (Finalised given that it was once un-finalised for some reason) 
        /// </summary>
        /// <value>Details where the duty is in it’s lifecycle. *   Requested &#x3D; (Requested Bank Duty) *   Accepted &#x3D; (Roster Approved) *   Approved &#x3D; (Finalised) *   Submitted &#x3D; (PAID) *   Paid *   Unlocked &#x3D; (Was once Finalised state.) *   Relocked &#x3D; (Finalised given that it was once un-finalised for some reason) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayStateEnum
        {
            /// <summary>
            /// Enum Requested for value: requested
            /// </summary>
            [EnumMember(Value = "requested")]
            Requested = 1,

            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            Accepted = 2,

            /// <summary>
            /// Enum Approved for value: approved
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved = 3,

            /// <summary>
            /// Enum Submitted for value: submitted
            /// </summary>
            [EnumMember(Value = "submitted")]
            Submitted = 4,

            /// <summary>
            /// Enum Paid for value: paid
            /// </summary>
            [EnumMember(Value = "paid")]
            Paid = 5,

            /// <summary>
            /// Enum Unlocked for value: unlocked
            /// </summary>
            [EnumMember(Value = "unlocked")]
            Unlocked = 6,

            /// <summary>
            /// Enum Relocked for value: relocked
            /// </summary>
            [EnumMember(Value = "relocked")]
            Relocked = 7

        }

        /// <summary>
        /// Details where the duty is in it’s lifecycle. *   Requested &#x3D; (Requested Bank Duty) *   Accepted &#x3D; (Roster Approved) *   Approved &#x3D; (Finalised) *   Submitted &#x3D; (PAID) *   Paid *   Unlocked &#x3D; (Was once Finalised state.) *   Relocked &#x3D; (Finalised given that it was once un-finalised for some reason) 
        /// </summary>
        /// <value>Details where the duty is in it’s lifecycle. *   Requested &#x3D; (Requested Bank Duty) *   Accepted &#x3D; (Roster Approved) *   Approved &#x3D; (Finalised) *   Submitted &#x3D; (PAID) *   Paid *   Unlocked &#x3D; (Was once Finalised state.) *   Relocked &#x3D; (Finalised given that it was once un-finalised for some reason) </value>
        [DataMember(Name="payState", EmitDefaultValue=false)]
        public PayStateEnum? PayState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoursAssignment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HoursAssignment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoursAssignment" /> class.
        /// </summary>
        /// <param name="id">Identifier for the hours assignment (required).</param>
        /// <param name="when">Date assignment begins on.</param>
        /// <param name="actual">actual.</param>
        /// <param name="workTime">Number of minutes worked in assignment.</param>
        /// <param name="contractedTime">Number of minutes that count towards the person’s contracted hours.</param>
        /// <param name="payState">Details where the duty is in it’s lifecycle. *   Requested &#x3D; (Requested Bank Duty) *   Accepted &#x3D; (Roster Approved) *   Approved &#x3D; (Finalised) *   Submitted &#x3D; (PAID) *   Paid *   Unlocked &#x3D; (Was once Finalised state.) *   Relocked &#x3D; (Finalised given that it was once un-finalised for some reason) .</param>
        /// <param name="employeeType">employeeType.</param>
        /// <param name="person">person.</param>
        /// <param name="assignment">assignment.</param>
        /// <param name="post">post.</param>
        /// <param name="posting">posting.</param>
        /// <param name="cancellation">cancellation.</param>
        /// <param name="inCharge">Was the employee in charge?.</param>
        /// <param name="shift">shift.</param>
        /// <param name="duty">duty.</param>
        /// <param name="fulfillment">fulfillment.</param>
        /// <param name="costCentre">costCentre.</param>
        /// <param name="owningUnit">owningUnit.</param>
        /// <param name="resourcingUnit">resourcingUnit.</param>
        /// <param name="requirement">requirement.</param>
        /// <param name="location">location.</param>
        /// <param name="additionalDutyReason">additionalDutyReason.</param>
        /// <param name="dutyHasWarnings">dutyHasWarnings.</param>
        public HoursAssignment(int id = default(int), DateTime when = default(DateTime), DateSpan actual = default(DateSpan), int workTime = default(int), int contractedTime = default(int), PayStateEnum? payState = default(PayStateEnum?), HoursAssignmentEmployeeType employeeType = default(HoursAssignmentEmployeeType), HoursAssignmentPerson person = default(HoursAssignmentPerson), HoursAssignmentAssignment assignment = default(HoursAssignmentAssignment), HoursAssignmentPost post = default(HoursAssignmentPost), HoursAssignmentPosting posting = default(HoursAssignmentPosting), HoursAssignmentCancellation cancellation = default(HoursAssignmentCancellation), bool inCharge = default(bool), HoursAssignmentShift shift = default(HoursAssignmentShift), HoursAssignmentDuty duty = default(HoursAssignmentDuty), HoursAssignmentFulfillment fulfillment = default(HoursAssignmentFulfillment), HoursAssignmentCostCentre costCentre = default(HoursAssignmentCostCentre), HoursAssignmentOwningUnit owningUnit = default(HoursAssignmentOwningUnit), HoursAssignmentOwningUnit resourcingUnit = default(HoursAssignmentOwningUnit), HoursAssignmentRequirement requirement = default(HoursAssignmentRequirement), HoursAssignmentLocation location = default(HoursAssignmentLocation), string additionalDutyReason = default(string), bool dutyHasWarnings = default(bool))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for HoursAssignment and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            this.When = when;
            this.Actual = actual;
            this.WorkTime = workTime;
            this.ContractedTime = contractedTime;
            this.PayState = payState;
            this.EmployeeType = employeeType;
            this.Person = person;
            this.Assignment = assignment;
            this.Post = post;
            this.Posting = posting;
            this.Cancellation = cancellation;
            this.InCharge = inCharge;
            this.Shift = shift;
            this.Duty = duty;
            this.Fulfillment = fulfillment;
            this.CostCentre = costCentre;
            this.OwningUnit = owningUnit;
            this.ResourcingUnit = resourcingUnit;
            this.Requirement = requirement;
            this.Location = location;
            this.AdditionalDutyReason = additionalDutyReason;
            this.DutyHasWarnings = dutyHasWarnings;
        }
        
        /// <summary>
        /// Identifier for the hours assignment
        /// </summary>
        /// <value>Identifier for the hours assignment</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Date assignment begins on
        /// </summary>
        /// <value>Date assignment begins on</value>
        [DataMember(Name="when", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime When { get; set; }

        /// <summary>
        /// Gets or Sets Actual
        /// </summary>
        [DataMember(Name="actual", EmitDefaultValue=false)]
        public DateSpan Actual { get; set; }

        /// <summary>
        /// Number of minutes worked in assignment
        /// </summary>
        /// <value>Number of minutes worked in assignment</value>
        [DataMember(Name="workTime", EmitDefaultValue=false)]
        public int WorkTime { get; set; }

        /// <summary>
        /// Number of minutes that count towards the person’s contracted hours
        /// </summary>
        /// <value>Number of minutes that count towards the person’s contracted hours</value>
        [DataMember(Name="contractedTime", EmitDefaultValue=false)]
        public int ContractedTime { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeType
        /// </summary>
        [DataMember(Name="employeeType", EmitDefaultValue=false)]
        public HoursAssignmentEmployeeType EmployeeType { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public HoursAssignmentPerson Person { get; set; }

        /// <summary>
        /// Gets or Sets Assignment
        /// </summary>
        [DataMember(Name="assignment", EmitDefaultValue=false)]
        public HoursAssignmentAssignment Assignment { get; set; }

        /// <summary>
        /// Gets or Sets Post
        /// </summary>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public HoursAssignmentPost Post { get; set; }

        /// <summary>
        /// Gets or Sets Posting
        /// </summary>
        [DataMember(Name="posting", EmitDefaultValue=false)]
        public HoursAssignmentPosting Posting { get; set; }

        /// <summary>
        /// Gets or Sets Cancellation
        /// </summary>
        [DataMember(Name="cancellation", EmitDefaultValue=false)]
        public HoursAssignmentCancellation Cancellation { get; set; }

        /// <summary>
        /// Was the employee in charge?
        /// </summary>
        /// <value>Was the employee in charge?</value>
        [DataMember(Name="inCharge", EmitDefaultValue=false)]
        public bool InCharge { get; set; }

        /// <summary>
        /// Gets or Sets Shift
        /// </summary>
        [DataMember(Name="shift", EmitDefaultValue=false)]
        public HoursAssignmentShift Shift { get; set; }

        /// <summary>
        /// Gets or Sets Duty
        /// </summary>
        [DataMember(Name="duty", EmitDefaultValue=false)]
        public HoursAssignmentDuty Duty { get; set; }

        /// <summary>
        /// Gets or Sets Fulfillment
        /// </summary>
        [DataMember(Name="fulfillment", EmitDefaultValue=false)]
        public HoursAssignmentFulfillment Fulfillment { get; set; }

        /// <summary>
        /// Gets or Sets CostCentre
        /// </summary>
        [DataMember(Name="costCentre", EmitDefaultValue=false)]
        public HoursAssignmentCostCentre CostCentre { get; set; }

        /// <summary>
        /// Gets or Sets OwningUnit
        /// </summary>
        [DataMember(Name="owningUnit", EmitDefaultValue=false)]
        public HoursAssignmentOwningUnit OwningUnit { get; set; }

        /// <summary>
        /// Gets or Sets ResourcingUnit
        /// </summary>
        [DataMember(Name="resourcingUnit", EmitDefaultValue=false)]
        public HoursAssignmentOwningUnit ResourcingUnit { get; set; }

        /// <summary>
        /// Gets or Sets Requirement
        /// </summary>
        [DataMember(Name="requirement", EmitDefaultValue=false)]
        public HoursAssignmentRequirement Requirement { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public HoursAssignmentLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDutyReason
        /// </summary>
        [DataMember(Name="additionalDutyReason", EmitDefaultValue=false)]
        public string AdditionalDutyReason { get; set; }

        /// <summary>
        /// Gets or Sets DutyHasWarnings
        /// </summary>
        [DataMember(Name="dutyHasWarnings", EmitDefaultValue=false)]
        public bool DutyHasWarnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HoursAssignment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Actual: ").Append(Actual).Append("\n");
            sb.Append("  WorkTime: ").Append(WorkTime).Append("\n");
            sb.Append("  ContractedTime: ").Append(ContractedTime).Append("\n");
            sb.Append("  PayState: ").Append(PayState).Append("\n");
            sb.Append("  EmployeeType: ").Append(EmployeeType).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  Posting: ").Append(Posting).Append("\n");
            sb.Append("  Cancellation: ").Append(Cancellation).Append("\n");
            sb.Append("  InCharge: ").Append(InCharge).Append("\n");
            sb.Append("  Shift: ").Append(Shift).Append("\n");
            sb.Append("  Duty: ").Append(Duty).Append("\n");
            sb.Append("  Fulfillment: ").Append(Fulfillment).Append("\n");
            sb.Append("  CostCentre: ").Append(CostCentre).Append("\n");
            sb.Append("  OwningUnit: ").Append(OwningUnit).Append("\n");
            sb.Append("  ResourcingUnit: ").Append(ResourcingUnit).Append("\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AdditionalDutyReason: ").Append(AdditionalDutyReason).Append("\n");
            sb.Append("  DutyHasWarnings: ").Append(DutyHasWarnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoursAssignment);
        }

        /// <summary>
        /// Returns true if HoursAssignment instances are equal
        /// </summary>
        /// <param name="input">Instance of HoursAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoursAssignment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.When == input.When ||
                    (this.When != null &&
                    this.When.Equals(input.When))
                ) && 
                (
                    this.Actual == input.Actual ||
                    (this.Actual != null &&
                    this.Actual.Equals(input.Actual))
                ) && 
                (
                    this.WorkTime == input.WorkTime ||
                    this.WorkTime.Equals(input.WorkTime)
                ) && 
                (
                    this.ContractedTime == input.ContractedTime ||
                    this.ContractedTime.Equals(input.ContractedTime)
                ) && 
                (
                    this.PayState == input.PayState ||
                    this.PayState.Equals(input.PayState)
                ) && 
                (
                    this.EmployeeType == input.EmployeeType ||
                    (this.EmployeeType != null &&
                    this.EmployeeType.Equals(input.EmployeeType))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.Assignment == input.Assignment ||
                    (this.Assignment != null &&
                    this.Assignment.Equals(input.Assignment))
                ) && 
                (
                    this.Post == input.Post ||
                    (this.Post != null &&
                    this.Post.Equals(input.Post))
                ) && 
                (
                    this.Posting == input.Posting ||
                    (this.Posting != null &&
                    this.Posting.Equals(input.Posting))
                ) && 
                (
                    this.Cancellation == input.Cancellation ||
                    (this.Cancellation != null &&
                    this.Cancellation.Equals(input.Cancellation))
                ) && 
                (
                    this.InCharge == input.InCharge ||
                    this.InCharge.Equals(input.InCharge)
                ) && 
                (
                    this.Shift == input.Shift ||
                    (this.Shift != null &&
                    this.Shift.Equals(input.Shift))
                ) && 
                (
                    this.Duty == input.Duty ||
                    (this.Duty != null &&
                    this.Duty.Equals(input.Duty))
                ) && 
                (
                    this.Fulfillment == input.Fulfillment ||
                    (this.Fulfillment != null &&
                    this.Fulfillment.Equals(input.Fulfillment))
                ) && 
                (
                    this.CostCentre == input.CostCentre ||
                    (this.CostCentre != null &&
                    this.CostCentre.Equals(input.CostCentre))
                ) && 
                (
                    this.OwningUnit == input.OwningUnit ||
                    (this.OwningUnit != null &&
                    this.OwningUnit.Equals(input.OwningUnit))
                ) && 
                (
                    this.ResourcingUnit == input.ResourcingUnit ||
                    (this.ResourcingUnit != null &&
                    this.ResourcingUnit.Equals(input.ResourcingUnit))
                ) && 
                (
                    this.Requirement == input.Requirement ||
                    (this.Requirement != null &&
                    this.Requirement.Equals(input.Requirement))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.AdditionalDutyReason == input.AdditionalDutyReason ||
                    (this.AdditionalDutyReason != null &&
                    this.AdditionalDutyReason.Equals(input.AdditionalDutyReason))
                ) && 
                (
                    this.DutyHasWarnings == input.DutyHasWarnings ||
                    this.DutyHasWarnings.Equals(input.DutyHasWarnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.When != null)
                    hashCode = hashCode * 59 + this.When.GetHashCode();
                if (this.Actual != null)
                    hashCode = hashCode * 59 + this.Actual.GetHashCode();
                hashCode = hashCode * 59 + this.WorkTime.GetHashCode();
                hashCode = hashCode * 59 + this.ContractedTime.GetHashCode();
                hashCode = hashCode * 59 + this.PayState.GetHashCode();
                if (this.EmployeeType != null)
                    hashCode = hashCode * 59 + this.EmployeeType.GetHashCode();
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                if (this.Assignment != null)
                    hashCode = hashCode * 59 + this.Assignment.GetHashCode();
                if (this.Post != null)
                    hashCode = hashCode * 59 + this.Post.GetHashCode();
                if (this.Posting != null)
                    hashCode = hashCode * 59 + this.Posting.GetHashCode();
                if (this.Cancellation != null)
                    hashCode = hashCode * 59 + this.Cancellation.GetHashCode();
                hashCode = hashCode * 59 + this.InCharge.GetHashCode();
                if (this.Shift != null)
                    hashCode = hashCode * 59 + this.Shift.GetHashCode();
                if (this.Duty != null)
                    hashCode = hashCode * 59 + this.Duty.GetHashCode();
                if (this.Fulfillment != null)
                    hashCode = hashCode * 59 + this.Fulfillment.GetHashCode();
                if (this.CostCentre != null)
                    hashCode = hashCode * 59 + this.CostCentre.GetHashCode();
                if (this.OwningUnit != null)
                    hashCode = hashCode * 59 + this.OwningUnit.GetHashCode();
                if (this.ResourcingUnit != null)
                    hashCode = hashCode * 59 + this.ResourcingUnit.GetHashCode();
                if (this.Requirement != null)
                    hashCode = hashCode * 59 + this.Requirement.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.AdditionalDutyReason != null)
                    hashCode = hashCode * 59 + this.AdditionalDutyReason.GetHashCode();
                hashCode = hashCode * 59 + this.DutyHasWarnings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

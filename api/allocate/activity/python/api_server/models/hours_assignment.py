# coding: utf-8

"""
    Activity API

         ## API for querying worker activity.      This is an early availabilty API, and is subject to change.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class HoursAssignment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'when': 'date',
        'actual': 'DateSpan',
        'work_time': 'int',
        'contracted_time': 'int',
        'pay_state': 'str',
        'employee_type': 'HoursAssignmentEmployeeType',
        'person': 'HoursAssignmentPerson',
        'assignment': 'HoursAssignmentAssignment',
        'post': 'HoursAssignmentPost',
        'posting': 'HoursAssignmentPosting',
        'cancellation': 'HoursAssignmentCancellation',
        'in_charge': 'bool',
        'shift': 'HoursAssignmentShift',
        'duty': 'HoursAssignmentDuty',
        'fulfillment': 'HoursAssignmentFulfillment',
        'cost_centre': 'HoursAssignmentCostCentre',
        'owning_unit': 'HoursAssignmentOwningUnit',
        'resourcing_unit': 'HoursAssignmentOwningUnit',
        'requirement': 'HoursAssignmentRequirement',
        'location': 'HoursAssignmentLocation',
        'additional_duty_reason': 'str',
        'duty_has_warnings': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'when': 'when',
        'actual': 'actual',
        'work_time': 'workTime',
        'contracted_time': 'contractedTime',
        'pay_state': 'payState',
        'employee_type': 'employeeType',
        'person': 'person',
        'assignment': 'assignment',
        'post': 'post',
        'posting': 'posting',
        'cancellation': 'cancellation',
        'in_charge': 'inCharge',
        'shift': 'shift',
        'duty': 'duty',
        'fulfillment': 'fulfillment',
        'cost_centre': 'costCentre',
        'owning_unit': 'owningUnit',
        'resourcing_unit': 'resourcingUnit',
        'requirement': 'requirement',
        'location': 'location',
        'additional_duty_reason': 'additionalDutyReason',
        'duty_has_warnings': 'dutyHasWarnings'
    }

    def __init__(self, id=None, when=None, actual=None, work_time=None, contracted_time=None, pay_state=None, employee_type=None, person=None, assignment=None, post=None, posting=None, cancellation=None, in_charge=None, shift=None, duty=None, fulfillment=None, cost_centre=None, owning_unit=None, resourcing_unit=None, requirement=None, location=None, additional_duty_reason=None, duty_has_warnings=None, local_vars_configuration=None):  # noqa: E501
        """HoursAssignment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._when = None
        self._actual = None
        self._work_time = None
        self._contracted_time = None
        self._pay_state = None
        self._employee_type = None
        self._person = None
        self._assignment = None
        self._post = None
        self._posting = None
        self._cancellation = None
        self._in_charge = None
        self._shift = None
        self._duty = None
        self._fulfillment = None
        self._cost_centre = None
        self._owning_unit = None
        self._resourcing_unit = None
        self._requirement = None
        self._location = None
        self._additional_duty_reason = None
        self._duty_has_warnings = None
        self.discriminator = None

        self.id = id
        if when is not None:
            self.when = when
        if actual is not None:
            self.actual = actual
        if work_time is not None:
            self.work_time = work_time
        if contracted_time is not None:
            self.contracted_time = contracted_time
        if pay_state is not None:
            self.pay_state = pay_state
        if employee_type is not None:
            self.employee_type = employee_type
        if person is not None:
            self.person = person
        if assignment is not None:
            self.assignment = assignment
        if post is not None:
            self.post = post
        if posting is not None:
            self.posting = posting
        if cancellation is not None:
            self.cancellation = cancellation
        if in_charge is not None:
            self.in_charge = in_charge
        if shift is not None:
            self.shift = shift
        if duty is not None:
            self.duty = duty
        if fulfillment is not None:
            self.fulfillment = fulfillment
        if cost_centre is not None:
            self.cost_centre = cost_centre
        if owning_unit is not None:
            self.owning_unit = owning_unit
        if resourcing_unit is not None:
            self.resourcing_unit = resourcing_unit
        if requirement is not None:
            self.requirement = requirement
        if location is not None:
            self.location = location
        if additional_duty_reason is not None:
            self.additional_duty_reason = additional_duty_reason
        if duty_has_warnings is not None:
            self.duty_has_warnings = duty_has_warnings

    @property
    def id(self):
        """Gets the id of this HoursAssignment.  # noqa: E501

        Identifier for the hours assignment  # noqa: E501

        :return: The id of this HoursAssignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HoursAssignment.

        Identifier for the hours assignment  # noqa: E501

        :param id: The id of this HoursAssignment.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def when(self):
        """Gets the when of this HoursAssignment.  # noqa: E501

        Date assignment begins on  # noqa: E501

        :return: The when of this HoursAssignment.  # noqa: E501
        :rtype: date
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this HoursAssignment.

        Date assignment begins on  # noqa: E501

        :param when: The when of this HoursAssignment.  # noqa: E501
        :type: date
        """

        self._when = when

    @property
    def actual(self):
        """Gets the actual of this HoursAssignment.  # noqa: E501


        :return: The actual of this HoursAssignment.  # noqa: E501
        :rtype: DateSpan
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this HoursAssignment.


        :param actual: The actual of this HoursAssignment.  # noqa: E501
        :type: DateSpan
        """

        self._actual = actual

    @property
    def work_time(self):
        """Gets the work_time of this HoursAssignment.  # noqa: E501

        Number of minutes worked in assignment  # noqa: E501

        :return: The work_time of this HoursAssignment.  # noqa: E501
        :rtype: int
        """
        return self._work_time

    @work_time.setter
    def work_time(self, work_time):
        """Sets the work_time of this HoursAssignment.

        Number of minutes worked in assignment  # noqa: E501

        :param work_time: The work_time of this HoursAssignment.  # noqa: E501
        :type: int
        """

        self._work_time = work_time

    @property
    def contracted_time(self):
        """Gets the contracted_time of this HoursAssignment.  # noqa: E501

        Number of minutes that count towards the person’s contracted hours  # noqa: E501

        :return: The contracted_time of this HoursAssignment.  # noqa: E501
        :rtype: int
        """
        return self._contracted_time

    @contracted_time.setter
    def contracted_time(self, contracted_time):
        """Sets the contracted_time of this HoursAssignment.

        Number of minutes that count towards the person’s contracted hours  # noqa: E501

        :param contracted_time: The contracted_time of this HoursAssignment.  # noqa: E501
        :type: int
        """

        self._contracted_time = contracted_time

    @property
    def pay_state(self):
        """Gets the pay_state of this HoursAssignment.  # noqa: E501

        Details where the duty is in it’s lifecycle. *   Requested = (Requested Bank Duty) *   Accepted = (Roster Approved) *   Approved = (Finalised) *   Submitted = (PAID) *   Paid *   Unlocked = (Was once Finalised state.) *   Relocked = (Finalised given that it was once un-finalised for some reason)   # noqa: E501

        :return: The pay_state of this HoursAssignment.  # noqa: E501
        :rtype: str
        """
        return self._pay_state

    @pay_state.setter
    def pay_state(self, pay_state):
        """Sets the pay_state of this HoursAssignment.

        Details where the duty is in it’s lifecycle. *   Requested = (Requested Bank Duty) *   Accepted = (Roster Approved) *   Approved = (Finalised) *   Submitted = (PAID) *   Paid *   Unlocked = (Was once Finalised state.) *   Relocked = (Finalised given that it was once un-finalised for some reason)   # noqa: E501

        :param pay_state: The pay_state of this HoursAssignment.  # noqa: E501
        :type: str
        """
        allowed_values = ["requested", "accepted", "approved", "submitted", "paid", "unlocked", "relocked"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and pay_state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `pay_state` ({0}), must be one of {1}"  # noqa: E501
                .format(pay_state, allowed_values)
            )

        self._pay_state = pay_state

    @property
    def employee_type(self):
        """Gets the employee_type of this HoursAssignment.  # noqa: E501


        :return: The employee_type of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentEmployeeType
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type):
        """Sets the employee_type of this HoursAssignment.


        :param employee_type: The employee_type of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentEmployeeType
        """

        self._employee_type = employee_type

    @property
    def person(self):
        """Gets the person of this HoursAssignment.  # noqa: E501


        :return: The person of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this HoursAssignment.


        :param person: The person of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentPerson
        """

        self._person = person

    @property
    def assignment(self):
        """Gets the assignment of this HoursAssignment.  # noqa: E501


        :return: The assignment of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentAssignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this HoursAssignment.


        :param assignment: The assignment of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentAssignment
        """

        self._assignment = assignment

    @property
    def post(self):
        """Gets the post of this HoursAssignment.  # noqa: E501


        :return: The post of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentPost
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this HoursAssignment.


        :param post: The post of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentPost
        """

        self._post = post

    @property
    def posting(self):
        """Gets the posting of this HoursAssignment.  # noqa: E501


        :return: The posting of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentPosting
        """
        return self._posting

    @posting.setter
    def posting(self, posting):
        """Sets the posting of this HoursAssignment.


        :param posting: The posting of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentPosting
        """

        self._posting = posting

    @property
    def cancellation(self):
        """Gets the cancellation of this HoursAssignment.  # noqa: E501


        :return: The cancellation of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this HoursAssignment.


        :param cancellation: The cancellation of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentCancellation
        """

        self._cancellation = cancellation

    @property
    def in_charge(self):
        """Gets the in_charge of this HoursAssignment.  # noqa: E501

        Was the employee in charge?  # noqa: E501

        :return: The in_charge of this HoursAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._in_charge

    @in_charge.setter
    def in_charge(self, in_charge):
        """Sets the in_charge of this HoursAssignment.

        Was the employee in charge?  # noqa: E501

        :param in_charge: The in_charge of this HoursAssignment.  # noqa: E501
        :type: bool
        """

        self._in_charge = in_charge

    @property
    def shift(self):
        """Gets the shift of this HoursAssignment.  # noqa: E501


        :return: The shift of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentShift
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this HoursAssignment.


        :param shift: The shift of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentShift
        """

        self._shift = shift

    @property
    def duty(self):
        """Gets the duty of this HoursAssignment.  # noqa: E501


        :return: The duty of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentDuty
        """
        return self._duty

    @duty.setter
    def duty(self, duty):
        """Sets the duty of this HoursAssignment.


        :param duty: The duty of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentDuty
        """

        self._duty = duty

    @property
    def fulfillment(self):
        """Gets the fulfillment of this HoursAssignment.  # noqa: E501


        :return: The fulfillment of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentFulfillment
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this HoursAssignment.


        :param fulfillment: The fulfillment of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentFulfillment
        """

        self._fulfillment = fulfillment

    @property
    def cost_centre(self):
        """Gets the cost_centre of this HoursAssignment.  # noqa: E501


        :return: The cost_centre of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentCostCentre
        """
        return self._cost_centre

    @cost_centre.setter
    def cost_centre(self, cost_centre):
        """Sets the cost_centre of this HoursAssignment.


        :param cost_centre: The cost_centre of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentCostCentre
        """

        self._cost_centre = cost_centre

    @property
    def owning_unit(self):
        """Gets the owning_unit of this HoursAssignment.  # noqa: E501


        :return: The owning_unit of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentOwningUnit
        """
        return self._owning_unit

    @owning_unit.setter
    def owning_unit(self, owning_unit):
        """Sets the owning_unit of this HoursAssignment.


        :param owning_unit: The owning_unit of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentOwningUnit
        """

        self._owning_unit = owning_unit

    @property
    def resourcing_unit(self):
        """Gets the resourcing_unit of this HoursAssignment.  # noqa: E501


        :return: The resourcing_unit of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentOwningUnit
        """
        return self._resourcing_unit

    @resourcing_unit.setter
    def resourcing_unit(self, resourcing_unit):
        """Sets the resourcing_unit of this HoursAssignment.


        :param resourcing_unit: The resourcing_unit of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentOwningUnit
        """

        self._resourcing_unit = resourcing_unit

    @property
    def requirement(self):
        """Gets the requirement of this HoursAssignment.  # noqa: E501


        :return: The requirement of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentRequirement
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement):
        """Sets the requirement of this HoursAssignment.


        :param requirement: The requirement of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentRequirement
        """

        self._requirement = requirement

    @property
    def location(self):
        """Gets the location of this HoursAssignment.  # noqa: E501


        :return: The location of this HoursAssignment.  # noqa: E501
        :rtype: HoursAssignmentLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HoursAssignment.


        :param location: The location of this HoursAssignment.  # noqa: E501
        :type: HoursAssignmentLocation
        """

        self._location = location

    @property
    def additional_duty_reason(self):
        """Gets the additional_duty_reason of this HoursAssignment.  # noqa: E501


        :return: The additional_duty_reason of this HoursAssignment.  # noqa: E501
        :rtype: str
        """
        return self._additional_duty_reason

    @additional_duty_reason.setter
    def additional_duty_reason(self, additional_duty_reason):
        """Sets the additional_duty_reason of this HoursAssignment.


        :param additional_duty_reason: The additional_duty_reason of this HoursAssignment.  # noqa: E501
        :type: str
        """

        self._additional_duty_reason = additional_duty_reason

    @property
    def duty_has_warnings(self):
        """Gets the duty_has_warnings of this HoursAssignment.  # noqa: E501


        :return: The duty_has_warnings of this HoursAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._duty_has_warnings

    @duty_has_warnings.setter
    def duty_has_warnings(self, duty_has_warnings):
        """Sets the duty_has_warnings of this HoursAssignment.


        :param duty_has_warnings: The duty_has_warnings of this HoursAssignment.  # noqa: E501
        :type: bool
        """

        self._duty_has_warnings = duty_has_warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoursAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HoursAssignment):
            return True

        return self.to_dict() != other.to_dict()

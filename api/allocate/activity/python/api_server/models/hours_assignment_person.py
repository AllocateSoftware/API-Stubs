# coding: utf-8

"""
    Activity API

         ## API for querying worker activity.      This is an early availabilty API, and is subject to change.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class HoursAssignmentPerson(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'staff_number': 'str',
        'forenames': 'str',
        'surname': 'str',
        'mobile_number': 'str',
        'grade': 'Grade',
        'grade_type': 'GradeType',
        'grade_type_category': 'GradeTypeCategory',
        'wte': 'float'
    }

    attribute_map = {
        'staff_number': 'staffNumber',
        'forenames': 'forenames',
        'surname': 'surname',
        'mobile_number': 'mobileNumber',
        'grade': 'grade',
        'grade_type': 'gradeType',
        'grade_type_category': 'gradeTypeCategory',
        'wte': 'WTE'
    }

    def __init__(self, staff_number=None, forenames=None, surname=None, mobile_number=None, grade=None, grade_type=None, grade_type_category=None, wte=None, local_vars_configuration=None):  # noqa: E501
        """HoursAssignmentPerson - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._staff_number = None
        self._forenames = None
        self._surname = None
        self._mobile_number = None
        self._grade = None
        self._grade_type = None
        self._grade_type_category = None
        self._wte = None
        self.discriminator = None

        if staff_number is not None:
            self.staff_number = staff_number
        if forenames is not None:
            self.forenames = forenames
        if surname is not None:
            self.surname = surname
        if mobile_number is not None:
            self.mobile_number = mobile_number
        if grade is not None:
            self.grade = grade
        if grade_type is not None:
            self.grade_type = grade_type
        if grade_type_category is not None:
            self.grade_type_category = grade_type_category
        if wte is not None:
            self.wte = wte

    @property
    def staff_number(self):
        """Gets the staff_number of this HoursAssignmentPerson.  # noqa: E501


        :return: The staff_number of this HoursAssignmentPerson.  # noqa: E501
        :rtype: str
        """
        return self._staff_number

    @staff_number.setter
    def staff_number(self, staff_number):
        """Sets the staff_number of this HoursAssignmentPerson.


        :param staff_number: The staff_number of this HoursAssignmentPerson.  # noqa: E501
        :type: str
        """

        self._staff_number = staff_number

    @property
    def forenames(self):
        """Gets the forenames of this HoursAssignmentPerson.  # noqa: E501

        List of forenames for the person  # noqa: E501

        :return: The forenames of this HoursAssignmentPerson.  # noqa: E501
        :rtype: str
        """
        return self._forenames

    @forenames.setter
    def forenames(self, forenames):
        """Sets the forenames of this HoursAssignmentPerson.

        List of forenames for the person  # noqa: E501

        :param forenames: The forenames of this HoursAssignmentPerson.  # noqa: E501
        :type: str
        """

        self._forenames = forenames

    @property
    def surname(self):
        """Gets the surname of this HoursAssignmentPerson.  # noqa: E501

        Surname for the person  # noqa: E501

        :return: The surname of this HoursAssignmentPerson.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this HoursAssignmentPerson.

        Surname for the person  # noqa: E501

        :param surname: The surname of this HoursAssignmentPerson.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def mobile_number(self):
        """Gets the mobile_number of this HoursAssignmentPerson.  # noqa: E501


        :return: The mobile_number of this HoursAssignmentPerson.  # noqa: E501
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this HoursAssignmentPerson.


        :param mobile_number: The mobile_number of this HoursAssignmentPerson.  # noqa: E501
        :type: str
        """

        self._mobile_number = mobile_number

    @property
    def grade(self):
        """Gets the grade of this HoursAssignmentPerson.  # noqa: E501


        :return: The grade of this HoursAssignmentPerson.  # noqa: E501
        :rtype: Grade
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this HoursAssignmentPerson.


        :param grade: The grade of this HoursAssignmentPerson.  # noqa: E501
        :type: Grade
        """

        self._grade = grade

    @property
    def grade_type(self):
        """Gets the grade_type of this HoursAssignmentPerson.  # noqa: E501


        :return: The grade_type of this HoursAssignmentPerson.  # noqa: E501
        :rtype: GradeType
        """
        return self._grade_type

    @grade_type.setter
    def grade_type(self, grade_type):
        """Sets the grade_type of this HoursAssignmentPerson.


        :param grade_type: The grade_type of this HoursAssignmentPerson.  # noqa: E501
        :type: GradeType
        """

        self._grade_type = grade_type

    @property
    def grade_type_category(self):
        """Gets the grade_type_category of this HoursAssignmentPerson.  # noqa: E501


        :return: The grade_type_category of this HoursAssignmentPerson.  # noqa: E501
        :rtype: GradeTypeCategory
        """
        return self._grade_type_category

    @grade_type_category.setter
    def grade_type_category(self, grade_type_category):
        """Sets the grade_type_category of this HoursAssignmentPerson.


        :param grade_type_category: The grade_type_category of this HoursAssignmentPerson.  # noqa: E501
        :type: GradeTypeCategory
        """

        self._grade_type_category = grade_type_category

    @property
    def wte(self):
        """Gets the wte of this HoursAssignmentPerson.  # noqa: E501

        Whole time Equivalent – this is the person’s contracted hours divided by the person’s default grade type value for WTE (if the grade type has no value then use grade type category if neither have a value use system default setting). e.g. 37.5 / (2250/60) = 1.00 NOTE if the grade type default wte is not set this will not be returned   # noqa: E501

        :return: The wte of this HoursAssignmentPerson.  # noqa: E501
        :rtype: float
        """
        return self._wte

    @wte.setter
    def wte(self, wte):
        """Sets the wte of this HoursAssignmentPerson.

        Whole time Equivalent – this is the person’s contracted hours divided by the person’s default grade type value for WTE (if the grade type has no value then use grade type category if neither have a value use system default setting). e.g. 37.5 / (2250/60) = 1.00 NOTE if the grade type default wte is not set this will not be returned   # noqa: E501

        :param wte: The wte of this HoursAssignmentPerson.  # noqa: E501
        :type: float
        """

        self._wte = wte

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoursAssignmentPerson):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HoursAssignmentPerson):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Activity API

         ## API for querying worker activity.      This is an early availabilty API, and is subject to change.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class HoursAssignmentOwningUnit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'short_name': 'str',
        'long_name': 'str',
        'external_reference': 'str'
    }

    attribute_map = {
        'code': 'code',
        'short_name': 'shortName',
        'long_name': 'longName',
        'external_reference': 'externalReference'
    }

    def __init__(self, code=None, short_name=None, long_name=None, external_reference=None, local_vars_configuration=None):  # noqa: E501
        """HoursAssignmentOwningUnit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._short_name = None
        self._long_name = None
        self._external_reference = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if short_name is not None:
            self.short_name = short_name
        if long_name is not None:
            self.long_name = long_name
        if external_reference is not None:
            self.external_reference = external_reference

    @property
    def code(self):
        """Gets the code of this HoursAssignmentOwningUnit.  # noqa: E501


        :return: The code of this HoursAssignmentOwningUnit.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this HoursAssignmentOwningUnit.


        :param code: The code of this HoursAssignmentOwningUnit.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def short_name(self):
        """Gets the short_name of this HoursAssignmentOwningUnit.  # noqa: E501


        :return: The short_name of this HoursAssignmentOwningUnit.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this HoursAssignmentOwningUnit.


        :param short_name: The short_name of this HoursAssignmentOwningUnit.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def long_name(self):
        """Gets the long_name of this HoursAssignmentOwningUnit.  # noqa: E501


        :return: The long_name of this HoursAssignmentOwningUnit.  # noqa: E501
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this HoursAssignmentOwningUnit.


        :param long_name: The long_name of this HoursAssignmentOwningUnit.  # noqa: E501
        :type: str
        """

        self._long_name = long_name

    @property
    def external_reference(self):
        """Gets the external_reference of this HoursAssignmentOwningUnit.  # noqa: E501


        :return: The external_reference of this HoursAssignmentOwningUnit.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this HoursAssignmentOwningUnit.


        :param external_reference: The external_reference of this HoursAssignmentOwningUnit.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoursAssignmentOwningUnit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HoursAssignmentOwningUnit):
            return True

        return self.to_dict() != other.to_dict()

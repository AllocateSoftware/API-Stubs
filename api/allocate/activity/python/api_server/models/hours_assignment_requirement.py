# coding: utf-8

"""
    Activity API

         ## API for querying worker activity.      This is an early availabilty API, and is subject to change.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class HoursAssignmentRequirement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'grade': 'Grade',
        'grade_type': 'GradeType',
        'grade_type_category': 'GradeTypeCategory'
    }

    attribute_map = {
        'grade': 'grade',
        'grade_type': 'gradeType',
        'grade_type_category': 'gradeTypeCategory'
    }

    def __init__(self, grade=None, grade_type=None, grade_type_category=None, local_vars_configuration=None):  # noqa: E501
        """HoursAssignmentRequirement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._grade = None
        self._grade_type = None
        self._grade_type_category = None
        self.discriminator = None

        if grade is not None:
            self.grade = grade
        if grade_type is not None:
            self.grade_type = grade_type
        if grade_type_category is not None:
            self.grade_type_category = grade_type_category

    @property
    def grade(self):
        """Gets the grade of this HoursAssignmentRequirement.  # noqa: E501


        :return: The grade of this HoursAssignmentRequirement.  # noqa: E501
        :rtype: Grade
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this HoursAssignmentRequirement.


        :param grade: The grade of this HoursAssignmentRequirement.  # noqa: E501
        :type: Grade
        """

        self._grade = grade

    @property
    def grade_type(self):
        """Gets the grade_type of this HoursAssignmentRequirement.  # noqa: E501


        :return: The grade_type of this HoursAssignmentRequirement.  # noqa: E501
        :rtype: GradeType
        """
        return self._grade_type

    @grade_type.setter
    def grade_type(self, grade_type):
        """Sets the grade_type of this HoursAssignmentRequirement.


        :param grade_type: The grade_type of this HoursAssignmentRequirement.  # noqa: E501
        :type: GradeType
        """

        self._grade_type = grade_type

    @property
    def grade_type_category(self):
        """Gets the grade_type_category of this HoursAssignmentRequirement.  # noqa: E501


        :return: The grade_type_category of this HoursAssignmentRequirement.  # noqa: E501
        :rtype: GradeTypeCategory
        """
        return self._grade_type_category

    @grade_type_category.setter
    def grade_type_category(self, grade_type_category):
        """Sets the grade_type_category of this HoursAssignmentRequirement.


        :param grade_type_category: The grade_type_category of this HoursAssignmentRequirement.  # noqa: E501
        :type: GradeTypeCategory
        """

        self._grade_type_category = grade_type_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoursAssignmentRequirement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HoursAssignmentRequirement):
            return True

        return self.to_dict() != other.to_dict()

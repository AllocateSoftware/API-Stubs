# coding: utf-8

"""
    Activity API

         ## API for querying worker activity.      This is an early availabilty API, and is subject to change.   # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class TimeSpan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_from': 'str',
        'to': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, _from=None, to=None, local_vars_configuration=None):  # noqa: E501
        """TimeSpan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__from = None
        self._to = None
        self.discriminator = None

        self._from = _from
        if to is not None:
            self.to = to

    @property
    def _from(self):
        """Gets the _from of this TimeSpan.  # noqa: E501

        Time from, 24hr format  # noqa: E501

        :return: The _from of this TimeSpan.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this TimeSpan.

        Time from, 24hr format  # noqa: E501

        :param _from: The _from of this TimeSpan.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and _from is None:  # noqa: E501
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                _from is not None and not re.search(r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$', _from)):  # noqa: E501
            raise ValueError(r"Invalid value for `_from`, must be a follow pattern or equal to `/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this TimeSpan.  # noqa: E501

        Time from, 24hr format  # noqa: E501

        :return: The to of this TimeSpan.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this TimeSpan.

        Time from, 24hr format  # noqa: E501

        :param to: The to of this TimeSpan.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                to is not None and not re.search(r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$', to)):  # noqa: E501
            raise ValueError(r"Invalid value for `to`, must be a follow pattern or equal to `/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/`")  # noqa: E501

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSpan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeSpan):
            return True

        return self.to_dict() != other.to_dict()

/*
 * Activity API
 *      ## API for querying worker activity.      This is an early availabilty API, and is subject to change. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@allocatesoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.ErrorResponse;
import com.allocate.openapi.model.HoursAssignment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getActivities
     * @param customerCode The code for the customer (trust) for which the activities should be returned (required)
     * @param format Format for the output. TBD, but may be used to control the scope of information returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The worker has been registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivitiesCall(String customerCode, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerCode", customerCode));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivitiesValidateBeforeCall(String customerCode, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerCode' is set
        if (customerCode == null) {
            throw new ApiException("Missing the required parameter 'customerCode' when calling getActivities(Async)");
        }
        

        okhttp3.Call localVarCall = getActivitiesCall(customerCode, format, _callback);
        return localVarCall;

    }

    /**
     * 
     * Provide hours and assignment details for workers
     * @param customerCode The code for the customer (trust) for which the activities should be returned (required)
     * @param format Format for the output. TBD, but may be used to control the scope of information returned. (optional)
     * @return List&lt;HoursAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The worker has been registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
     </table>
     */
    public List<HoursAssignment> getActivities(String customerCode, String format) throws ApiException {
        ApiResponse<List<HoursAssignment>> localVarResp = getActivitiesWithHttpInfo(customerCode, format);
        return localVarResp.getData();
    }

    /**
     * 
     * Provide hours and assignment details for workers
     * @param customerCode The code for the customer (trust) for which the activities should be returned (required)
     * @param format Format for the output. TBD, but may be used to control the scope of information returned. (optional)
     * @return ApiResponse&lt;List&lt;HoursAssignment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The worker has been registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HoursAssignment>> getActivitiesWithHttpInfo(String customerCode, String format) throws ApiException {
        okhttp3.Call localVarCall = getActivitiesValidateBeforeCall(customerCode, format, null);
        Type localVarReturnType = new TypeToken<List<HoursAssignment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provide hours and assignment details for workers
     * @param customerCode The code for the customer (trust) for which the activities should be returned (required)
     * @param format Format for the output. TBD, but may be used to control the scope of information returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The worker has been registered successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivitiesAsync(String customerCode, String format, final ApiCallback<List<HoursAssignment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivitiesValidateBeforeCall(customerCode, format, _callback);
        Type localVarReturnType = new TypeToken<List<HoursAssignment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

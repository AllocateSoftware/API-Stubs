/**
 * Activity API
 *      ## API for querying worker activity.      This is an early availabilty API, and is subject to change. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@allocatesoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HoursAssignmentLocation } from './hoursAssignmentLocation';
import { HoursAssignmentFulfillment } from './hoursAssignmentFulfillment';
import { HoursAssignmentEmployeeType } from './hoursAssignmentEmployeeType';
import { HoursAssignmentCancellation } from './hoursAssignmentCancellation';
import { DateSpan } from './dateSpan';
import { HoursAssignmentRequirement } from './hoursAssignmentRequirement';
import { HoursAssignmentCostCentre } from './hoursAssignmentCostCentre';
import { HoursAssignmentDuty } from './hoursAssignmentDuty';
import { HoursAssignmentPosting } from './hoursAssignmentPosting';
import { HoursAssignmentAssignment } from './hoursAssignmentAssignment';
import { HoursAssignmentOwningUnit } from './hoursAssignmentOwningUnit';
import { HoursAssignmentShift } from './hoursAssignmentShift';
import { HoursAssignmentPost } from './hoursAssignmentPost';
import { HoursAssignmentPerson } from './hoursAssignmentPerson';


export interface HoursAssignment { 
    /**
     * Identifier for the hours assignment
     */
    id: number;
    /**
     * Date assignment begins on
     */
    when?: string;
    actual?: DateSpan;
    /**
     * Number of minutes worked in assignment
     */
    workTime?: number;
    /**
     * Number of minutes that count towards the person’s contracted hours
     */
    contractedTime?: number;
    /**
     * Details where the duty is in it’s lifecycle. *   Requested = (Requested Bank Duty) *   Accepted = (Roster Approved) *   Approved = (Finalised) *   Submitted = (PAID) *   Paid *   Unlocked = (Was once Finalised state.) *   Relocked = (Finalised given that it was once un-finalised for some reason) 
     */
    payState?: HoursAssignment.PayStateEnum;
    employeeType?: HoursAssignmentEmployeeType;
    person?: HoursAssignmentPerson;
    assignment?: HoursAssignmentAssignment;
    post?: HoursAssignmentPost;
    posting?: HoursAssignmentPosting;
    cancellation?: HoursAssignmentCancellation;
    /**
     * Was the employee in charge?
     */
    inCharge?: boolean;
    shift?: HoursAssignmentShift;
    duty?: HoursAssignmentDuty;
    fulfillment?: HoursAssignmentFulfillment;
    costCentre?: HoursAssignmentCostCentre;
    owningUnit?: HoursAssignmentOwningUnit;
    resourcingUnit?: HoursAssignmentOwningUnit;
    requirement?: HoursAssignmentRequirement;
    location?: HoursAssignmentLocation;
    additionalDutyReason?: string;
    dutyHasWarnings?: boolean;
}
export namespace HoursAssignment {
    export type PayStateEnum = 'requested' | 'accepted' | 'approved' | 'submitted' | 'paid' | 'unlocked' | 'relocked';
    export const PayStateEnum = {
        Requested: 'requested' as PayStateEnum,
        Accepted: 'accepted' as PayStateEnum,
        Approved: 'approved' as PayStateEnum,
        Submitted: 'submitted' as PayStateEnum,
        Paid: 'paid' as PayStateEnum,
        Unlocked: 'unlocked' as PayStateEnum,
        Relocked: 'relocked' as PayStateEnum
    };
}



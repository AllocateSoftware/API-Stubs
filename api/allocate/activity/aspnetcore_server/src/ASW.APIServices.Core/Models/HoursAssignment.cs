/*
 * Activity API
 *
 *      ## API for querying worker activity.      This is an early availabilty API, and is subject to change. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HoursAssignment : IEquatable<HoursAssignment>
    { 
        /// <summary>
        /// Identifier for the hours assignment
        /// </summary>
        /// <value>Identifier for the hours assignment</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Date assignment begins on
        /// </summary>
        /// <value>Date assignment begins on</value>
        [DataMember(Name="when", EmitDefaultValue=false)]
        public DateTime When { get; set; }

        /// <summary>
        /// Gets or Sets Actual
        /// </summary>
        [DataMember(Name="actual", EmitDefaultValue=false)]
        public DateSpan Actual { get; set; }

        /// <summary>
        /// Number of minutes worked in assignment
        /// </summary>
        /// <value>Number of minutes worked in assignment</value>
        [DataMember(Name="workTime", EmitDefaultValue=false)]
        public int WorkTime { get; set; }

        /// <summary>
        /// Number of minutes that count towards the person’s contracted hours
        /// </summary>
        /// <value>Number of minutes that count towards the person’s contracted hours</value>
        [DataMember(Name="contractedTime", EmitDefaultValue=false)]
        public int ContractedTime { get; set; }

        /// <summary>
        /// Details where the duty is in it’s lifecycle. *   Requested = (Requested Bank Duty) *   Accepted = (Roster Approved) *   Approved = (Finalised) *   Submitted = (PAID) *   Paid *   Unlocked = (Was once Finalised state.) *   Relocked = (Finalised given that it was once un-finalised for some reason) 
        /// </summary>
        /// <value>Details where the duty is in it’s lifecycle. *   Requested = (Requested Bank Duty) *   Accepted = (Roster Approved) *   Approved = (Finalised) *   Submitted = (PAID) *   Paid *   Unlocked = (Was once Finalised state.) *   Relocked = (Finalised given that it was once un-finalised for some reason) </value>
        [TypeConverter(typeof(CustomEnumConverter<PayStateEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PayStateEnum
        {
            
            /// <summary>
            /// Enum RequestedEnum for requested
            /// </summary>
            [EnumMember(Value = "requested")]
            RequestedEnum = 1,
            
            /// <summary>
            /// Enum AcceptedEnum for accepted
            /// </summary>
            [EnumMember(Value = "accepted")]
            AcceptedEnum = 2,
            
            /// <summary>
            /// Enum ApprovedEnum for approved
            /// </summary>
            [EnumMember(Value = "approved")]
            ApprovedEnum = 3,
            
            /// <summary>
            /// Enum SubmittedEnum for submitted
            /// </summary>
            [EnumMember(Value = "submitted")]
            SubmittedEnum = 4,
            
            /// <summary>
            /// Enum PaidEnum for paid
            /// </summary>
            [EnumMember(Value = "paid")]
            PaidEnum = 5,
            
            /// <summary>
            /// Enum UnlockedEnum for unlocked
            /// </summary>
            [EnumMember(Value = "unlocked")]
            UnlockedEnum = 6,
            
            /// <summary>
            /// Enum RelockedEnum for relocked
            /// </summary>
            [EnumMember(Value = "relocked")]
            RelockedEnum = 7
        }

        /// <summary>
        /// Details where the duty is in it’s lifecycle. *   Requested &#x3D; (Requested Bank Duty) *   Accepted &#x3D; (Roster Approved) *   Approved &#x3D; (Finalised) *   Submitted &#x3D; (PAID) *   Paid *   Unlocked &#x3D; (Was once Finalised state.) *   Relocked &#x3D; (Finalised given that it was once un-finalised for some reason) 
        /// </summary>
        /// <value>Details where the duty is in it’s lifecycle. *   Requested &#x3D; (Requested Bank Duty) *   Accepted &#x3D; (Roster Approved) *   Approved &#x3D; (Finalised) *   Submitted &#x3D; (PAID) *   Paid *   Unlocked &#x3D; (Was once Finalised state.) *   Relocked &#x3D; (Finalised given that it was once un-finalised for some reason) </value>
        [DataMember(Name="payState", EmitDefaultValue=false)]
        public PayStateEnum PayState { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeType
        /// </summary>
        [DataMember(Name="employeeType", EmitDefaultValue=false)]
        public HoursAssignmentEmployeeType EmployeeType { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public HoursAssignmentPerson Person { get; set; }

        /// <summary>
        /// Gets or Sets Assignment
        /// </summary>
        [DataMember(Name="assignment", EmitDefaultValue=false)]
        public HoursAssignmentAssignment Assignment { get; set; }

        /// <summary>
        /// Gets or Sets Post
        /// </summary>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public HoursAssignmentPost Post { get; set; }

        /// <summary>
        /// Gets or Sets Posting
        /// </summary>
        [DataMember(Name="posting", EmitDefaultValue=false)]
        public HoursAssignmentPosting Posting { get; set; }

        /// <summary>
        /// Gets or Sets Cancellation
        /// </summary>
        [DataMember(Name="cancellation", EmitDefaultValue=false)]
        public HoursAssignmentCancellation Cancellation { get; set; }

        /// <summary>
        /// Was the employee in charge?
        /// </summary>
        /// <value>Was the employee in charge?</value>
        [DataMember(Name="inCharge", EmitDefaultValue=false)]
        public bool InCharge { get; set; }

        /// <summary>
        /// Gets or Sets Shift
        /// </summary>
        [DataMember(Name="shift", EmitDefaultValue=false)]
        public HoursAssignmentShift Shift { get; set; }

        /// <summary>
        /// Gets or Sets Duty
        /// </summary>
        [DataMember(Name="duty", EmitDefaultValue=false)]
        public HoursAssignmentDuty Duty { get; set; }

        /// <summary>
        /// Gets or Sets Fulfillment
        /// </summary>
        [DataMember(Name="fulfillment", EmitDefaultValue=false)]
        public HoursAssignmentFulfillment Fulfillment { get; set; }

        /// <summary>
        /// Gets or Sets CostCentre
        /// </summary>
        [DataMember(Name="costCentre", EmitDefaultValue=false)]
        public HoursAssignmentCostCentre CostCentre { get; set; }

        /// <summary>
        /// Gets or Sets OwningUnit
        /// </summary>
        [DataMember(Name="owningUnit", EmitDefaultValue=false)]
        public HoursAssignmentOwningUnit OwningUnit { get; set; }

        /// <summary>
        /// Gets or Sets ResourcingUnit
        /// </summary>
        [DataMember(Name="resourcingUnit", EmitDefaultValue=false)]
        public HoursAssignmentOwningUnit ResourcingUnit { get; set; }

        /// <summary>
        /// Gets or Sets Requirement
        /// </summary>
        [DataMember(Name="requirement", EmitDefaultValue=false)]
        public HoursAssignmentRequirement Requirement { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public HoursAssignmentLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalDutyReason
        /// </summary>
        [DataMember(Name="additionalDutyReason", EmitDefaultValue=false)]
        public string AdditionalDutyReason { get; set; }

        /// <summary>
        /// Gets or Sets DutyHasWarnings
        /// </summary>
        [DataMember(Name="dutyHasWarnings", EmitDefaultValue=false)]
        public bool DutyHasWarnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HoursAssignment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Actual: ").Append(Actual).Append("\n");
            sb.Append("  WorkTime: ").Append(WorkTime).Append("\n");
            sb.Append("  ContractedTime: ").Append(ContractedTime).Append("\n");
            sb.Append("  PayState: ").Append(PayState).Append("\n");
            sb.Append("  EmployeeType: ").Append(EmployeeType).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  Posting: ").Append(Posting).Append("\n");
            sb.Append("  Cancellation: ").Append(Cancellation).Append("\n");
            sb.Append("  InCharge: ").Append(InCharge).Append("\n");
            sb.Append("  Shift: ").Append(Shift).Append("\n");
            sb.Append("  Duty: ").Append(Duty).Append("\n");
            sb.Append("  Fulfillment: ").Append(Fulfillment).Append("\n");
            sb.Append("  CostCentre: ").Append(CostCentre).Append("\n");
            sb.Append("  OwningUnit: ").Append(OwningUnit).Append("\n");
            sb.Append("  ResourcingUnit: ").Append(ResourcingUnit).Append("\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AdditionalDutyReason: ").Append(AdditionalDutyReason).Append("\n");
            sb.Append("  DutyHasWarnings: ").Append(DutyHasWarnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HoursAssignment)obj);
        }

        /// <summary>
        /// Returns true if HoursAssignment instances are equal
        /// </summary>
        /// <param name="other">Instance of HoursAssignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoursAssignment other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    When == other.When ||
                    When != null &&
                    When.Equals(other.When)
                ) && 
                (
                    Actual == other.Actual ||
                    Actual != null &&
                    Actual.Equals(other.Actual)
                ) && 
                (
                    WorkTime == other.WorkTime ||
                    
                    WorkTime.Equals(other.WorkTime)
                ) && 
                (
                    ContractedTime == other.ContractedTime ||
                    
                    ContractedTime.Equals(other.ContractedTime)
                ) && 
                (
                    PayState == other.PayState ||
                    
                    PayState.Equals(other.PayState)
                ) && 
                (
                    EmployeeType == other.EmployeeType ||
                    EmployeeType != null &&
                    EmployeeType.Equals(other.EmployeeType)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.Equals(other.Person)
                ) && 
                (
                    Assignment == other.Assignment ||
                    Assignment != null &&
                    Assignment.Equals(other.Assignment)
                ) && 
                (
                    Post == other.Post ||
                    Post != null &&
                    Post.Equals(other.Post)
                ) && 
                (
                    Posting == other.Posting ||
                    Posting != null &&
                    Posting.Equals(other.Posting)
                ) && 
                (
                    Cancellation == other.Cancellation ||
                    Cancellation != null &&
                    Cancellation.Equals(other.Cancellation)
                ) && 
                (
                    InCharge == other.InCharge ||
                    
                    InCharge.Equals(other.InCharge)
                ) && 
                (
                    Shift == other.Shift ||
                    Shift != null &&
                    Shift.Equals(other.Shift)
                ) && 
                (
                    Duty == other.Duty ||
                    Duty != null &&
                    Duty.Equals(other.Duty)
                ) && 
                (
                    Fulfillment == other.Fulfillment ||
                    Fulfillment != null &&
                    Fulfillment.Equals(other.Fulfillment)
                ) && 
                (
                    CostCentre == other.CostCentre ||
                    CostCentre != null &&
                    CostCentre.Equals(other.CostCentre)
                ) && 
                (
                    OwningUnit == other.OwningUnit ||
                    OwningUnit != null &&
                    OwningUnit.Equals(other.OwningUnit)
                ) && 
                (
                    ResourcingUnit == other.ResourcingUnit ||
                    ResourcingUnit != null &&
                    ResourcingUnit.Equals(other.ResourcingUnit)
                ) && 
                (
                    Requirement == other.Requirement ||
                    Requirement != null &&
                    Requirement.Equals(other.Requirement)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    AdditionalDutyReason == other.AdditionalDutyReason ||
                    AdditionalDutyReason != null &&
                    AdditionalDutyReason.Equals(other.AdditionalDutyReason)
                ) && 
                (
                    DutyHasWarnings == other.DutyHasWarnings ||
                    
                    DutyHasWarnings.Equals(other.DutyHasWarnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (When != null)
                    hashCode = hashCode * 59 + When.GetHashCode();
                    if (Actual != null)
                    hashCode = hashCode * 59 + Actual.GetHashCode();
                    
                    hashCode = hashCode * 59 + WorkTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContractedTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + PayState.GetHashCode();
                    if (EmployeeType != null)
                    hashCode = hashCode * 59 + EmployeeType.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Assignment != null)
                    hashCode = hashCode * 59 + Assignment.GetHashCode();
                    if (Post != null)
                    hashCode = hashCode * 59 + Post.GetHashCode();
                    if (Posting != null)
                    hashCode = hashCode * 59 + Posting.GetHashCode();
                    if (Cancellation != null)
                    hashCode = hashCode * 59 + Cancellation.GetHashCode();
                    
                    hashCode = hashCode * 59 + InCharge.GetHashCode();
                    if (Shift != null)
                    hashCode = hashCode * 59 + Shift.GetHashCode();
                    if (Duty != null)
                    hashCode = hashCode * 59 + Duty.GetHashCode();
                    if (Fulfillment != null)
                    hashCode = hashCode * 59 + Fulfillment.GetHashCode();
                    if (CostCentre != null)
                    hashCode = hashCode * 59 + CostCentre.GetHashCode();
                    if (OwningUnit != null)
                    hashCode = hashCode * 59 + OwningUnit.GetHashCode();
                    if (ResourcingUnit != null)
                    hashCode = hashCode * 59 + ResourcingUnit.GetHashCode();
                    if (Requirement != null)
                    hashCode = hashCode * 59 + Requirement.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (AdditionalDutyReason != null)
                    hashCode = hashCode * 59 + AdditionalDutyReason.GetHashCode();
                    
                    hashCode = hashCode * 59 + DutyHasWarnings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HoursAssignment left, HoursAssignment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HoursAssignment left, HoursAssignment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Activity API
 *
 *      ## API for querying worker activity.      This is an early availabilty API, and is subject to change. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HoursAssignmentRequirement : IEquatable<HoursAssignmentRequirement>
    { 
        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public Grade Grade { get; set; }

        /// <summary>
        /// Gets or Sets GradeType
        /// </summary>
        [DataMember(Name="gradeType", EmitDefaultValue=false)]
        public GradeType GradeType { get; set; }

        /// <summary>
        /// Gets or Sets GradeTypeCategory
        /// </summary>
        [DataMember(Name="gradeTypeCategory", EmitDefaultValue=false)]
        public GradeTypeCategory GradeTypeCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HoursAssignmentRequirement {\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  GradeType: ").Append(GradeType).Append("\n");
            sb.Append("  GradeTypeCategory: ").Append(GradeTypeCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HoursAssignmentRequirement)obj);
        }

        /// <summary>
        /// Returns true if HoursAssignmentRequirement instances are equal
        /// </summary>
        /// <param name="other">Instance of HoursAssignmentRequirement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoursAssignmentRequirement other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    GradeType == other.GradeType ||
                    GradeType != null &&
                    GradeType.Equals(other.GradeType)
                ) && 
                (
                    GradeTypeCategory == other.GradeTypeCategory ||
                    GradeTypeCategory != null &&
                    GradeTypeCategory.Equals(other.GradeTypeCategory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    if (GradeType != null)
                    hashCode = hashCode * 59 + GradeType.GetHashCode();
                    if (GradeTypeCategory != null)
                    hashCode = hashCode * 59 + GradeTypeCategory.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HoursAssignmentRequirement left, HoursAssignmentRequirement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HoursAssignmentRequirement left, HoursAssignmentRequirement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

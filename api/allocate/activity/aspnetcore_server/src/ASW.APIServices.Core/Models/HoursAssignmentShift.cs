/*
 * Activity API
 *
 *      ## API for querying worker activity.      This is an early availabilty API, and is subject to change. 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HoursAssignmentShift : IEquatable<HoursAssignmentShift>
    { 
        /// <summary>
        ///  Standard HealthRoster enumerations: *   Day *   Combined *   Night *   OnCall *   SleepIn *   StandBy *   Rest *   None *   ADO *   Evening *   Other *   PrivatePractice                 
        /// </summary>
        /// <value> Standard HealthRoster enumerations: *   Day *   Combined *   Night *   OnCall *   SleepIn *   StandBy *   Rest *   None *   ADO *   Evening *   Other *   PrivatePractice                 </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum DayEnum for day
            /// </summary>
            [EnumMember(Value = "day")]
            DayEnum = 1,
            
            /// <summary>
            /// Enum CombinedEnum for combined
            /// </summary>
            [EnumMember(Value = "combined")]
            CombinedEnum = 2,
            
            /// <summary>
            /// Enum NightEnum for night
            /// </summary>
            [EnumMember(Value = "night")]
            NightEnum = 3,
            
            /// <summary>
            /// Enum OnCallEnum for onCall
            /// </summary>
            [EnumMember(Value = "onCall")]
            OnCallEnum = 4,
            
            /// <summary>
            /// Enum SleepInEnum for sleepIn
            /// </summary>
            [EnumMember(Value = "sleepIn")]
            SleepInEnum = 5,
            
            /// <summary>
            /// Enum StandByEnum for standBy
            /// </summary>
            [EnumMember(Value = "standBy")]
            StandByEnum = 6,
            
            /// <summary>
            /// Enum RestEnum for rest
            /// </summary>
            [EnumMember(Value = "rest")]
            RestEnum = 7,
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 8,
            
            /// <summary>
            /// Enum ADOEnum for ADO
            /// </summary>
            [EnumMember(Value = "ADO")]
            ADOEnum = 9,
            
            /// <summary>
            /// Enum EveningEnum for evening
            /// </summary>
            [EnumMember(Value = "evening")]
            EveningEnum = 10,
            
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 11,
            
            /// <summary>
            /// Enum PrivatePracticeEnum for PrivatePractice
            /// </summary>
            [EnumMember(Value = "PrivatePractice")]
            PrivatePracticeEnum = 12
        }

        /// <summary>
        ///  Standard HealthRoster enumerations: *   Day *   Combined *   Night *   OnCall *   SleepIn *   StandBy *   Rest *   None *   ADO *   Evening *   Other *   PrivatePractice                 
        /// </summary>
        /// <value> Standard HealthRoster enumerations: *   Day *   Combined *   Night *   OnCall *   SleepIn *   StandBy *   Rest *   None *   ADO *   Evening *   Other *   PrivatePractice                 </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HoursAssignmentShift {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HoursAssignmentShift)obj);
        }

        /// <summary>
        /// Returns true if HoursAssignmentShift instances are equal
        /// </summary>
        /// <param name="other">Instance of HoursAssignmentShift to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoursAssignmentShift other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HoursAssignmentShift left, HoursAssignmentShift right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HoursAssignmentShift left, HoursAssignmentShift right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

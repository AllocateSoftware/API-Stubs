# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class HoursAssignmentShift(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, name=None):  # noqa: E501
        """HoursAssignmentShift - a model defined in OpenAPI

        :param type: The type of this HoursAssignmentShift.  # noqa: E501
        :type type: str
        :param name: The name of this HoursAssignmentShift.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'type': str,
            'name': str
        }

        self.attribute_map = {
            'type': 'type',
            'name': 'name'
        }

        self._type = type
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'HoursAssignmentShift':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HoursAssignment_shift of this HoursAssignmentShift.  # noqa: E501
        :rtype: HoursAssignmentShift
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this HoursAssignmentShift.

         Standard HealthRoster enumerations: *   Day *   Combined *   Night *   OnCall *   SleepIn *   StandBy *   Rest *   None *   ADO *   Evening *   Other *   PrivatePractice                   # noqa: E501

        :return: The type of this HoursAssignmentShift.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HoursAssignmentShift.

         Standard HealthRoster enumerations: *   Day *   Combined *   Night *   OnCall *   SleepIn *   StandBy *   Rest *   None *   ADO *   Evening *   Other *   PrivatePractice                   # noqa: E501

        :param type: The type of this HoursAssignmentShift.
        :type type: str
        """
        allowed_values = ["day", "combined", "night", "onCall", "sleepIn", "standBy", "rest", "none", "ADO", "evening", "other", "PrivatePractice"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this HoursAssignmentShift.


        :return: The name of this HoursAssignmentShift.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HoursAssignmentShift.


        :param name: The name of this HoursAssignmentShift.
        :type name: str
        """

        self._name = name

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server import util


class HoursAssignmentFulfillment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, status: str=None, category: str=None):
        """HoursAssignmentFulfillment - a model defined in OpenAPI

        :param type: The type of this HoursAssignmentFulfillment.
        :param status: The status of this HoursAssignmentFulfillment.
        :param category: The category of this HoursAssignmentFulfillment.
        """
        self.openapi_types = {
            'type': str,
            'status': str,
            'category': str
        }

        self.attribute_map = {
            'type': 'type',
            'status': 'status',
            'category': 'category'
        }

        self._type = type
        self._status = status
        self._category = category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HoursAssignmentFulfillment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HoursAssignment_fulfillment of this HoursAssignmentFulfillment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this HoursAssignmentFulfillment.


        :return: The type of this HoursAssignmentFulfillment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HoursAssignmentFulfillment.


        :param type: The type of this HoursAssignmentFulfillment.
        :type type: str
        """
        allowed_values = ["local", "bank", "agency"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this HoursAssignmentFulfillment.


        :return: The status of this HoursAssignmentFulfillment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HoursAssignmentFulfillment.


        :param status: The status of this HoursAssignmentFulfillment.
        :type status: str
        """
        allowed_values = ["vacant", "filled", "partial"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def category(self):
        """Gets the category of this HoursAssignmentFulfillment.


        :return: The category of this HoursAssignmentFulfillment.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HoursAssignmentFulfillment.


        :param category: The category of this HoursAssignmentFulfillment.
        :type category: str
        """
        allowed_values = ["mandatory", "optional", "additional", "stub"]
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

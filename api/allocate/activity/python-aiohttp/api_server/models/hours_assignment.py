# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server.models.date_span import DateSpan
from api_server.models.hours_assignment_assignment import HoursAssignmentAssignment
from api_server.models.hours_assignment_cancellation import HoursAssignmentCancellation
from api_server.models.hours_assignment_cost_centre import HoursAssignmentCostCentre
from api_server.models.hours_assignment_duty import HoursAssignmentDuty
from api_server.models.hours_assignment_employee_type import HoursAssignmentEmployeeType
from api_server.models.hours_assignment_fulfillment import HoursAssignmentFulfillment
from api_server.models.hours_assignment_location import HoursAssignmentLocation
from api_server.models.hours_assignment_owning_unit import HoursAssignmentOwningUnit
from api_server.models.hours_assignment_person import HoursAssignmentPerson
from api_server.models.hours_assignment_post import HoursAssignmentPost
from api_server.models.hours_assignment_posting import HoursAssignmentPosting
from api_server.models.hours_assignment_requirement import HoursAssignmentRequirement
from api_server.models.hours_assignment_shift import HoursAssignmentShift
from api_server import util


class HoursAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, when: date=None, actual: DateSpan=None, work_time: int=None, contracted_time: int=None, pay_state: str=None, employee_type: HoursAssignmentEmployeeType=None, person: HoursAssignmentPerson=None, assignment: HoursAssignmentAssignment=None, post: HoursAssignmentPost=None, posting: HoursAssignmentPosting=None, cancellation: HoursAssignmentCancellation=None, in_charge: bool=None, shift: HoursAssignmentShift=None, duty: HoursAssignmentDuty=None, fulfillment: HoursAssignmentFulfillment=None, cost_centre: HoursAssignmentCostCentre=None, owning_unit: HoursAssignmentOwningUnit=None, resourcing_unit: HoursAssignmentOwningUnit=None, requirement: HoursAssignmentRequirement=None, location: HoursAssignmentLocation=None, additional_duty_reason: str=None, duty_has_warnings: bool=None):
        """HoursAssignment - a model defined in OpenAPI

        :param id: The id of this HoursAssignment.
        :param when: The when of this HoursAssignment.
        :param actual: The actual of this HoursAssignment.
        :param work_time: The work_time of this HoursAssignment.
        :param contracted_time: The contracted_time of this HoursAssignment.
        :param pay_state: The pay_state of this HoursAssignment.
        :param employee_type: The employee_type of this HoursAssignment.
        :param person: The person of this HoursAssignment.
        :param assignment: The assignment of this HoursAssignment.
        :param post: The post of this HoursAssignment.
        :param posting: The posting of this HoursAssignment.
        :param cancellation: The cancellation of this HoursAssignment.
        :param in_charge: The in_charge of this HoursAssignment.
        :param shift: The shift of this HoursAssignment.
        :param duty: The duty of this HoursAssignment.
        :param fulfillment: The fulfillment of this HoursAssignment.
        :param cost_centre: The cost_centre of this HoursAssignment.
        :param owning_unit: The owning_unit of this HoursAssignment.
        :param resourcing_unit: The resourcing_unit of this HoursAssignment.
        :param requirement: The requirement of this HoursAssignment.
        :param location: The location of this HoursAssignment.
        :param additional_duty_reason: The additional_duty_reason of this HoursAssignment.
        :param duty_has_warnings: The duty_has_warnings of this HoursAssignment.
        """
        self.openapi_types = {
            'id': int,
            'when': date,
            'actual': DateSpan,
            'work_time': int,
            'contracted_time': int,
            'pay_state': str,
            'employee_type': HoursAssignmentEmployeeType,
            'person': HoursAssignmentPerson,
            'assignment': HoursAssignmentAssignment,
            'post': HoursAssignmentPost,
            'posting': HoursAssignmentPosting,
            'cancellation': HoursAssignmentCancellation,
            'in_charge': bool,
            'shift': HoursAssignmentShift,
            'duty': HoursAssignmentDuty,
            'fulfillment': HoursAssignmentFulfillment,
            'cost_centre': HoursAssignmentCostCentre,
            'owning_unit': HoursAssignmentOwningUnit,
            'resourcing_unit': HoursAssignmentOwningUnit,
            'requirement': HoursAssignmentRequirement,
            'location': HoursAssignmentLocation,
            'additional_duty_reason': str,
            'duty_has_warnings': bool
        }

        self.attribute_map = {
            'id': 'id',
            'when': 'when',
            'actual': 'actual',
            'work_time': 'workTime',
            'contracted_time': 'contractedTime',
            'pay_state': 'payState',
            'employee_type': 'employeeType',
            'person': 'person',
            'assignment': 'assignment',
            'post': 'post',
            'posting': 'posting',
            'cancellation': 'cancellation',
            'in_charge': 'inCharge',
            'shift': 'shift',
            'duty': 'duty',
            'fulfillment': 'fulfillment',
            'cost_centre': 'costCentre',
            'owning_unit': 'owningUnit',
            'resourcing_unit': 'resourcingUnit',
            'requirement': 'requirement',
            'location': 'location',
            'additional_duty_reason': 'additionalDutyReason',
            'duty_has_warnings': 'dutyHasWarnings'
        }

        self._id = id
        self._when = when
        self._actual = actual
        self._work_time = work_time
        self._contracted_time = contracted_time
        self._pay_state = pay_state
        self._employee_type = employee_type
        self._person = person
        self._assignment = assignment
        self._post = post
        self._posting = posting
        self._cancellation = cancellation
        self._in_charge = in_charge
        self._shift = shift
        self._duty = duty
        self._fulfillment = fulfillment
        self._cost_centre = cost_centre
        self._owning_unit = owning_unit
        self._resourcing_unit = resourcing_unit
        self._requirement = requirement
        self._location = location
        self._additional_duty_reason = additional_duty_reason
        self._duty_has_warnings = duty_has_warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HoursAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HoursAssignment of this HoursAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this HoursAssignment.

        Identifier for the hours assignment

        :return: The id of this HoursAssignment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HoursAssignment.

        Identifier for the hours assignment

        :param id: The id of this HoursAssignment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def when(self):
        """Gets the when of this HoursAssignment.

        Date assignment begins on

        :return: The when of this HoursAssignment.
        :rtype: date
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this HoursAssignment.

        Date assignment begins on

        :param when: The when of this HoursAssignment.
        :type when: date
        """

        self._when = when

    @property
    def actual(self):
        """Gets the actual of this HoursAssignment.


        :return: The actual of this HoursAssignment.
        :rtype: DateSpan
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this HoursAssignment.


        :param actual: The actual of this HoursAssignment.
        :type actual: DateSpan
        """

        self._actual = actual

    @property
    def work_time(self):
        """Gets the work_time of this HoursAssignment.

        Number of minutes worked in assignment

        :return: The work_time of this HoursAssignment.
        :rtype: int
        """
        return self._work_time

    @work_time.setter
    def work_time(self, work_time):
        """Sets the work_time of this HoursAssignment.

        Number of minutes worked in assignment

        :param work_time: The work_time of this HoursAssignment.
        :type work_time: int
        """

        self._work_time = work_time

    @property
    def contracted_time(self):
        """Gets the contracted_time of this HoursAssignment.

        Number of minutes that count towards the person’s contracted hours

        :return: The contracted_time of this HoursAssignment.
        :rtype: int
        """
        return self._contracted_time

    @contracted_time.setter
    def contracted_time(self, contracted_time):
        """Sets the contracted_time of this HoursAssignment.

        Number of minutes that count towards the person’s contracted hours

        :param contracted_time: The contracted_time of this HoursAssignment.
        :type contracted_time: int
        """

        self._contracted_time = contracted_time

    @property
    def pay_state(self):
        """Gets the pay_state of this HoursAssignment.

        Details where the duty is in it’s lifecycle. *   Requested = (Requested Bank Duty) *   Accepted = (Roster Approved) *   Approved = (Finalised) *   Submitted = (PAID) *   Paid *   Unlocked = (Was once Finalised state.) *   Relocked = (Finalised given that it was once un-finalised for some reason) 

        :return: The pay_state of this HoursAssignment.
        :rtype: str
        """
        return self._pay_state

    @pay_state.setter
    def pay_state(self, pay_state):
        """Sets the pay_state of this HoursAssignment.

        Details where the duty is in it’s lifecycle. *   Requested = (Requested Bank Duty) *   Accepted = (Roster Approved) *   Approved = (Finalised) *   Submitted = (PAID) *   Paid *   Unlocked = (Was once Finalised state.) *   Relocked = (Finalised given that it was once un-finalised for some reason) 

        :param pay_state: The pay_state of this HoursAssignment.
        :type pay_state: str
        """
        allowed_values = ["requested", "accepted", "approved", "submitted", "paid", "unlocked", "relocked"]
        if pay_state not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_state` ({0}), must be one of {1}"
                .format(pay_state, allowed_values)
            )

        self._pay_state = pay_state

    @property
    def employee_type(self):
        """Gets the employee_type of this HoursAssignment.


        :return: The employee_type of this HoursAssignment.
        :rtype: HoursAssignmentEmployeeType
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type):
        """Sets the employee_type of this HoursAssignment.


        :param employee_type: The employee_type of this HoursAssignment.
        :type employee_type: HoursAssignmentEmployeeType
        """

        self._employee_type = employee_type

    @property
    def person(self):
        """Gets the person of this HoursAssignment.


        :return: The person of this HoursAssignment.
        :rtype: HoursAssignmentPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this HoursAssignment.


        :param person: The person of this HoursAssignment.
        :type person: HoursAssignmentPerson
        """

        self._person = person

    @property
    def assignment(self):
        """Gets the assignment of this HoursAssignment.


        :return: The assignment of this HoursAssignment.
        :rtype: HoursAssignmentAssignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this HoursAssignment.


        :param assignment: The assignment of this HoursAssignment.
        :type assignment: HoursAssignmentAssignment
        """

        self._assignment = assignment

    @property
    def post(self):
        """Gets the post of this HoursAssignment.


        :return: The post of this HoursAssignment.
        :rtype: HoursAssignmentPost
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this HoursAssignment.


        :param post: The post of this HoursAssignment.
        :type post: HoursAssignmentPost
        """

        self._post = post

    @property
    def posting(self):
        """Gets the posting of this HoursAssignment.


        :return: The posting of this HoursAssignment.
        :rtype: HoursAssignmentPosting
        """
        return self._posting

    @posting.setter
    def posting(self, posting):
        """Sets the posting of this HoursAssignment.


        :param posting: The posting of this HoursAssignment.
        :type posting: HoursAssignmentPosting
        """

        self._posting = posting

    @property
    def cancellation(self):
        """Gets the cancellation of this HoursAssignment.


        :return: The cancellation of this HoursAssignment.
        :rtype: HoursAssignmentCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this HoursAssignment.


        :param cancellation: The cancellation of this HoursAssignment.
        :type cancellation: HoursAssignmentCancellation
        """

        self._cancellation = cancellation

    @property
    def in_charge(self):
        """Gets the in_charge of this HoursAssignment.

        Was the employee in charge?

        :return: The in_charge of this HoursAssignment.
        :rtype: bool
        """
        return self._in_charge

    @in_charge.setter
    def in_charge(self, in_charge):
        """Sets the in_charge of this HoursAssignment.

        Was the employee in charge?

        :param in_charge: The in_charge of this HoursAssignment.
        :type in_charge: bool
        """

        self._in_charge = in_charge

    @property
    def shift(self):
        """Gets the shift of this HoursAssignment.


        :return: The shift of this HoursAssignment.
        :rtype: HoursAssignmentShift
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this HoursAssignment.


        :param shift: The shift of this HoursAssignment.
        :type shift: HoursAssignmentShift
        """

        self._shift = shift

    @property
    def duty(self):
        """Gets the duty of this HoursAssignment.


        :return: The duty of this HoursAssignment.
        :rtype: HoursAssignmentDuty
        """
        return self._duty

    @duty.setter
    def duty(self, duty):
        """Sets the duty of this HoursAssignment.


        :param duty: The duty of this HoursAssignment.
        :type duty: HoursAssignmentDuty
        """

        self._duty = duty

    @property
    def fulfillment(self):
        """Gets the fulfillment of this HoursAssignment.


        :return: The fulfillment of this HoursAssignment.
        :rtype: HoursAssignmentFulfillment
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this HoursAssignment.


        :param fulfillment: The fulfillment of this HoursAssignment.
        :type fulfillment: HoursAssignmentFulfillment
        """

        self._fulfillment = fulfillment

    @property
    def cost_centre(self):
        """Gets the cost_centre of this HoursAssignment.


        :return: The cost_centre of this HoursAssignment.
        :rtype: HoursAssignmentCostCentre
        """
        return self._cost_centre

    @cost_centre.setter
    def cost_centre(self, cost_centre):
        """Sets the cost_centre of this HoursAssignment.


        :param cost_centre: The cost_centre of this HoursAssignment.
        :type cost_centre: HoursAssignmentCostCentre
        """

        self._cost_centre = cost_centre

    @property
    def owning_unit(self):
        """Gets the owning_unit of this HoursAssignment.


        :return: The owning_unit of this HoursAssignment.
        :rtype: HoursAssignmentOwningUnit
        """
        return self._owning_unit

    @owning_unit.setter
    def owning_unit(self, owning_unit):
        """Sets the owning_unit of this HoursAssignment.


        :param owning_unit: The owning_unit of this HoursAssignment.
        :type owning_unit: HoursAssignmentOwningUnit
        """

        self._owning_unit = owning_unit

    @property
    def resourcing_unit(self):
        """Gets the resourcing_unit of this HoursAssignment.


        :return: The resourcing_unit of this HoursAssignment.
        :rtype: HoursAssignmentOwningUnit
        """
        return self._resourcing_unit

    @resourcing_unit.setter
    def resourcing_unit(self, resourcing_unit):
        """Sets the resourcing_unit of this HoursAssignment.


        :param resourcing_unit: The resourcing_unit of this HoursAssignment.
        :type resourcing_unit: HoursAssignmentOwningUnit
        """

        self._resourcing_unit = resourcing_unit

    @property
    def requirement(self):
        """Gets the requirement of this HoursAssignment.


        :return: The requirement of this HoursAssignment.
        :rtype: HoursAssignmentRequirement
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement):
        """Sets the requirement of this HoursAssignment.


        :param requirement: The requirement of this HoursAssignment.
        :type requirement: HoursAssignmentRequirement
        """

        self._requirement = requirement

    @property
    def location(self):
        """Gets the location of this HoursAssignment.


        :return: The location of this HoursAssignment.
        :rtype: HoursAssignmentLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this HoursAssignment.


        :param location: The location of this HoursAssignment.
        :type location: HoursAssignmentLocation
        """

        self._location = location

    @property
    def additional_duty_reason(self):
        """Gets the additional_duty_reason of this HoursAssignment.


        :return: The additional_duty_reason of this HoursAssignment.
        :rtype: str
        """
        return self._additional_duty_reason

    @additional_duty_reason.setter
    def additional_duty_reason(self, additional_duty_reason):
        """Sets the additional_duty_reason of this HoursAssignment.


        :param additional_duty_reason: The additional_duty_reason of this HoursAssignment.
        :type additional_duty_reason: str
        """

        self._additional_duty_reason = additional_duty_reason

    @property
    def duty_has_warnings(self):
        """Gets the duty_has_warnings of this HoursAssignment.


        :return: The duty_has_warnings of this HoursAssignment.
        :rtype: bool
        """
        return self._duty_has_warnings

    @duty_has_warnings.setter
    def duty_has_warnings(self, duty_has_warnings):
        """Sets the duty_has_warnings of this HoursAssignment.


        :param duty_has_warnings: The duty_has_warnings of this HoursAssignment.
        :type duty_has_warnings: bool
        """

        self._duty_has_warnings = duty_has_warnings

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server.models.date_span import DateSpan
from api_server import util

from api_server.models.date_span import DateSpan  # noqa: E501

class Visa(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number=None, country=None, issuing_office=None, type=None, entries=None, validity=None):  # noqa: E501
        """Visa - a model defined in OpenAPI

        :param number: The number of this Visa.  # noqa: E501
        :type number: str
        :param country: The country of this Visa.  # noqa: E501
        :type country: str
        :param issuing_office: The issuing_office of this Visa.  # noqa: E501
        :type issuing_office: str
        :param type: The type of this Visa.  # noqa: E501
        :type type: str
        :param entries: The entries of this Visa.  # noqa: E501
        :type entries: str
        :param validity: The validity of this Visa.  # noqa: E501
        :type validity: DateSpan
        """
        self.openapi_types = {
            'number': str,
            'country': str,
            'issuing_office': str,
            'type': str,
            'entries': str,
            'validity': DateSpan
        }

        self.attribute_map = {
            'number': 'number',
            'country': 'country',
            'issuing_office': 'issuingOffice',
            'type': 'type',
            'entries': 'entries',
            'validity': 'validity'
        }

        self._number = number
        self._country = country
        self._issuing_office = issuing_office
        self._type = type
        self._entries = entries
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt) -> 'Visa':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Visa of this Visa.  # noqa: E501
        :rtype: Visa
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this Visa.


        :return: The number of this Visa.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Visa.


        :param number: The number of this Visa.
        :type number: str
        """

        self._number = number

    @property
    def country(self):
        """Gets the country of this Visa.


        :return: The country of this Visa.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Visa.


        :param country: The country of this Visa.
        :type country: str
        """

        self._country = country

    @property
    def issuing_office(self):
        """Gets the issuing_office of this Visa.


        :return: The issuing_office of this Visa.
        :rtype: str
        """
        return self._issuing_office

    @issuing_office.setter
    def issuing_office(self, issuing_office):
        """Sets the issuing_office of this Visa.


        :param issuing_office: The issuing_office of this Visa.
        :type issuing_office: str
        """

        self._issuing_office = issuing_office

    @property
    def type(self):
        """Gets the type of this Visa.


        :return: The type of this Visa.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Visa.


        :param type: The type of this Visa.
        :type type: str
        """

        self._type = type

    @property
    def entries(self):
        """Gets the entries of this Visa.


        :return: The entries of this Visa.
        :rtype: str
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this Visa.


        :param entries: The entries of this Visa.
        :type entries: str
        """

        self._entries = entries

    @property
    def validity(self):
        """Gets the validity of this Visa.


        :return: The validity of this Visa.
        :rtype: DateSpan
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this Visa.


        :param validity: The validity of this Visa.
        :type validity: DateSpan
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")  # noqa: E501

        self._validity = validity

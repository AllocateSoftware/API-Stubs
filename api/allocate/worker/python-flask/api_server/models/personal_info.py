# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class PersonalInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maiden_name=None, marital_status=None, additional_id=None, place_of_birth=None, nationality=None, ethnic_origin=None, visa_required=None, disabled_no=None, disability=None):  # noqa: E501
        """PersonalInfo - a model defined in OpenAPI

        :param maiden_name: The maiden_name of this PersonalInfo.  # noqa: E501
        :type maiden_name: str
        :param marital_status: The marital_status of this PersonalInfo.  # noqa: E501
        :type marital_status: str
        :param additional_id: The additional_id of this PersonalInfo.  # noqa: E501
        :type additional_id: str
        :param place_of_birth: The place_of_birth of this PersonalInfo.  # noqa: E501
        :type place_of_birth: str
        :param nationality: The nationality of this PersonalInfo.  # noqa: E501
        :type nationality: str
        :param ethnic_origin: The ethnic_origin of this PersonalInfo.  # noqa: E501
        :type ethnic_origin: str
        :param visa_required: The visa_required of this PersonalInfo.  # noqa: E501
        :type visa_required: str
        :param disabled_no: The disabled_no of this PersonalInfo.  # noqa: E501
        :type disabled_no: str
        :param disability: The disability of this PersonalInfo.  # noqa: E501
        :type disability: str
        """
        self.openapi_types = {
            'maiden_name': str,
            'marital_status': str,
            'additional_id': str,
            'place_of_birth': str,
            'nationality': str,
            'ethnic_origin': str,
            'visa_required': str,
            'disabled_no': str,
            'disability': str
        }

        self.attribute_map = {
            'maiden_name': 'maidenName',
            'marital_status': 'maritalStatus',
            'additional_id': 'additionalID',
            'place_of_birth': 'placeOfBirth',
            'nationality': 'nationality',
            'ethnic_origin': 'ethnicOrigin',
            'visa_required': 'visaRequired',
            'disabled_no': 'disabledNo',
            'disability': 'disability'
        }

        self._maiden_name = maiden_name
        self._marital_status = marital_status
        self._additional_id = additional_id
        self._place_of_birth = place_of_birth
        self._nationality = nationality
        self._ethnic_origin = ethnic_origin
        self._visa_required = visa_required
        self._disabled_no = disabled_no
        self._disability = disability

    @classmethod
    def from_dict(cls, dikt) -> 'PersonalInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PersonalInfo of this PersonalInfo.  # noqa: E501
        :rtype: PersonalInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maiden_name(self):
        """Gets the maiden_name of this PersonalInfo.


        :return: The maiden_name of this PersonalInfo.
        :rtype: str
        """
        return self._maiden_name

    @maiden_name.setter
    def maiden_name(self, maiden_name):
        """Sets the maiden_name of this PersonalInfo.


        :param maiden_name: The maiden_name of this PersonalInfo.
        :type maiden_name: str
        """

        self._maiden_name = maiden_name

    @property
    def marital_status(self):
        """Gets the marital_status of this PersonalInfo.


        :return: The marital_status of this PersonalInfo.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this PersonalInfo.


        :param marital_status: The marital_status of this PersonalInfo.
        :type marital_status: str
        """

        self._marital_status = marital_status

    @property
    def additional_id(self):
        """Gets the additional_id of this PersonalInfo.


        :return: The additional_id of this PersonalInfo.
        :rtype: str
        """
        return self._additional_id

    @additional_id.setter
    def additional_id(self, additional_id):
        """Sets the additional_id of this PersonalInfo.


        :param additional_id: The additional_id of this PersonalInfo.
        :type additional_id: str
        """

        self._additional_id = additional_id

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this PersonalInfo.


        :return: The place_of_birth of this PersonalInfo.
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this PersonalInfo.


        :param place_of_birth: The place_of_birth of this PersonalInfo.
        :type place_of_birth: str
        """

        self._place_of_birth = place_of_birth

    @property
    def nationality(self):
        """Gets the nationality of this PersonalInfo.


        :return: The nationality of this PersonalInfo.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this PersonalInfo.


        :param nationality: The nationality of this PersonalInfo.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def ethnic_origin(self):
        """Gets the ethnic_origin of this PersonalInfo.


        :return: The ethnic_origin of this PersonalInfo.
        :rtype: str
        """
        return self._ethnic_origin

    @ethnic_origin.setter
    def ethnic_origin(self, ethnic_origin):
        """Sets the ethnic_origin of this PersonalInfo.


        :param ethnic_origin: The ethnic_origin of this PersonalInfo.
        :type ethnic_origin: str
        """

        self._ethnic_origin = ethnic_origin

    @property
    def visa_required(self):
        """Gets the visa_required of this PersonalInfo.


        :return: The visa_required of this PersonalInfo.
        :rtype: str
        """
        return self._visa_required

    @visa_required.setter
    def visa_required(self, visa_required):
        """Sets the visa_required of this PersonalInfo.


        :param visa_required: The visa_required of this PersonalInfo.
        :type visa_required: str
        """

        self._visa_required = visa_required

    @property
    def disabled_no(self):
        """Gets the disabled_no of this PersonalInfo.


        :return: The disabled_no of this PersonalInfo.
        :rtype: str
        """
        return self._disabled_no

    @disabled_no.setter
    def disabled_no(self, disabled_no):
        """Sets the disabled_no of this PersonalInfo.


        :param disabled_no: The disabled_no of this PersonalInfo.
        :type disabled_no: str
        """

        self._disabled_no = disabled_no

    @property
    def disability(self):
        """Gets the disability of this PersonalInfo.


        :return: The disability of this PersonalInfo.
        :rtype: str
        """
        return self._disability

    @disability.setter
    def disability(self, disability):
        """Sets the disability of this PersonalInfo.


        :param disability: The disability of this PersonalInfo.
        :type disability: str
        """

        self._disability = disability

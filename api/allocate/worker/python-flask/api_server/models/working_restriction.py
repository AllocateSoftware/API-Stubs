# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server.models.date_span import DateSpan
from api_server.models.working_restriction_default_leave_hours import WorkingRestrictionDefaultLeaveHours
from api_server.models.working_restriction_hours_of_work import WorkingRestrictionHoursOfWork
from api_server.models.working_restriction_restrictions import WorkingRestrictionRestrictions
from api_server import util

from api_server.models.date_span import DateSpan  # noqa: E501
from api_server.models.working_restriction_default_leave_hours import WorkingRestrictionDefaultLeaveHours  # noqa: E501
from api_server.models.working_restriction_hours_of_work import WorkingRestrictionHoursOfWork  # noqa: E501
from api_server.models.working_restriction_restrictions import WorkingRestrictionRestrictions  # noqa: E501

class WorkingRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title=None, validity=None, hours_of_work=None, default_leave_hours=None, restrictions=None):  # noqa: E501
        """WorkingRestriction - a model defined in OpenAPI

        :param title: The title of this WorkingRestriction.  # noqa: E501
        :type title: str
        :param validity: The validity of this WorkingRestriction.  # noqa: E501
        :type validity: DateSpan
        :param hours_of_work: The hours_of_work of this WorkingRestriction.  # noqa: E501
        :type hours_of_work: WorkingRestrictionHoursOfWork
        :param default_leave_hours: The default_leave_hours of this WorkingRestriction.  # noqa: E501
        :type default_leave_hours: WorkingRestrictionDefaultLeaveHours
        :param restrictions: The restrictions of this WorkingRestriction.  # noqa: E501
        :type restrictions: WorkingRestrictionRestrictions
        """
        self.openapi_types = {
            'title': str,
            'validity': DateSpan,
            'hours_of_work': WorkingRestrictionHoursOfWork,
            'default_leave_hours': WorkingRestrictionDefaultLeaveHours,
            'restrictions': WorkingRestrictionRestrictions
        }

        self.attribute_map = {
            'title': 'title',
            'validity': 'validity',
            'hours_of_work': 'hoursOfWork',
            'default_leave_hours': 'defaultLeaveHours',
            'restrictions': 'restrictions'
        }

        self._title = title
        self._validity = validity
        self._hours_of_work = hours_of_work
        self._default_leave_hours = default_leave_hours
        self._restrictions = restrictions

    @classmethod
    def from_dict(cls, dikt) -> 'WorkingRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkingRestriction of this WorkingRestriction.  # noqa: E501
        :rtype: WorkingRestriction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this WorkingRestriction.


        :return: The title of this WorkingRestriction.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WorkingRestriction.


        :param title: The title of this WorkingRestriction.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def validity(self):
        """Gets the validity of this WorkingRestriction.


        :return: The validity of this WorkingRestriction.
        :rtype: DateSpan
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this WorkingRestriction.


        :param validity: The validity of this WorkingRestriction.
        :type validity: DateSpan
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")  # noqa: E501

        self._validity = validity

    @property
    def hours_of_work(self):
        """Gets the hours_of_work of this WorkingRestriction.


        :return: The hours_of_work of this WorkingRestriction.
        :rtype: WorkingRestrictionHoursOfWork
        """
        return self._hours_of_work

    @hours_of_work.setter
    def hours_of_work(self, hours_of_work):
        """Sets the hours_of_work of this WorkingRestriction.


        :param hours_of_work: The hours_of_work of this WorkingRestriction.
        :type hours_of_work: WorkingRestrictionHoursOfWork
        """
        if hours_of_work is None:
            raise ValueError("Invalid value for `hours_of_work`, must not be `None`")  # noqa: E501

        self._hours_of_work = hours_of_work

    @property
    def default_leave_hours(self):
        """Gets the default_leave_hours of this WorkingRestriction.


        :return: The default_leave_hours of this WorkingRestriction.
        :rtype: WorkingRestrictionDefaultLeaveHours
        """
        return self._default_leave_hours

    @default_leave_hours.setter
    def default_leave_hours(self, default_leave_hours):
        """Sets the default_leave_hours of this WorkingRestriction.


        :param default_leave_hours: The default_leave_hours of this WorkingRestriction.
        :type default_leave_hours: WorkingRestrictionDefaultLeaveHours
        """
        if default_leave_hours is None:
            raise ValueError("Invalid value for `default_leave_hours`, must not be `None`")  # noqa: E501

        self._default_leave_hours = default_leave_hours

    @property
    def restrictions(self):
        """Gets the restrictions of this WorkingRestriction.


        :return: The restrictions of this WorkingRestriction.
        :rtype: WorkingRestrictionRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this WorkingRestriction.


        :param restrictions: The restrictions of this WorkingRestriction.
        :type restrictions: WorkingRestrictionRestrictions
        """
        if restrictions is None:
            raise ValueError("Invalid value for `restrictions`, must not be `None`")  # noqa: E501

        self._restrictions = restrictions

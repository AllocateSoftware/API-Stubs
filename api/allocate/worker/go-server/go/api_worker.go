/*
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A WorkerApiController binds http requests to an api service and writes the service results to the http response
type WorkerApiController struct {
	service WorkerApiServicer
}

// NewWorkerApiController creates a default api controller
func NewWorkerApiController(s WorkerApiServicer) Router {
	return &WorkerApiController{ service: s }
}

// Routes returns all of the api route for the WorkerApiController
func (c *WorkerApiController) Routes() Routes {
	return Routes{ 
		{
			"OnboardWorkerToTrust",
			strings.ToUpper("Post"),
			"/api/v1/workers/{id}/onboardToTrust",
			c.OnboardWorkerToTrust,
		},
	}
}

// OnboardWorkerToTrust - 
func (c *WorkerApiController) OnboardWorkerToTrust(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	inlineObject := &InlineObject{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.OnboardWorkerToTrust(id, *inlineObject)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.openapi.api;

import com.allocate.openapi.model.AsyncResponse;
import com.allocate.openapi.model.ErrorResponse;
import com.allocate.openapi.model.InlineObject;
import com.allocate.openapi.model.Person;
import com.allocate.openapi.model.WorkerRegistrationResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:34:19.384766Z[Europe/London]")

@Validated
@Api(value = "workers", description = "the workers API")
public interface WorkersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "getWorker", notes = "Retrieve worker details from the Allocate ecosystem using the Allocate Worker id. The Allocate Worker id will be issued when registering a worker.  ", response = Person.class, authorizations = {
        @Authorization(value = "jwt")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Worker successfully found", response = Person.class),
        @ApiResponse(code = 404, message = "The worker was not found"),
        @ApiResponse(code = 403, message = "Forbidden - you do not have the necessary permissions to undertake this action", response = ErrorResponse.class) })
    @RequestMapping(value = "/workers/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Person> getWorker(@ApiParam(value = "The ID of the worker",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"personalInfo\" : { \"additionalID\" : \"additionalID\", \"placeOfBirth\" : \"placeOfBirth\", \"nationality\" : \"nationality\", \"visaRequired\" : \"visaRequired\", \"disability\" : \"disability\", \"maidenName\" : \"maidenName\", \"ethnicOrigin\" : \"ethnicOrigin\", \"disabledNo\" : \"disabledNo\", \"maritalStatus\" : \"maritalStatus\" }, \"workLocations\" : { \"homeTrust\" : \"homeTrust\", \"workingTrusts\" : [ \"\", \"\" ] }, \"visas\" : [ { \"number\" : \"number\", \"country\" : \"country\", \"entries\" : \"entries\", \"issuingOffice\" : \"issuingOffice\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"type\" }, { \"number\" : \"number\", \"country\" : \"country\", \"entries\" : \"entries\", \"issuingOffice\" : \"issuingOffice\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"type\" } ], \"availabilities\" : { \"Availability\" : [ \"{}\", \"{}\" ], \"NoBank\" : [ \"{}\", \"{}\" ] }, \"employmentDetails\" : { \"employeeType\" : \"employeeType\", \"dateJoinedNHS\" : \"dateJoinedNHS\", \"hireDetails\" : \"hireDetails\", \"agencies\" : \"agencies\", \"employmentStatus\" : \"employmentStatus\", \"prevEmployer\" : \"prevEmployer\", \"alAccrualPlan\" : \"alAccrualPlan\" }, \"personalPattern\" : { \"duty\" : [ \"{}\", \"{}\" ], \"unavailability\" : [ \"{}\", \"{}\" ] }, \"contracts\" : [ { \"wtdOptOut\" : true, \"salaryAmount\" : 0.8008281904610115, \"staffGroup\" : \"staffGroup\", \"contractType\" : \"contractType\", \"salaryFrequency\" : \"salaryFrequency\", \"grade\" : \"grade\", \"contract\" : \"contract\", \"contractedTime\" : \"contractedTime\", \"defaultUnavailabilityHours\" : \"defaultUnavailabilityHours\", \"payscale\" : \"payscale\" }, { \"wtdOptOut\" : true, \"salaryAmount\" : 0.8008281904610115, \"staffGroup\" : \"staffGroup\", \"contractType\" : \"contractType\", \"salaryFrequency\" : \"salaryFrequency\", \"grade\" : \"grade\", \"contract\" : \"contract\", \"contractedTime\" : \"contractedTime\", \"defaultUnavailabilityHours\" : \"defaultUnavailabilityHours\", \"payscale\" : \"payscale\" } ], \"skills\" : [ { \"skillGroup\" : \"skillGroup\", \"dateGained\" : \"dateGained\", \"cluster\" : \"cluster\", \"notes\" : \"notes\", \"obtainedFromReason\" : \"obtainedFromReason\", \"certificateNumber\" : \"certificateNumber\", \"skill\" : \"skill\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" } }, { \"skillGroup\" : \"skillGroup\", \"dateGained\" : \"dateGained\", \"cluster\" : \"cluster\", \"notes\" : \"notes\", \"obtainedFromReason\" : \"obtainedFromReason\", \"certificateNumber\" : \"certificateNumber\", \"skill\" : \"skill\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" } } ], \"specialties\" : [ { \"notes\" : \"notes\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"tempStaffSpeciality\" : \"tempStaffSpeciality\" }, { \"notes\" : \"notes\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"tempStaffSpeciality\" : \"tempStaffSpeciality\" } ], \"identification\" : { \"middleInitials\" : \"middleInitials\", \"gender\" : \"male\", \"surname\" : \"Smith\", \"knownAs\" : \"knownAs\", \"dateOfBirth\" : \"2000-01-23\", \"title\" : \"Mr\", \"forenames\" : \"['Fred','Jim']\" }, \"workingRestrictions\" : [ { \"hoursOfWork\" : { \"thu\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"tue\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"wed\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"sat\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"fri\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"mon\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"sun\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" } }, \"restrictions\" : { \"maxConsecutiveDaysRequested\" : \"maxConsecutiveDaysRequested\", \"maxOvertimePerWeek\" : \"maxOvertimePerWeek\", \"minBreakBetweenShifts\" : 6.027456183070403, \"notes\" : \"notes\", \"wtdWeekTimeStart\" : \"wtdWeekTimeStart\", \"additionalHoursPerWeek\" : \"additionalHoursPerWeek\", \"maxConsecutiveDays\" : \"maxConsecutiveDays\", \"maxOvertimePerDay\" : \"maxOvertimePerDay\", \"wtdWeekDayStart\" : \"wtdWeekDayStart\", \"maxShiftsPerWeek\" : \"maxShiftsPerWeek\", \"wtdDayStart\" : \"wtdDayStart\", \"maxDurationPerShift\" : \"maxDurationPerShift\", \"maxOvertimePerCalendarMonth\" : \"maxOvertimePerCalendarMonth\", \"effectiveFrom\" : \"effectiveFrom\", \"maxWorkTimePerDay\" : \"maxWorkTimePerDay\", \"daysPerWeek\" : \"daysPerWeek\", \"maxDaysPerWeek\" : \"maxDaysPerWeek\" }, \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"title\" : \"title\", \"defaultLeaveHours\" : { \"fridayTime\" : \"fridayTime\", \"useWorkingDay\" : \"useWorkingDay\", \"tuesdayTime\" : \"tuesdayTime\", \"mondayTime\" : \"mondayTime\", \"sundayTime\" : \"sundayTime\", \"saturdayTime\" : \"saturdayTime\", \"wednesdayTime\" : \"wednesdayTime\" } }, { \"hoursOfWork\" : { \"thu\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"tue\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"wed\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"sat\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"fri\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"mon\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" }, \"sun\" : { \"from\" : \"01:00\", \"to\" : \"08:30\" } }, \"restrictions\" : { \"maxConsecutiveDaysRequested\" : \"maxConsecutiveDaysRequested\", \"maxOvertimePerWeek\" : \"maxOvertimePerWeek\", \"minBreakBetweenShifts\" : 6.027456183070403, \"notes\" : \"notes\", \"wtdWeekTimeStart\" : \"wtdWeekTimeStart\", \"additionalHoursPerWeek\" : \"additionalHoursPerWeek\", \"maxConsecutiveDays\" : \"maxConsecutiveDays\", \"maxOvertimePerDay\" : \"maxOvertimePerDay\", \"wtdWeekDayStart\" : \"wtdWeekDayStart\", \"maxShiftsPerWeek\" : \"maxShiftsPerWeek\", \"wtdDayStart\" : \"wtdDayStart\", \"maxDurationPerShift\" : \"maxDurationPerShift\", \"maxOvertimePerCalendarMonth\" : \"maxOvertimePerCalendarMonth\", \"effectiveFrom\" : \"effectiveFrom\", \"maxWorkTimePerDay\" : \"maxWorkTimePerDay\", \"daysPerWeek\" : \"daysPerWeek\", \"maxDaysPerWeek\" : \"maxDaysPerWeek\" }, \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"title\" : \"title\", \"defaultLeaveHours\" : { \"fridayTime\" : \"fridayTime\", \"useWorkingDay\" : \"useWorkingDay\", \"tuesdayTime\" : \"tuesdayTime\", \"mondayTime\" : \"mondayTime\", \"sundayTime\" : \"sundayTime\", \"saturdayTime\" : \"saturdayTime\", \"wednesdayTime\" : \"wednesdayTime\" } } ], \"ids\" : [ { \"namespace\" : \"NI\", \"id\" : \"QQ123456C\" }, { \"namespace\" : \"NI\", \"id\" : \"QQ123456C\" } ], \"postings\" : [ { \"unit\" : \"unit\", \"post\" : \"post\", \"isPrimary\" : true, \"team\" : \"team\", \"assignmentNumber\" : \"assignmentNumber\", \"postingType\" : \"postingType\" }, { \"unit\" : \"unit\", \"post\" : \"post\", \"isPrimary\" : true, \"team\" : \"team\", \"assignmentNumber\" : \"assignmentNumber\", \"postingType\" : \"postingType\" } ], \"attributes\" : [ { \"name\" : \"name\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"value\" : \"value\" }, { \"name\" : \"name\", \"validity\" : { \"from\" : \"2000-01-23T04:56:07.000+00:00\", \"to\" : \"2000-01-23T04:56:07.000+00:00\" }, \"value\" : \"value\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "onboardWorkerToTrust", notes = "On-board a worker to a particular trust. In scenarios where worker data is being provided by a 3rd party Human Resources (or equivalent) system, it may be necessary to 'on-board' that worker into a particular trust so that they may be selected. Note that in external bank scenarios this is not required, since the trust on-boarding request is implicit within the worker offer.  ", authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The worker has been on-boarded successfully"),
        @ApiResponse(code = 400, message = "One or more errors have occurred when attempting to process the provided data", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - you do not have the necessary permissions to undertake this action", response = ErrorResponse.class),
        @ApiResponse(code = 202, message = "The request has been accepted, and will be processed in due course.", response = AsyncResponse.class) })
    @RequestMapping(value = "/workers/{id}/onboardToTrust",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> onboardWorkerToTrust(@ApiParam(value = "The Allocate Worker ID",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject inlineObject) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registerWorker", notes = "Provide worker details for inclusion into the Allocate ecosystem.  The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier.  This may entail an on-boarding process, so the final response may require human interaction before it can be completed.  Where there is a source system in common, such as HealthSuite and a Bank system both using ESR as a source of worker data, a person record containing an ESR trust-relative Staff Number is likely to be sufficient. ", response = WorkerRegistrationResponse.class, authorizations = {
        @Authorization(value = "jwt")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The worker has been registered successfully", response = WorkerRegistrationResponse.class),
        @ApiResponse(code = 400, message = "One or more errors have occurred when attempting to process the provided data", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden - you do not have the necessary permissions to undertake this action", response = ErrorResponse.class),
        @ApiResponse(code = 202, message = "The worker data has been accepted, and will be processed in due course.", response = AsyncResponse.class) })
    @RequestMapping(value = "/workers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<WorkerRegistrationResponse> registerWorker(@ApiParam(value = "Worker information" ,required=true )  @Valid @RequestBody Person person) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"workerId\" : \"3B78B5C3-07B3-4DC6-8A2A-7D85153869FC\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

/* 
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// WorkingRestrictionDefaultLeaveHours
    /// </summary>
    [DataContract]
    public partial class WorkingRestrictionDefaultLeaveHours :  IEquatable<WorkingRestrictionDefaultLeaveHours>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkingRestrictionDefaultLeaveHours" /> class.
        /// </summary>
        /// <param name="useWorkingDay">useWorkingDay.</param>
        /// <param name="mondayTime">mondayTime.</param>
        /// <param name="tuesdayTime">tuesdayTime.</param>
        /// <param name="wednesdayTime">wednesdayTime.</param>
        /// <param name="fridayTime">fridayTime.</param>
        /// <param name="saturdayTime">saturdayTime.</param>
        /// <param name="sundayTime">sundayTime.</param>
        public WorkingRestrictionDefaultLeaveHours(string useWorkingDay = default(string), string mondayTime = default(string), string tuesdayTime = default(string), string wednesdayTime = default(string), string fridayTime = default(string), string saturdayTime = default(string), string sundayTime = default(string))
        {
            this.UseWorkingDay = useWorkingDay;
            this.MondayTime = mondayTime;
            this.TuesdayTime = tuesdayTime;
            this.WednesdayTime = wednesdayTime;
            this.FridayTime = fridayTime;
            this.SaturdayTime = saturdayTime;
            this.SundayTime = sundayTime;
        }
        
        /// <summary>
        /// Gets or Sets UseWorkingDay
        /// </summary>
        [DataMember(Name="useWorkingDay", EmitDefaultValue=false)]
        public string UseWorkingDay { get; set; }

        /// <summary>
        /// Gets or Sets MondayTime
        /// </summary>
        [DataMember(Name="mondayTime", EmitDefaultValue=false)]
        public string MondayTime { get; set; }

        /// <summary>
        /// Gets or Sets TuesdayTime
        /// </summary>
        [DataMember(Name="tuesdayTime", EmitDefaultValue=false)]
        public string TuesdayTime { get; set; }

        /// <summary>
        /// Gets or Sets WednesdayTime
        /// </summary>
        [DataMember(Name="wednesdayTime", EmitDefaultValue=false)]
        public string WednesdayTime { get; set; }

        /// <summary>
        /// Gets or Sets FridayTime
        /// </summary>
        [DataMember(Name="fridayTime", EmitDefaultValue=false)]
        public string FridayTime { get; set; }

        /// <summary>
        /// Gets or Sets SaturdayTime
        /// </summary>
        [DataMember(Name="saturdayTime", EmitDefaultValue=false)]
        public string SaturdayTime { get; set; }

        /// <summary>
        /// Gets or Sets SundayTime
        /// </summary>
        [DataMember(Name="sundayTime", EmitDefaultValue=false)]
        public string SundayTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkingRestrictionDefaultLeaveHours {\n");
            sb.Append("  UseWorkingDay: ").Append(UseWorkingDay).Append("\n");
            sb.Append("  MondayTime: ").Append(MondayTime).Append("\n");
            sb.Append("  TuesdayTime: ").Append(TuesdayTime).Append("\n");
            sb.Append("  WednesdayTime: ").Append(WednesdayTime).Append("\n");
            sb.Append("  FridayTime: ").Append(FridayTime).Append("\n");
            sb.Append("  SaturdayTime: ").Append(SaturdayTime).Append("\n");
            sb.Append("  SundayTime: ").Append(SundayTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkingRestrictionDefaultLeaveHours);
        }

        /// <summary>
        /// Returns true if WorkingRestrictionDefaultLeaveHours instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkingRestrictionDefaultLeaveHours to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkingRestrictionDefaultLeaveHours input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UseWorkingDay == input.UseWorkingDay ||
                    (this.UseWorkingDay != null &&
                    this.UseWorkingDay.Equals(input.UseWorkingDay))
                ) && 
                (
                    this.MondayTime == input.MondayTime ||
                    (this.MondayTime != null &&
                    this.MondayTime.Equals(input.MondayTime))
                ) && 
                (
                    this.TuesdayTime == input.TuesdayTime ||
                    (this.TuesdayTime != null &&
                    this.TuesdayTime.Equals(input.TuesdayTime))
                ) && 
                (
                    this.WednesdayTime == input.WednesdayTime ||
                    (this.WednesdayTime != null &&
                    this.WednesdayTime.Equals(input.WednesdayTime))
                ) && 
                (
                    this.FridayTime == input.FridayTime ||
                    (this.FridayTime != null &&
                    this.FridayTime.Equals(input.FridayTime))
                ) && 
                (
                    this.SaturdayTime == input.SaturdayTime ||
                    (this.SaturdayTime != null &&
                    this.SaturdayTime.Equals(input.SaturdayTime))
                ) && 
                (
                    this.SundayTime == input.SundayTime ||
                    (this.SundayTime != null &&
                    this.SundayTime.Equals(input.SundayTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UseWorkingDay != null)
                    hashCode = hashCode * 59 + this.UseWorkingDay.GetHashCode();
                if (this.MondayTime != null)
                    hashCode = hashCode * 59 + this.MondayTime.GetHashCode();
                if (this.TuesdayTime != null)
                    hashCode = hashCode * 59 + this.TuesdayTime.GetHashCode();
                if (this.WednesdayTime != null)
                    hashCode = hashCode * 59 + this.WednesdayTime.GetHashCode();
                if (this.FridayTime != null)
                    hashCode = hashCode * 59 + this.FridayTime.GetHashCode();
                if (this.SaturdayTime != null)
                    hashCode = hashCode * 59 + this.SaturdayTime.GetHashCode();
                if (this.SundayTime != null)
                    hashCode = hashCode * 59 + this.SundayTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

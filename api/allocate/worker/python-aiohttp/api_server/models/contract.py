# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server import util


class Contract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, staff_group: str=None, grade: str=None, contract: str=None, payscale: str=None, contract_type: str=None, contracted_time: str=None, default_unavailability_hours: str=None, wtd_opt_out: bool=None, salary_frequency: str=None, salary_amount: float=None):
        """Contract - a model defined in OpenAPI

        :param staff_group: The staff_group of this Contract.
        :param grade: The grade of this Contract.
        :param contract: The contract of this Contract.
        :param payscale: The payscale of this Contract.
        :param contract_type: The contract_type of this Contract.
        :param contracted_time: The contracted_time of this Contract.
        :param default_unavailability_hours: The default_unavailability_hours of this Contract.
        :param wtd_opt_out: The wtd_opt_out of this Contract.
        :param salary_frequency: The salary_frequency of this Contract.
        :param salary_amount: The salary_amount of this Contract.
        """
        self.openapi_types = {
            'staff_group': str,
            'grade': str,
            'contract': str,
            'payscale': str,
            'contract_type': str,
            'contracted_time': str,
            'default_unavailability_hours': str,
            'wtd_opt_out': bool,
            'salary_frequency': str,
            'salary_amount': float
        }

        self.attribute_map = {
            'staff_group': 'staffGroup',
            'grade': 'grade',
            'contract': 'contract',
            'payscale': 'payscale',
            'contract_type': 'contractType',
            'contracted_time': 'contractedTime',
            'default_unavailability_hours': 'defaultUnavailabilityHours',
            'wtd_opt_out': 'wtdOptOut',
            'salary_frequency': 'salaryFrequency',
            'salary_amount': 'salaryAmount'
        }

        self._staff_group = staff_group
        self._grade = grade
        self._contract = contract
        self._payscale = payscale
        self._contract_type = contract_type
        self._contracted_time = contracted_time
        self._default_unavailability_hours = default_unavailability_hours
        self._wtd_opt_out = wtd_opt_out
        self._salary_frequency = salary_frequency
        self._salary_amount = salary_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contract of this Contract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def staff_group(self):
        """Gets the staff_group of this Contract.


        :return: The staff_group of this Contract.
        :rtype: str
        """
        return self._staff_group

    @staff_group.setter
    def staff_group(self, staff_group):
        """Sets the staff_group of this Contract.


        :param staff_group: The staff_group of this Contract.
        :type staff_group: str
        """

        self._staff_group = staff_group

    @property
    def grade(self):
        """Gets the grade of this Contract.


        :return: The grade of this Contract.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this Contract.


        :param grade: The grade of this Contract.
        :type grade: str
        """
        if grade is None:
            raise ValueError("Invalid value for `grade`, must not be `None`")

        self._grade = grade

    @property
    def contract(self):
        """Gets the contract of this Contract.


        :return: The contract of this Contract.
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this Contract.


        :param contract: The contract of this Contract.
        :type contract: str
        """
        if contract is None:
            raise ValueError("Invalid value for `contract`, must not be `None`")

        self._contract = contract

    @property
    def payscale(self):
        """Gets the payscale of this Contract.


        :return: The payscale of this Contract.
        :rtype: str
        """
        return self._payscale

    @payscale.setter
    def payscale(self, payscale):
        """Sets the payscale of this Contract.


        :param payscale: The payscale of this Contract.
        :type payscale: str
        """

        self._payscale = payscale

    @property
    def contract_type(self):
        """Gets the contract_type of this Contract.


        :return: The contract_type of this Contract.
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this Contract.


        :param contract_type: The contract_type of this Contract.
        :type contract_type: str
        """

        self._contract_type = contract_type

    @property
    def contracted_time(self):
        """Gets the contracted_time of this Contract.


        :return: The contracted_time of this Contract.
        :rtype: str
        """
        return self._contracted_time

    @contracted_time.setter
    def contracted_time(self, contracted_time):
        """Sets the contracted_time of this Contract.


        :param contracted_time: The contracted_time of this Contract.
        :type contracted_time: str
        """
        if contracted_time is None:
            raise ValueError("Invalid value for `contracted_time`, must not be `None`")

        self._contracted_time = contracted_time

    @property
    def default_unavailability_hours(self):
        """Gets the default_unavailability_hours of this Contract.


        :return: The default_unavailability_hours of this Contract.
        :rtype: str
        """
        return self._default_unavailability_hours

    @default_unavailability_hours.setter
    def default_unavailability_hours(self, default_unavailability_hours):
        """Sets the default_unavailability_hours of this Contract.


        :param default_unavailability_hours: The default_unavailability_hours of this Contract.
        :type default_unavailability_hours: str
        """

        self._default_unavailability_hours = default_unavailability_hours

    @property
    def wtd_opt_out(self):
        """Gets the wtd_opt_out of this Contract.


        :return: The wtd_opt_out of this Contract.
        :rtype: bool
        """
        return self._wtd_opt_out

    @wtd_opt_out.setter
    def wtd_opt_out(self, wtd_opt_out):
        """Sets the wtd_opt_out of this Contract.


        :param wtd_opt_out: The wtd_opt_out of this Contract.
        :type wtd_opt_out: bool
        """

        self._wtd_opt_out = wtd_opt_out

    @property
    def salary_frequency(self):
        """Gets the salary_frequency of this Contract.


        :return: The salary_frequency of this Contract.
        :rtype: str
        """
        return self._salary_frequency

    @salary_frequency.setter
    def salary_frequency(self, salary_frequency):
        """Sets the salary_frequency of this Contract.


        :param salary_frequency: The salary_frequency of this Contract.
        :type salary_frequency: str
        """

        self._salary_frequency = salary_frequency

    @property
    def salary_amount(self):
        """Gets the salary_amount of this Contract.


        :return: The salary_amount of this Contract.
        :rtype: float
        """
        return self._salary_amount

    @salary_amount.setter
    def salary_amount(self, salary_amount):
        """Sets the salary_amount of this Contract.


        :param salary_amount: The salary_amount of this Contract.
        :type salary_amount: float
        """

        self._salary_amount = salary_amount

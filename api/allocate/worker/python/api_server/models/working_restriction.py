# coding: utf-8

"""
    Worker API and Events

         ## API and events for providing workers.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class WorkingRestriction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'validity': 'DateSpan',
        'hours_of_work': 'WorkingRestrictionHoursOfWork',
        'default_leave_hours': 'WorkingRestrictionDefaultLeaveHours',
        'restrictions': 'WorkingRestrictionRestrictions'
    }

    attribute_map = {
        'title': 'title',
        'validity': 'validity',
        'hours_of_work': 'hoursOfWork',
        'default_leave_hours': 'defaultLeaveHours',
        'restrictions': 'restrictions'
    }

    def __init__(self, title=None, validity=None, hours_of_work=None, default_leave_hours=None, restrictions=None, local_vars_configuration=None):  # noqa: E501
        """WorkingRestriction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._validity = None
        self._hours_of_work = None
        self._default_leave_hours = None
        self._restrictions = None
        self.discriminator = None

        self.title = title
        self.validity = validity
        self.hours_of_work = hours_of_work
        self.default_leave_hours = default_leave_hours
        self.restrictions = restrictions

    @property
    def title(self):
        """Gets the title of this WorkingRestriction.  # noqa: E501


        :return: The title of this WorkingRestriction.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WorkingRestriction.


        :param title: The title of this WorkingRestriction.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def validity(self):
        """Gets the validity of this WorkingRestriction.  # noqa: E501


        :return: The validity of this WorkingRestriction.  # noqa: E501
        :rtype: DateSpan
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this WorkingRestriction.


        :param validity: The validity of this WorkingRestriction.  # noqa: E501
        :type: DateSpan
        """
        if self.local_vars_configuration.client_side_validation and validity is None:  # noqa: E501
            raise ValueError("Invalid value for `validity`, must not be `None`")  # noqa: E501

        self._validity = validity

    @property
    def hours_of_work(self):
        """Gets the hours_of_work of this WorkingRestriction.  # noqa: E501


        :return: The hours_of_work of this WorkingRestriction.  # noqa: E501
        :rtype: WorkingRestrictionHoursOfWork
        """
        return self._hours_of_work

    @hours_of_work.setter
    def hours_of_work(self, hours_of_work):
        """Sets the hours_of_work of this WorkingRestriction.


        :param hours_of_work: The hours_of_work of this WorkingRestriction.  # noqa: E501
        :type: WorkingRestrictionHoursOfWork
        """
        if self.local_vars_configuration.client_side_validation and hours_of_work is None:  # noqa: E501
            raise ValueError("Invalid value for `hours_of_work`, must not be `None`")  # noqa: E501

        self._hours_of_work = hours_of_work

    @property
    def default_leave_hours(self):
        """Gets the default_leave_hours of this WorkingRestriction.  # noqa: E501


        :return: The default_leave_hours of this WorkingRestriction.  # noqa: E501
        :rtype: WorkingRestrictionDefaultLeaveHours
        """
        return self._default_leave_hours

    @default_leave_hours.setter
    def default_leave_hours(self, default_leave_hours):
        """Sets the default_leave_hours of this WorkingRestriction.


        :param default_leave_hours: The default_leave_hours of this WorkingRestriction.  # noqa: E501
        :type: WorkingRestrictionDefaultLeaveHours
        """
        if self.local_vars_configuration.client_side_validation and default_leave_hours is None:  # noqa: E501
            raise ValueError("Invalid value for `default_leave_hours`, must not be `None`")  # noqa: E501

        self._default_leave_hours = default_leave_hours

    @property
    def restrictions(self):
        """Gets the restrictions of this WorkingRestriction.  # noqa: E501


        :return: The restrictions of this WorkingRestriction.  # noqa: E501
        :rtype: WorkingRestrictionRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this WorkingRestriction.


        :param restrictions: The restrictions of this WorkingRestriction.  # noqa: E501
        :type: WorkingRestrictionRestrictions
        """
        if self.local_vars_configuration.client_side_validation and restrictions is None:  # noqa: E501
            raise ValueError("Invalid value for `restrictions`, must not be `None`")  # noqa: E501

        self._restrictions = restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkingRestriction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkingRestriction):
            return True

        return self.to_dict() != other.to_dict()

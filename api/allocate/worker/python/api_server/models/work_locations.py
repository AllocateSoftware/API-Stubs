# coding: utf-8

"""
    Worker API and Events

         ## API and events for providing workers.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class WorkLocations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'home_trust': 'str',
        'working_trusts': 'list[object]'
    }

    attribute_map = {
        'home_trust': 'homeTrust',
        'working_trusts': 'workingTrusts'
    }

    def __init__(self, home_trust=None, working_trusts=None, local_vars_configuration=None):  # noqa: E501
        """WorkLocations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._home_trust = None
        self._working_trusts = None
        self.discriminator = None

        self.home_trust = home_trust
        if working_trusts is not None:
            self.working_trusts = working_trusts

    @property
    def home_trust(self):
        """Gets the home_trust of this WorkLocations.  # noqa: E501

        The identifier for the home trust for this worker  # noqa: E501

        :return: The home_trust of this WorkLocations.  # noqa: E501
        :rtype: str
        """
        return self._home_trust

    @home_trust.setter
    def home_trust(self, home_trust):
        """Sets the home_trust of this WorkLocations.

        The identifier for the home trust for this worker  # noqa: E501

        :param home_trust: The home_trust of this WorkLocations.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and home_trust is None:  # noqa: E501
            raise ValueError("Invalid value for `home_trust`, must not be `None`")  # noqa: E501

        self._home_trust = home_trust

    @property
    def working_trusts(self):
        """Gets the working_trusts of this WorkLocations.  # noqa: E501

        Identifiers for the trusts that the worker may work in (in addition to their home trust)  # noqa: E501

        :return: The working_trusts of this WorkLocations.  # noqa: E501
        :rtype: list[object]
        """
        return self._working_trusts

    @working_trusts.setter
    def working_trusts(self, working_trusts):
        """Sets the working_trusts of this WorkLocations.

        Identifiers for the trusts that the worker may work in (in addition to their home trust)  # noqa: E501

        :param working_trusts: The working_trusts of this WorkLocations.  # noqa: E501
        :type: list[object]
        """

        self._working_trusts = working_trusts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkLocations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkLocations):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Worker API and Events

         ## API and events for providing workers.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class EmploymentDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'employment_status': 'str',
        'employee_type': 'str',
        'hire_details': 'str',
        'date_joined_nhs': 'str',
        'al_accrual_plan': 'str',
        'prev_employer': 'str',
        'agencies': 'str'
    }

    attribute_map = {
        'employment_status': 'employmentStatus',
        'employee_type': 'employeeType',
        'hire_details': 'hireDetails',
        'date_joined_nhs': 'dateJoinedNHS',
        'al_accrual_plan': 'alAccrualPlan',
        'prev_employer': 'prevEmployer',
        'agencies': 'agencies'
    }

    def __init__(self, employment_status=None, employee_type=None, hire_details=None, date_joined_nhs=None, al_accrual_plan=None, prev_employer=None, agencies=None, local_vars_configuration=None):  # noqa: E501
        """EmploymentDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._employment_status = None
        self._employee_type = None
        self._hire_details = None
        self._date_joined_nhs = None
        self._al_accrual_plan = None
        self._prev_employer = None
        self._agencies = None
        self.discriminator = None

        if employment_status is not None:
            self.employment_status = employment_status
        if employee_type is not None:
            self.employee_type = employee_type
        self.hire_details = hire_details
        if date_joined_nhs is not None:
            self.date_joined_nhs = date_joined_nhs
        if al_accrual_plan is not None:
            self.al_accrual_plan = al_accrual_plan
        if prev_employer is not None:
            self.prev_employer = prev_employer
        if agencies is not None:
            self.agencies = agencies

    @property
    def employment_status(self):
        """Gets the employment_status of this EmploymentDetails.  # noqa: E501


        :return: The employment_status of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this EmploymentDetails.


        :param employment_status: The employment_status of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._employment_status = employment_status

    @property
    def employee_type(self):
        """Gets the employee_type of this EmploymentDetails.  # noqa: E501


        :return: The employee_type of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type):
        """Sets the employee_type of this EmploymentDetails.


        :param employee_type: The employee_type of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._employee_type = employee_type

    @property
    def hire_details(self):
        """Gets the hire_details of this EmploymentDetails.  # noqa: E501


        :return: The hire_details of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._hire_details

    @hire_details.setter
    def hire_details(self, hire_details):
        """Sets the hire_details of this EmploymentDetails.


        :param hire_details: The hire_details of this EmploymentDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and hire_details is None:  # noqa: E501
            raise ValueError("Invalid value for `hire_details`, must not be `None`")  # noqa: E501

        self._hire_details = hire_details

    @property
    def date_joined_nhs(self):
        """Gets the date_joined_nhs of this EmploymentDetails.  # noqa: E501


        :return: The date_joined_nhs of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._date_joined_nhs

    @date_joined_nhs.setter
    def date_joined_nhs(self, date_joined_nhs):
        """Sets the date_joined_nhs of this EmploymentDetails.


        :param date_joined_nhs: The date_joined_nhs of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._date_joined_nhs = date_joined_nhs

    @property
    def al_accrual_plan(self):
        """Gets the al_accrual_plan of this EmploymentDetails.  # noqa: E501


        :return: The al_accrual_plan of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._al_accrual_plan

    @al_accrual_plan.setter
    def al_accrual_plan(self, al_accrual_plan):
        """Sets the al_accrual_plan of this EmploymentDetails.


        :param al_accrual_plan: The al_accrual_plan of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._al_accrual_plan = al_accrual_plan

    @property
    def prev_employer(self):
        """Gets the prev_employer of this EmploymentDetails.  # noqa: E501


        :return: The prev_employer of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._prev_employer

    @prev_employer.setter
    def prev_employer(self, prev_employer):
        """Sets the prev_employer of this EmploymentDetails.


        :param prev_employer: The prev_employer of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._prev_employer = prev_employer

    @property
    def agencies(self):
        """Gets the agencies of this EmploymentDetails.  # noqa: E501


        :return: The agencies of this EmploymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._agencies

    @agencies.setter
    def agencies(self, agencies):
        """Sets the agencies of this EmploymentDetails.


        :param agencies: The agencies of this EmploymentDetails.  # noqa: E501
        :type: str
        """

        self._agencies = agencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmploymentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmploymentDetails):
            return True

        return self.to_dict() != other.to_dict()

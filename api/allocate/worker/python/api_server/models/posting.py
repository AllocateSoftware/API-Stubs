# coding: utf-8

"""
    Worker API and Events

         ## API and events for providing workers.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class Posting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'unit': 'str',
        'post': 'str',
        'posting_type': 'str',
        'assignment_number': 'str',
        'team': 'str',
        'is_primary': 'bool'
    }

    attribute_map = {
        'unit': 'unit',
        'post': 'post',
        'posting_type': 'postingType',
        'assignment_number': 'assignmentNumber',
        'team': 'team',
        'is_primary': 'isPrimary'
    }

    def __init__(self, unit=None, post=None, posting_type=None, assignment_number=None, team=None, is_primary=None, local_vars_configuration=None):  # noqa: E501
        """Posting - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._unit = None
        self._post = None
        self._posting_type = None
        self._assignment_number = None
        self._team = None
        self._is_primary = None
        self.discriminator = None

        self.unit = unit
        if post is not None:
            self.post = post
        if posting_type is not None:
            self.posting_type = posting_type
        self.assignment_number = assignment_number
        if team is not None:
            self.team = team
        self.is_primary = is_primary

    @property
    def unit(self):
        """Gets the unit of this Posting.  # noqa: E501


        :return: The unit of this Posting.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Posting.


        :param unit: The unit of this Posting.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and unit is None:  # noqa: E501
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def post(self):
        """Gets the post of this Posting.  # noqa: E501


        :return: The post of this Posting.  # noqa: E501
        :rtype: str
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this Posting.


        :param post: The post of this Posting.  # noqa: E501
        :type: str
        """

        self._post = post

    @property
    def posting_type(self):
        """Gets the posting_type of this Posting.  # noqa: E501


        :return: The posting_type of this Posting.  # noqa: E501
        :rtype: str
        """
        return self._posting_type

    @posting_type.setter
    def posting_type(self, posting_type):
        """Sets the posting_type of this Posting.


        :param posting_type: The posting_type of this Posting.  # noqa: E501
        :type: str
        """

        self._posting_type = posting_type

    @property
    def assignment_number(self):
        """Gets the assignment_number of this Posting.  # noqa: E501


        :return: The assignment_number of this Posting.  # noqa: E501
        :rtype: str
        """
        return self._assignment_number

    @assignment_number.setter
    def assignment_number(self, assignment_number):
        """Sets the assignment_number of this Posting.


        :param assignment_number: The assignment_number of this Posting.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and assignment_number is None:  # noqa: E501
            raise ValueError("Invalid value for `assignment_number`, must not be `None`")  # noqa: E501

        self._assignment_number = assignment_number

    @property
    def team(self):
        """Gets the team of this Posting.  # noqa: E501


        :return: The team of this Posting.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Posting.


        :param team: The team of this Posting.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def is_primary(self):
        """Gets the is_primary of this Posting.  # noqa: E501


        :return: The is_primary of this Posting.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this Posting.


        :param is_primary: The is_primary of this Posting.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_primary is None:  # noqa: E501
            raise ValueError("Invalid value for `is_primary`, must not be `None`")  # noqa: E501

        self._is_primary = is_primary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Posting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Posting):
            return True

        return self.to_dict() != other.to_dict()

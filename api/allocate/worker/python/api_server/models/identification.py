# coding: utf-8

"""
    Worker API and Events

         ## API and events for providing workers.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class Identification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'forenames': 'list[object]',
        'surname': 'str',
        'middle_initials': 'str',
        'known_as': 'str',
        'gender': 'str',
        'date_of_birth': 'date'
    }

    attribute_map = {
        'title': 'title',
        'forenames': 'forenames',
        'surname': 'surname',
        'middle_initials': 'middleInitials',
        'known_as': 'knownAs',
        'gender': 'gender',
        'date_of_birth': 'dateOfBirth'
    }

    def __init__(self, title=None, forenames=None, surname=None, middle_initials=None, known_as=None, gender=None, date_of_birth=None, local_vars_configuration=None):  # noqa: E501
        """Identification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._forenames = None
        self._surname = None
        self._middle_initials = None
        self._known_as = None
        self._gender = None
        self._date_of_birth = None
        self.discriminator = None

        if title is not None:
            self.title = title
        self.forenames = forenames
        self.surname = surname
        if middle_initials is not None:
            self.middle_initials = middle_initials
        if known_as is not None:
            self.known_as = known_as
        if gender is not None:
            self.gender = gender
        self.date_of_birth = date_of_birth

    @property
    def title(self):
        """Gets the title of this Identification.  # noqa: E501


        :return: The title of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Identification.


        :param title: The title of this Identification.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def forenames(self):
        """Gets the forenames of this Identification.  # noqa: E501

        List of forenames for the person  # noqa: E501

        :return: The forenames of this Identification.  # noqa: E501
        :rtype: list[object]
        """
        return self._forenames

    @forenames.setter
    def forenames(self, forenames):
        """Sets the forenames of this Identification.

        List of forenames for the person  # noqa: E501

        :param forenames: The forenames of this Identification.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and forenames is None:  # noqa: E501
            raise ValueError("Invalid value for `forenames`, must not be `None`")  # noqa: E501

        self._forenames = forenames

    @property
    def surname(self):
        """Gets the surname of this Identification.  # noqa: E501

        Surname for the person  # noqa: E501

        :return: The surname of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Identification.

        Surname for the person  # noqa: E501

        :param surname: The surname of this Identification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and surname is None:  # noqa: E501
            raise ValueError("Invalid value for `surname`, must not be `None`")  # noqa: E501

        self._surname = surname

    @property
    def middle_initials(self):
        """Gets the middle_initials of this Identification.  # noqa: E501

        Any middle initials  # noqa: E501

        :return: The middle_initials of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._middle_initials

    @middle_initials.setter
    def middle_initials(self, middle_initials):
        """Sets the middle_initials of this Identification.

        Any middle initials  # noqa: E501

        :param middle_initials: The middle_initials of this Identification.  # noqa: E501
        :type: str
        """

        self._middle_initials = middle_initials

    @property
    def known_as(self):
        """Gets the known_as of this Identification.  # noqa: E501

        Any preferred name  # noqa: E501

        :return: The known_as of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._known_as

    @known_as.setter
    def known_as(self, known_as):
        """Sets the known_as of this Identification.

        Any preferred name  # noqa: E501

        :param known_as: The known_as of this Identification.  # noqa: E501
        :type: str
        """

        self._known_as = known_as

    @property
    def gender(self):
        """Gets the gender of this Identification.  # noqa: E501

        Gender if known  # noqa: E501

        :return: The gender of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Identification.

        Gender if known  # noqa: E501

        :param gender: The gender of this Identification.  # noqa: E501
        :type: str
        """
        allowed_values = ["male", "female", "other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and gender not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Identification.  # noqa: E501


        :return: The date_of_birth of this Identification.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Identification.


        :param date_of_birth: The date_of_birth of this Identification.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and date_of_birth is None:  # noqa: E501
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Identification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Identification):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Worker API and Events

         ## API and events for providing workers.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class WorkingRestrictionDefaultLeaveHours(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'use_working_day': 'str',
        'monday_time': 'str',
        'tuesday_time': 'str',
        'wednesday_time': 'str',
        'friday_time': 'str',
        'saturday_time': 'str',
        'sunday_time': 'str'
    }

    attribute_map = {
        'use_working_day': 'useWorkingDay',
        'monday_time': 'mondayTime',
        'tuesday_time': 'tuesdayTime',
        'wednesday_time': 'wednesdayTime',
        'friday_time': 'fridayTime',
        'saturday_time': 'saturdayTime',
        'sunday_time': 'sundayTime'
    }

    def __init__(self, use_working_day=None, monday_time=None, tuesday_time=None, wednesday_time=None, friday_time=None, saturday_time=None, sunday_time=None, local_vars_configuration=None):  # noqa: E501
        """WorkingRestrictionDefaultLeaveHours - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._use_working_day = None
        self._monday_time = None
        self._tuesday_time = None
        self._wednesday_time = None
        self._friday_time = None
        self._saturday_time = None
        self._sunday_time = None
        self.discriminator = None

        if use_working_day is not None:
            self.use_working_day = use_working_day
        if monday_time is not None:
            self.monday_time = monday_time
        if tuesday_time is not None:
            self.tuesday_time = tuesday_time
        if wednesday_time is not None:
            self.wednesday_time = wednesday_time
        if friday_time is not None:
            self.friday_time = friday_time
        if saturday_time is not None:
            self.saturday_time = saturday_time
        if sunday_time is not None:
            self.sunday_time = sunday_time

    @property
    def use_working_day(self):
        """Gets the use_working_day of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501


        :return: The use_working_day of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :rtype: str
        """
        return self._use_working_day

    @use_working_day.setter
    def use_working_day(self, use_working_day):
        """Sets the use_working_day of this WorkingRestrictionDefaultLeaveHours.


        :param use_working_day: The use_working_day of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :type: str
        """

        self._use_working_day = use_working_day

    @property
    def monday_time(self):
        """Gets the monday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501


        :return: The monday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :rtype: str
        """
        return self._monday_time

    @monday_time.setter
    def monday_time(self, monday_time):
        """Sets the monday_time of this WorkingRestrictionDefaultLeaveHours.


        :param monday_time: The monday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :type: str
        """

        self._monday_time = monday_time

    @property
    def tuesday_time(self):
        """Gets the tuesday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501


        :return: The tuesday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :rtype: str
        """
        return self._tuesday_time

    @tuesday_time.setter
    def tuesday_time(self, tuesday_time):
        """Sets the tuesday_time of this WorkingRestrictionDefaultLeaveHours.


        :param tuesday_time: The tuesday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :type: str
        """

        self._tuesday_time = tuesday_time

    @property
    def wednesday_time(self):
        """Gets the wednesday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501


        :return: The wednesday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :rtype: str
        """
        return self._wednesday_time

    @wednesday_time.setter
    def wednesday_time(self, wednesday_time):
        """Sets the wednesday_time of this WorkingRestrictionDefaultLeaveHours.


        :param wednesday_time: The wednesday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :type: str
        """

        self._wednesday_time = wednesday_time

    @property
    def friday_time(self):
        """Gets the friday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501


        :return: The friday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :rtype: str
        """
        return self._friday_time

    @friday_time.setter
    def friday_time(self, friday_time):
        """Sets the friday_time of this WorkingRestrictionDefaultLeaveHours.


        :param friday_time: The friday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :type: str
        """

        self._friday_time = friday_time

    @property
    def saturday_time(self):
        """Gets the saturday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501


        :return: The saturday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :rtype: str
        """
        return self._saturday_time

    @saturday_time.setter
    def saturday_time(self, saturday_time):
        """Sets the saturday_time of this WorkingRestrictionDefaultLeaveHours.


        :param saturday_time: The saturday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :type: str
        """

        self._saturday_time = saturday_time

    @property
    def sunday_time(self):
        """Gets the sunday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501


        :return: The sunday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :rtype: str
        """
        return self._sunday_time

    @sunday_time.setter
    def sunday_time(self, sunday_time):
        """Sets the sunday_time of this WorkingRestrictionDefaultLeaveHours.


        :param sunday_time: The sunday_time of this WorkingRestrictionDefaultLeaveHours.  # noqa: E501
        :type: str
        """

        self._sunday_time = sunday_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkingRestrictionDefaultLeaveHours):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkingRestrictionDefaultLeaveHours):
            return True

        return self.to_dict() != other.to_dict()

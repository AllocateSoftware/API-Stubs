/*
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ASW.APIServices.Core.Attributes;
using Microsoft.AspNetCore.Authorization;
using ASW.APIServices.Core.Models;

namespace ASW.APIServices.Core.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve worker details from the Allocate ecosystem using the Allocate Worker id. The Allocate Worker id will be issued when registering a worker.  </remarks>
        /// <param name="id">The ID of the worker</param>
        /// <response code="200">Worker successfully found</response>
        /// <response code="404">The worker was not found</response>
        /// <response code="403">Forbidden - you do not have the necessary permissions to undertake this action</response>
        [HttpGet]
        [Route("/api/v1/workers/{id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Person))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        public virtual IActionResult GetWorker([FromRoute][Required]string id)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Person));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"personalInfo\" : {\n    \"additionalID\" : \"additionalID\",\n    \"placeOfBirth\" : \"placeOfBirth\",\n    \"nationality\" : \"nationality\",\n    \"visaRequired\" : \"visaRequired\",\n    \"disability\" : \"disability\",\n    \"maidenName\" : \"maidenName\",\n    \"ethnicOrigin\" : \"ethnicOrigin\",\n    \"disabledNo\" : \"disabledNo\",\n    \"maritalStatus\" : \"maritalStatus\"\n  },\n  \"workLocations\" : {\n    \"homeTrust\" : \"homeTrust\",\n    \"workingTrusts\" : [ \"\", \"\" ]\n  },\n  \"visas\" : [ {\n    \"number\" : \"number\",\n    \"country\" : \"country\",\n    \"entries\" : \"entries\",\n    \"issuingOffice\" : \"issuingOffice\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"type\" : \"type\"\n  }, {\n    \"number\" : \"number\",\n    \"country\" : \"country\",\n    \"entries\" : \"entries\",\n    \"issuingOffice\" : \"issuingOffice\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"type\" : \"type\"\n  } ],\n  \"availabilities\" : {\n    \"Availability\" : [ \"{}\", \"{}\" ],\n    \"NoBank\" : [ \"{}\", \"{}\" ]\n  },\n  \"employmentDetails\" : {\n    \"employeeType\" : \"employeeType\",\n    \"dateJoinedNHS\" : \"dateJoinedNHS\",\n    \"hireDetails\" : \"hireDetails\",\n    \"agencies\" : \"agencies\",\n    \"employmentStatus\" : \"employmentStatus\",\n    \"prevEmployer\" : \"prevEmployer\",\n    \"alAccrualPlan\" : \"alAccrualPlan\"\n  },\n  \"personalPattern\" : {\n    \"duty\" : [ \"{}\", \"{}\" ],\n    \"unavailability\" : [ \"{}\", \"{}\" ]\n  },\n  \"contracts\" : [ {\n    \"wtdOptOut\" : true,\n    \"salaryAmount\" : 0.8008281904610115,\n    \"staffGroup\" : \"staffGroup\",\n    \"contractType\" : \"contractType\",\n    \"salaryFrequency\" : \"salaryFrequency\",\n    \"grade\" : \"grade\",\n    \"contract\" : \"contract\",\n    \"contractedTime\" : \"contractedTime\",\n    \"defaultUnavailabilityHours\" : \"defaultUnavailabilityHours\",\n    \"payscale\" : \"payscale\"\n  }, {\n    \"wtdOptOut\" : true,\n    \"salaryAmount\" : 0.8008281904610115,\n    \"staffGroup\" : \"staffGroup\",\n    \"contractType\" : \"contractType\",\n    \"salaryFrequency\" : \"salaryFrequency\",\n    \"grade\" : \"grade\",\n    \"contract\" : \"contract\",\n    \"contractedTime\" : \"contractedTime\",\n    \"defaultUnavailabilityHours\" : \"defaultUnavailabilityHours\",\n    \"payscale\" : \"payscale\"\n  } ],\n  \"skills\" : [ {\n    \"skillGroup\" : \"skillGroup\",\n    \"dateGained\" : \"dateGained\",\n    \"cluster\" : \"cluster\",\n    \"notes\" : \"notes\",\n    \"obtainedFromReason\" : \"obtainedFromReason\",\n    \"certificateNumber\" : \"certificateNumber\",\n    \"skill\" : \"skill\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    }\n  }, {\n    \"skillGroup\" : \"skillGroup\",\n    \"dateGained\" : \"dateGained\",\n    \"cluster\" : \"cluster\",\n    \"notes\" : \"notes\",\n    \"obtainedFromReason\" : \"obtainedFromReason\",\n    \"certificateNumber\" : \"certificateNumber\",\n    \"skill\" : \"skill\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    }\n  } ],\n  \"specialties\" : [ {\n    \"notes\" : \"notes\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"tempStaffSpeciality\" : \"tempStaffSpeciality\"\n  }, {\n    \"notes\" : \"notes\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"tempStaffSpeciality\" : \"tempStaffSpeciality\"\n  } ],\n  \"identification\" : {\n    \"middleInitials\" : \"middleInitials\",\n    \"gender\" : \"male\",\n    \"surname\" : \"Smith\",\n    \"knownAs\" : \"knownAs\",\n    \"dateOfBirth\" : \"2000-01-23\",\n    \"title\" : \"Mr\",\n    \"forenames\" : \"['Fred','Jim']\"\n  },\n  \"workingRestrictions\" : [ {\n    \"hoursOfWork\" : {\n      \"thu\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"tue\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"wed\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"sat\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"fri\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"mon\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"sun\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      }\n    },\n    \"restrictions\" : {\n      \"maxConsecutiveDaysRequested\" : \"maxConsecutiveDaysRequested\",\n      \"maxOvertimePerWeek\" : \"maxOvertimePerWeek\",\n      \"minBreakBetweenShifts\" : 6.027456183070403,\n      \"notes\" : \"notes\",\n      \"wtdWeekTimeStart\" : \"wtdWeekTimeStart\",\n      \"additionalHoursPerWeek\" : \"additionalHoursPerWeek\",\n      \"maxConsecutiveDays\" : \"maxConsecutiveDays\",\n      \"maxOvertimePerDay\" : \"maxOvertimePerDay\",\n      \"wtdWeekDayStart\" : \"wtdWeekDayStart\",\n      \"maxShiftsPerWeek\" : \"maxShiftsPerWeek\",\n      \"wtdDayStart\" : \"wtdDayStart\",\n      \"maxDurationPerShift\" : \"maxDurationPerShift\",\n      \"maxOvertimePerCalendarMonth\" : \"maxOvertimePerCalendarMonth\",\n      \"effectiveFrom\" : \"effectiveFrom\",\n      \"maxWorkTimePerDay\" : \"maxWorkTimePerDay\",\n      \"daysPerWeek\" : \"daysPerWeek\",\n      \"maxDaysPerWeek\" : \"maxDaysPerWeek\"\n    },\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"title\" : \"title\",\n    \"defaultLeaveHours\" : {\n      \"fridayTime\" : \"fridayTime\",\n      \"useWorkingDay\" : \"useWorkingDay\",\n      \"tuesdayTime\" : \"tuesdayTime\",\n      \"mondayTime\" : \"mondayTime\",\n      \"sundayTime\" : \"sundayTime\",\n      \"saturdayTime\" : \"saturdayTime\",\n      \"wednesdayTime\" : \"wednesdayTime\"\n    }\n  }, {\n    \"hoursOfWork\" : {\n      \"thu\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"tue\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"wed\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"sat\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"fri\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"mon\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      },\n      \"sun\" : {\n        \"from\" : \"01:00\",\n        \"to\" : \"08:30\"\n      }\n    },\n    \"restrictions\" : {\n      \"maxConsecutiveDaysRequested\" : \"maxConsecutiveDaysRequested\",\n      \"maxOvertimePerWeek\" : \"maxOvertimePerWeek\",\n      \"minBreakBetweenShifts\" : 6.027456183070403,\n      \"notes\" : \"notes\",\n      \"wtdWeekTimeStart\" : \"wtdWeekTimeStart\",\n      \"additionalHoursPerWeek\" : \"additionalHoursPerWeek\",\n      \"maxConsecutiveDays\" : \"maxConsecutiveDays\",\n      \"maxOvertimePerDay\" : \"maxOvertimePerDay\",\n      \"wtdWeekDayStart\" : \"wtdWeekDayStart\",\n      \"maxShiftsPerWeek\" : \"maxShiftsPerWeek\",\n      \"wtdDayStart\" : \"wtdDayStart\",\n      \"maxDurationPerShift\" : \"maxDurationPerShift\",\n      \"maxOvertimePerCalendarMonth\" : \"maxOvertimePerCalendarMonth\",\n      \"effectiveFrom\" : \"effectiveFrom\",\n      \"maxWorkTimePerDay\" : \"maxWorkTimePerDay\",\n      \"daysPerWeek\" : \"daysPerWeek\",\n      \"maxDaysPerWeek\" : \"maxDaysPerWeek\"\n    },\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"title\" : \"title\",\n    \"defaultLeaveHours\" : {\n      \"fridayTime\" : \"fridayTime\",\n      \"useWorkingDay\" : \"useWorkingDay\",\n      \"tuesdayTime\" : \"tuesdayTime\",\n      \"mondayTime\" : \"mondayTime\",\n      \"sundayTime\" : \"sundayTime\",\n      \"saturdayTime\" : \"saturdayTime\",\n      \"wednesdayTime\" : \"wednesdayTime\"\n    }\n  } ],\n  \"ids\" : [ {\n    \"namespace\" : \"NI\",\n    \"id\" : \"QQ123456C\"\n  }, {\n    \"namespace\" : \"NI\",\n    \"id\" : \"QQ123456C\"\n  } ],\n  \"postings\" : [ {\n    \"unit\" : \"unit\",\n    \"post\" : \"post\",\n    \"isPrimary\" : true,\n    \"team\" : \"team\",\n    \"assignmentNumber\" : \"assignmentNumber\",\n    \"postingType\" : \"postingType\"\n  }, {\n    \"unit\" : \"unit\",\n    \"post\" : \"post\",\n    \"isPrimary\" : true,\n    \"team\" : \"team\",\n    \"assignmentNumber\" : \"assignmentNumber\",\n    \"postingType\" : \"postingType\"\n  } ],\n  \"attributes\" : [ {\n    \"name\" : \"name\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"value\" : \"value\"\n  }, {\n    \"name\" : \"name\",\n    \"validity\" : {\n      \"from\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"to\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"value\" : \"value\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Person>(exampleJson)
            : default(Person);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Provide worker details for inclusion into the Allocate ecosystem.  The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier.  This may entail an on-boarding process, so the final response may require human interaction before it can be completed.  Where there is a source system in common, such as HealthSuite and a Bank system both using ESR as a source of worker data, a person record containing an ESR trust-relative Staff Number is likely to be sufficient. </remarks>
        /// <param name="person">Worker information</param>
        /// <response code="200">The worker has been registered successfully</response>
        /// <response code="400">One or more errors have occurred when attempting to process the provided data</response>
        /// <response code="403">Forbidden - you do not have the necessary permissions to undertake this action</response>
        /// <response code="202">The worker data has been accepted, and will be processed in due course.</response>
        [HttpPost]
        [Route("/api/v1/workers")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(WorkerRegistrationResponse))]
        [ProducesResponseType(statusCode: 400, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 403, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 202, type: typeof(AsyncResponse))]
        public virtual IActionResult RegisterWorker([FromBody]Person person)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkerRegistrationResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(AsyncResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"workerId\" : \"3B78B5C3-07B3-4DC6-8A2A-7D85153869FC\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkerRegistrationResponse>(exampleJson)
            : default(WorkerRegistrationResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

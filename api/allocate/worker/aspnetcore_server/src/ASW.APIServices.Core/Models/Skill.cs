/*
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Skill : IEquatable<Skill>
    { 
        /// <summary>
        /// Gets or Sets SkillGroup
        /// </summary>
        [DataMember(Name="skillGroup", EmitDefaultValue=false)]
        public string SkillGroup { get; set; }

        /// <summary>
        /// Gets or Sets Cluster
        /// </summary>
        [DataMember(Name="cluster", EmitDefaultValue=false)]
        public string Cluster { get; set; }

        /// <summary>
        /// Gets or Sets _Skill
        /// </summary>
        [DataMember(Name="skill", EmitDefaultValue=false)]
        public string _Skill { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [Required]
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public DateSpan Validity { get; set; }

        /// <summary>
        /// Gets or Sets DateGained
        /// </summary>
        [DataMember(Name="dateGained", EmitDefaultValue=false)]
        public string DateGained { get; set; }

        /// <summary>
        /// Gets or Sets ObtainedFromReason
        /// </summary>
        [DataMember(Name="obtainedFromReason", EmitDefaultValue=false)]
        public string ObtainedFromReason { get; set; }

        /// <summary>
        /// Gets or Sets CertificateNumber
        /// </summary>
        [DataMember(Name="certificateNumber", EmitDefaultValue=false)]
        public string CertificateNumber { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Skill {\n");
            sb.Append("  SkillGroup: ").Append(SkillGroup).Append("\n");
            sb.Append("  Cluster: ").Append(Cluster).Append("\n");
            sb.Append("  _Skill: ").Append(_Skill).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  DateGained: ").Append(DateGained).Append("\n");
            sb.Append("  ObtainedFromReason: ").Append(ObtainedFromReason).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Skill)obj);
        }

        /// <summary>
        /// Returns true if Skill instances are equal
        /// </summary>
        /// <param name="other">Instance of Skill to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Skill other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SkillGroup == other.SkillGroup ||
                    SkillGroup != null &&
                    SkillGroup.Equals(other.SkillGroup)
                ) && 
                (
                    Cluster == other.Cluster ||
                    Cluster != null &&
                    Cluster.Equals(other.Cluster)
                ) && 
                (
                    _Skill == other._Skill ||
                    _Skill != null &&
                    _Skill.Equals(other._Skill)
                ) && 
                (
                    Validity == other.Validity ||
                    Validity != null &&
                    Validity.Equals(other.Validity)
                ) && 
                (
                    DateGained == other.DateGained ||
                    DateGained != null &&
                    DateGained.Equals(other.DateGained)
                ) && 
                (
                    ObtainedFromReason == other.ObtainedFromReason ||
                    ObtainedFromReason != null &&
                    ObtainedFromReason.Equals(other.ObtainedFromReason)
                ) && 
                (
                    CertificateNumber == other.CertificateNumber ||
                    CertificateNumber != null &&
                    CertificateNumber.Equals(other.CertificateNumber)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SkillGroup != null)
                    hashCode = hashCode * 59 + SkillGroup.GetHashCode();
                    if (Cluster != null)
                    hashCode = hashCode * 59 + Cluster.GetHashCode();
                    if (_Skill != null)
                    hashCode = hashCode * 59 + _Skill.GetHashCode();
                    if (Validity != null)
                    hashCode = hashCode * 59 + Validity.GetHashCode();
                    if (DateGained != null)
                    hashCode = hashCode * 59 + DateGained.GetHashCode();
                    if (ObtainedFromReason != null)
                    hashCode = hashCode * 59 + ObtainedFromReason.GetHashCode();
                    if (CertificateNumber != null)
                    hashCode = hashCode * 59 + CertificateNumber.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Skill left, Skill right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Skill left, Skill right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Contract : IEquatable<Contract>
    { 
        /// <summary>
        /// Gets or Sets StaffGroup
        /// </summary>
        [DataMember(Name="staffGroup", EmitDefaultValue=false)]
        public string StaffGroup { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [Required]
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or Sets _Contract
        /// </summary>
        [Required]
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public string _Contract { get; set; }

        /// <summary>
        /// Gets or Sets Payscale
        /// </summary>
        [DataMember(Name="payscale", EmitDefaultValue=false)]
        public string Payscale { get; set; }

        /// <summary>
        /// Gets or Sets ContractType
        /// </summary>
        [DataMember(Name="contractType", EmitDefaultValue=false)]
        public string ContractType { get; set; }

        /// <summary>
        /// Gets or Sets ContractedTime
        /// </summary>
        [Required]
        [DataMember(Name="contractedTime", EmitDefaultValue=false)]
        public string ContractedTime { get; set; }

        /// <summary>
        /// Gets or Sets DefaultUnavailabilityHours
        /// </summary>
        [DataMember(Name="defaultUnavailabilityHours", EmitDefaultValue=false)]
        public string DefaultUnavailabilityHours { get; set; }

        /// <summary>
        /// Gets or Sets WtdOptOut
        /// </summary>
        [DataMember(Name="wtdOptOut", EmitDefaultValue=false)]
        public bool WtdOptOut { get; set; }

        /// <summary>
        /// Gets or Sets SalaryFrequency
        /// </summary>
        [DataMember(Name="salaryFrequency", EmitDefaultValue=false)]
        public string SalaryFrequency { get; set; }

        /// <summary>
        /// Gets or Sets SalaryAmount
        /// </summary>
        [DataMember(Name="salaryAmount", EmitDefaultValue=false)]
        public decimal SalaryAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contract {\n");
            sb.Append("  StaffGroup: ").Append(StaffGroup).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  _Contract: ").Append(_Contract).Append("\n");
            sb.Append("  Payscale: ").Append(Payscale).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  ContractedTime: ").Append(ContractedTime).Append("\n");
            sb.Append("  DefaultUnavailabilityHours: ").Append(DefaultUnavailabilityHours).Append("\n");
            sb.Append("  WtdOptOut: ").Append(WtdOptOut).Append("\n");
            sb.Append("  SalaryFrequency: ").Append(SalaryFrequency).Append("\n");
            sb.Append("  SalaryAmount: ").Append(SalaryAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Contract)obj);
        }

        /// <summary>
        /// Returns true if Contract instances are equal
        /// </summary>
        /// <param name="other">Instance of Contract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contract other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StaffGroup == other.StaffGroup ||
                    StaffGroup != null &&
                    StaffGroup.Equals(other.StaffGroup)
                ) && 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    _Contract == other._Contract ||
                    _Contract != null &&
                    _Contract.Equals(other._Contract)
                ) && 
                (
                    Payscale == other.Payscale ||
                    Payscale != null &&
                    Payscale.Equals(other.Payscale)
                ) && 
                (
                    ContractType == other.ContractType ||
                    ContractType != null &&
                    ContractType.Equals(other.ContractType)
                ) && 
                (
                    ContractedTime == other.ContractedTime ||
                    ContractedTime != null &&
                    ContractedTime.Equals(other.ContractedTime)
                ) && 
                (
                    DefaultUnavailabilityHours == other.DefaultUnavailabilityHours ||
                    DefaultUnavailabilityHours != null &&
                    DefaultUnavailabilityHours.Equals(other.DefaultUnavailabilityHours)
                ) && 
                (
                    WtdOptOut == other.WtdOptOut ||
                    
                    WtdOptOut.Equals(other.WtdOptOut)
                ) && 
                (
                    SalaryFrequency == other.SalaryFrequency ||
                    SalaryFrequency != null &&
                    SalaryFrequency.Equals(other.SalaryFrequency)
                ) && 
                (
                    SalaryAmount == other.SalaryAmount ||
                    
                    SalaryAmount.Equals(other.SalaryAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StaffGroup != null)
                    hashCode = hashCode * 59 + StaffGroup.GetHashCode();
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    if (_Contract != null)
                    hashCode = hashCode * 59 + _Contract.GetHashCode();
                    if (Payscale != null)
                    hashCode = hashCode * 59 + Payscale.GetHashCode();
                    if (ContractType != null)
                    hashCode = hashCode * 59 + ContractType.GetHashCode();
                    if (ContractedTime != null)
                    hashCode = hashCode * 59 + ContractedTime.GetHashCode();
                    if (DefaultUnavailabilityHours != null)
                    hashCode = hashCode * 59 + DefaultUnavailabilityHours.GetHashCode();
                    
                    hashCode = hashCode * 59 + WtdOptOut.GetHashCode();
                    if (SalaryFrequency != null)
                    hashCode = hashCode * 59 + SalaryFrequency.GetHashCode();
                    
                    hashCode = hashCode * 59 + SalaryAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Contract left, Contract right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Contract left, Contract right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

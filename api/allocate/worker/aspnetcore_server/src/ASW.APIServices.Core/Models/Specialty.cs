/*
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Specialty : IEquatable<Specialty>
    { 
        /// <summary>
        /// Gets or Sets TempStaffSpeciality
        /// </summary>
        [DataMember(Name="tempStaffSpeciality", EmitDefaultValue=false)]
        public string TempStaffSpeciality { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [Required]
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public DateSpan Validity { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Specialty {\n");
            sb.Append("  TempStaffSpeciality: ").Append(TempStaffSpeciality).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Specialty)obj);
        }

        /// <summary>
        /// Returns true if Specialty instances are equal
        /// </summary>
        /// <param name="other">Instance of Specialty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Specialty other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TempStaffSpeciality == other.TempStaffSpeciality ||
                    TempStaffSpeciality != null &&
                    TempStaffSpeciality.Equals(other.TempStaffSpeciality)
                ) && 
                (
                    Validity == other.Validity ||
                    Validity != null &&
                    Validity.Equals(other.Validity)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TempStaffSpeciality != null)
                    hashCode = hashCode * 59 + TempStaffSpeciality.GetHashCode();
                    if (Validity != null)
                    hashCode = hashCode * 59 + Validity.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Specialty left, Specialty right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Specialty left, Specialty right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/* 
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Personally Identifiable Information
    /// </summary>
    [DataContract]
    public partial class Identification :  IEquatable<Identification>, IValidatableObject
    {
        /// <summary>
        /// Gender if known
        /// </summary>
        /// <value>Gender if known</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum Male for value: male
            /// </summary>
            [EnumMember(Value = "male")]
            Male = 1,

            /// <summary>
            /// Enum Female for value: female
            /// </summary>
            [EnumMember(Value = "female")]
            Female = 2,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3

        }

        /// <summary>
        /// Gender if known
        /// </summary>
        /// <value>Gender if known</value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Identification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Identification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Identification" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="forenames">List of forenames for the person (required).</param>
        /// <param name="surname">Surname for the person (required).</param>
        /// <param name="middleInitials">Any middle initials.</param>
        /// <param name="knownAs">Any preferred name.</param>
        /// <param name="gender">Gender if known.</param>
        /// <param name="dateOfBirth">dateOfBirth (required).</param>
        public Identification(string title = default(string), List<Object> forenames = default(List<Object>), string surname = default(string), string middleInitials = default(string), string knownAs = default(string), GenderEnum? gender = default(GenderEnum?), DateTime dateOfBirth = default(DateTime))
        {
            // to ensure "forenames" is required (not null)
            if (forenames == null)
            {
                throw new InvalidDataException("forenames is a required property for Identification and cannot be null");
            }
            else
            {
                this.Forenames = forenames;
            }

            // to ensure "surname" is required (not null)
            if (surname == null)
            {
                throw new InvalidDataException("surname is a required property for Identification and cannot be null");
            }
            else
            {
                this.Surname = surname;
            }

            // to ensure "dateOfBirth" is required (not null)
            if (dateOfBirth == null)
            {
                throw new InvalidDataException("dateOfBirth is a required property for Identification and cannot be null");
            }
            else
            {
                this.DateOfBirth = dateOfBirth;
            }

            this.Title = title;
            this.MiddleInitials = middleInitials;
            this.KnownAs = knownAs;
            this.Gender = gender;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// List of forenames for the person
        /// </summary>
        /// <value>List of forenames for the person</value>
        [DataMember(Name="forenames", EmitDefaultValue=false)]
        public List<Object> Forenames { get; set; }

        /// <summary>
        /// Surname for the person
        /// </summary>
        /// <value>Surname for the person</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Any middle initials
        /// </summary>
        /// <value>Any middle initials</value>
        [DataMember(Name="middleInitials", EmitDefaultValue=false)]
        public string MiddleInitials { get; set; }

        /// <summary>
        /// Any preferred name
        /// </summary>
        /// <value>Any preferred name</value>
        [DataMember(Name="knownAs", EmitDefaultValue=false)]
        public string KnownAs { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Identification {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Forenames: ").Append(Forenames).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  MiddleInitials: ").Append(MiddleInitials).Append("\n");
            sb.Append("  KnownAs: ").Append(KnownAs).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identification);
        }

        /// <summary>
        /// Returns true if Identification instances are equal
        /// </summary>
        /// <param name="input">Instance of Identification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Forenames == input.Forenames ||
                    this.Forenames != null &&
                    input.Forenames != null &&
                    this.Forenames.SequenceEqual(input.Forenames)
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.MiddleInitials == input.MiddleInitials ||
                    (this.MiddleInitials != null &&
                    this.MiddleInitials.Equals(input.MiddleInitials))
                ) && 
                (
                    this.KnownAs == input.KnownAs ||
                    (this.KnownAs != null &&
                    this.KnownAs.Equals(input.KnownAs))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Forenames != null)
                    hashCode = hashCode * 59 + this.Forenames.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.MiddleInitials != null)
                    hashCode = hashCode * 59 + this.MiddleInitials.GetHashCode();
                if (this.KnownAs != null)
                    hashCode = hashCode * 59 + this.KnownAs.GetHashCode();
                hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// WorkerRegistrationResponse
    /// </summary>
    [DataContract]
    public partial class WorkerRegistrationResponse :  IEquatable<WorkerRegistrationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerRegistrationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkerRegistrationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerRegistrationResponse" /> class.
        /// </summary>
        /// <param name="workerId">Allocate Worker ID of the person (required).</param>
        public WorkerRegistrationResponse(string workerId = default(string))
        {
            // to ensure "workerId" is required (not null)
            if (workerId == null)
            {
                throw new InvalidDataException("workerId is a required property for WorkerRegistrationResponse and cannot be null");
            }
            else
            {
                this.WorkerId = workerId;
            }

        }
        
        /// <summary>
        /// Allocate Worker ID of the person
        /// </summary>
        /// <value>Allocate Worker ID of the person</value>
        [DataMember(Name="workerId", EmitDefaultValue=false)]
        public string WorkerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerRegistrationResponse {\n");
            sb.Append("  WorkerId: ").Append(WorkerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerRegistrationResponse);
        }

        /// <summary>
        /// Returns true if WorkerRegistrationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerRegistrationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerRegistrationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WorkerId == input.WorkerId ||
                    (this.WorkerId != null &&
                    this.WorkerId.Equals(input.WorkerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkerId != null)
                    hashCode = hashCode * 59 + this.WorkerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Worker API and Events
 *
 *      ## API and events for providing workers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// WorkLocations
    /// </summary>
    [DataContract]
    public partial class WorkLocations :  IEquatable<WorkLocations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkLocations" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkLocations() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkLocations" /> class.
        /// </summary>
        /// <param name="homeTrust">The identifier for the home trust for this worker (required).</param>
        /// <param name="workingTrusts">Identifiers for the trusts that the worker may work in (in addition to their home trust).</param>
        public WorkLocations(string homeTrust = default(string), List<Object> workingTrusts = default(List<Object>))
        {
            // to ensure "homeTrust" is required (not null)
            if (homeTrust == null)
            {
                throw new InvalidDataException("homeTrust is a required property for WorkLocations and cannot be null");
            }
            else
            {
                this.HomeTrust = homeTrust;
            }

            this.WorkingTrusts = workingTrusts;
        }
        
        /// <summary>
        /// The identifier for the home trust for this worker
        /// </summary>
        /// <value>The identifier for the home trust for this worker</value>
        [DataMember(Name="homeTrust", EmitDefaultValue=false)]
        public string HomeTrust { get; set; }

        /// <summary>
        /// Identifiers for the trusts that the worker may work in (in addition to their home trust)
        /// </summary>
        /// <value>Identifiers for the trusts that the worker may work in (in addition to their home trust)</value>
        [DataMember(Name="workingTrusts", EmitDefaultValue=false)]
        public List<Object> WorkingTrusts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkLocations {\n");
            sb.Append("  HomeTrust: ").Append(HomeTrust).Append("\n");
            sb.Append("  WorkingTrusts: ").Append(WorkingTrusts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkLocations);
        }

        /// <summary>
        /// Returns true if WorkLocations instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkLocations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkLocations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HomeTrust == input.HomeTrust ||
                    (this.HomeTrust != null &&
                    this.HomeTrust.Equals(input.HomeTrust))
                ) && 
                (
                    this.WorkingTrusts == input.WorkingTrusts ||
                    this.WorkingTrusts != null &&
                    input.WorkingTrusts != null &&
                    this.WorkingTrusts.SequenceEqual(input.WorkingTrusts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HomeTrust != null)
                    hashCode = hashCode * 59 + this.HomeTrust.GetHashCode();
                if (this.WorkingTrusts != null)
                    hashCode = hashCode * 59 + this.WorkingTrusts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

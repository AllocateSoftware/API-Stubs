/*
 * Reference data and Mappings API
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.Mapping;
import com.allocate.openapi.model.MappingSet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MappingsApi {
    private ApiClient localVarApiClient;

    public MappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createMapping
     * @param setId The ID of the mapping set (required)
     * @param mapping Details of the mapping (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingCall(String setId, Mapping mapping, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mapping;

        // create path and map variables
        String localVarPath = "/mappingSets/{setId}/mappings"
            .replaceAll("\\{" + "setId" + "\\}", localVarApiClient.escapeString(setId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMappingValidateBeforeCall(String setId, Mapping mapping, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'setId' is set
        if (setId == null) {
            throw new ApiException("Missing the required parameter 'setId' when calling createMapping(Async)");
        }
        
        // verify the required parameter 'mapping' is set
        if (mapping == null) {
            throw new ApiException("Missing the required parameter 'mapping' when calling createMapping(Async)");
        }
        

        okhttp3.Call localVarCall = createMappingCall(setId, mapping, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new entry in a mapping set
     * @param setId The ID of the mapping set (required)
     * @param mapping Details of the mapping (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
     </table>
     */
    public String createMapping(String setId, Mapping mapping) throws ApiException {
        ApiResponse<String> localVarResp = createMappingWithHttpInfo(setId, mapping);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new entry in a mapping set
     * @param setId The ID of the mapping set (required)
     * @param mapping Details of the mapping (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createMappingWithHttpInfo(String setId, Mapping mapping) throws ApiException {
        okhttp3.Call localVarCall = createMappingValidateBeforeCall(setId, mapping, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new entry in a mapping set
     * @param setId The ID of the mapping set (required)
     * @param mapping Details of the mapping (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingAsync(String setId, Mapping mapping, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMappingValidateBeforeCall(setId, mapping, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMapping
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the mapping (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMappingCall(String id, String mappingId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappingSets/{id}/mappings/{mappingId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "mappingId" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMappingValidateBeforeCall(String id, String mappingId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteMapping(Async)");
        }
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling deleteMapping(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMappingCall(id, mappingId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a vocabulary entry
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the mapping (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMapping(String id, String mappingId) throws ApiException {
        deleteMappingWithHttpInfo(id, mappingId);
    }

    /**
     * 
     * Delete a vocabulary entry
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the mapping (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMappingWithHttpInfo(String id, String mappingId) throws ApiException {
        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(id, mappingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a vocabulary entry
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the mapping (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMappingAsync(String id, String mappingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(id, mappingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMapping
     * @param id The ID of the mapping set (required)
     * @param mappingId The ID of the mapping set element (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingCall(String id, String mappingId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappingSets/{id}/mappings/{mappingId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "mappingId" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingValidateBeforeCall(String id, String mappingId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMapping(Async)");
        }
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling getMapping(Async)");
        }
        

        okhttp3.Call localVarCall = getMappingCall(id, mappingId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return the mapping
     * @param id The ID of the mapping set (required)
     * @param mappingId The ID of the mapping set element (required)
     * @return Mapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public Mapping getMapping(String id, String mappingId) throws ApiException {
        ApiResponse<Mapping> localVarResp = getMappingWithHttpInfo(id, mappingId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the mapping
     * @param id The ID of the mapping set (required)
     * @param mappingId The ID of the mapping set element (required)
     * @return ApiResponse&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mapping> getMappingWithHttpInfo(String id, String mappingId) throws ApiException {
        okhttp3.Call localVarCall = getMappingValidateBeforeCall(id, mappingId, null);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the mapping
     * @param id The ID of the mapping set (required)
     * @param mappingId The ID of the mapping set element (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingAsync(String id, String mappingId, final ApiCallback<Mapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingValidateBeforeCall(id, mappingId, _callback);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMappingSetById
     * @param setId The ID of the vocabulary type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingSetByIdCall(String setId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappingSets/{setId}"
            .replaceAll("\\{" + "setId" + "\\}", localVarApiClient.escapeString(setId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingSetByIdValidateBeforeCall(String setId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'setId' is set
        if (setId == null) {
            throw new ApiException("Missing the required parameter 'setId' when calling getMappingSetById(Async)");
        }
        

        okhttp3.Call localVarCall = getMappingSetByIdCall(setId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a mapping set by ID
     * @param setId The ID of the vocabulary type (required)
     * @return MappingSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public MappingSet getMappingSetById(String setId) throws ApiException {
        ApiResponse<MappingSet> localVarResp = getMappingSetByIdWithHttpInfo(setId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a mapping set by ID
     * @param setId The ID of the vocabulary type (required)
     * @return ApiResponse&lt;MappingSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MappingSet> getMappingSetByIdWithHttpInfo(String setId) throws ApiException {
        okhttp3.Call localVarCall = getMappingSetByIdValidateBeforeCall(setId, null);
        Type localVarReturnType = new TypeToken<MappingSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a mapping set by ID
     * @param setId The ID of the vocabulary type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingSetByIdAsync(String setId, final ApiCallback<MappingSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingSetByIdValidateBeforeCall(setId, _callback);
        Type localVarReturnType = new TypeToken<MappingSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMappingSets
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingSetsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappingSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingSetsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMappingSetsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Return a list of mapping sets that you may utilise
     * @return List&lt;MappingSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public List<MappingSet> getMappingSets() throws ApiException {
        ApiResponse<List<MappingSet>> localVarResp = getMappingSetsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of mapping sets that you may utilise
     * @return ApiResponse&lt;List&lt;MappingSet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MappingSet>> getMappingSetsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMappingSetsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MappingSet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of mapping sets that you may utilise
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping sets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingSetsAsync(final ApiCallback<List<MappingSet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingSetsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MappingSet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMappings
     * @param setId The ID of the mapping set (required)
     * @param fromCode Search for a mapping where the from code matches the provided string (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping set entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingsCall(String setId, String fromCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappingSets/{setId}/mappings"
            .replaceAll("\\{" + "setId" + "\\}", localVarApiClient.escapeString(setId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fromCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromCode", fromCode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingsValidateBeforeCall(String setId, String fromCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'setId' is set
        if (setId == null) {
            throw new ApiException("Missing the required parameter 'setId' when calling getMappings(Async)");
        }
        

        okhttp3.Call localVarCall = getMappingsCall(setId, fromCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return the elements of a mapping set
     * @param setId The ID of the mapping set (required)
     * @param fromCode Search for a mapping where the from code matches the provided string (optional)
     * @return List&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping set entries </td><td>  -  </td></tr>
     </table>
     */
    public List<Mapping> getMappings(String setId, String fromCode) throws ApiException {
        ApiResponse<List<Mapping>> localVarResp = getMappingsWithHttpInfo(setId, fromCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the elements of a mapping set
     * @param setId The ID of the mapping set (required)
     * @param fromCode Search for a mapping where the from code matches the provided string (optional)
     * @return ApiResponse&lt;List&lt;Mapping&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping set entries </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Mapping>> getMappingsWithHttpInfo(String setId, String fromCode) throws ApiException {
        okhttp3.Call localVarCall = getMappingsValidateBeforeCall(setId, fromCode, null);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the elements of a mapping set
     * @param setId The ID of the mapping set (required)
     * @param fromCode Search for a mapping where the from code matches the provided string (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of mapping set entries </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingsAsync(String setId, String fromCode, final ApiCallback<List<Mapping>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingsValidateBeforeCall(setId, fromCode, _callback);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putMapping
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the vocabulary element (required)
     * @param mapping Details of the mapping (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMappingCall(String id, String mappingId, Mapping mapping, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mapping;

        // create path and map variables
        String localVarPath = "/mappingSets/{id}/mappings/{mappingId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "mappingId" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putMappingValidateBeforeCall(String id, String mappingId, Mapping mapping, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putMapping(Async)");
        }
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling putMapping(Async)");
        }
        
        // verify the required parameter 'mapping' is set
        if (mapping == null) {
            throw new ApiException("Missing the required parameter 'mapping' when calling putMapping(Async)");
        }
        

        okhttp3.Call localVarCall = putMappingCall(id, mappingId, mapping, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a mapping
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the vocabulary element (required)
     * @param mapping Details of the mapping (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void putMapping(String id, String mappingId, Mapping mapping) throws ApiException {
        putMappingWithHttpInfo(id, mappingId, mapping);
    }

    /**
     * 
     * Update a mapping
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the vocabulary element (required)
     * @param mapping Details of the mapping (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putMappingWithHttpInfo(String id, String mappingId, Mapping mapping) throws ApiException {
        okhttp3.Call localVarCall = putMappingValidateBeforeCall(id, mappingId, mapping, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update a mapping
     * @param id The ID of the vocabulary (required)
     * @param mappingId The ID of the vocabulary element (required)
     * @param mapping Details of the mapping (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putMappingAsync(String id, String mappingId, Mapping mapping, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putMappingValidateBeforeCall(id, mappingId, mapping, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

/*
 * Reference data and Mappings API
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.Vocabulary;
import com.allocate.openapi.model.VocabularyEntry;
import com.allocate.openapi.model.VocabularyType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferenceDataApi {
    private ApiClient localVarApiClient;

    public ReferenceDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferenceDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createVocabularyEntry
     * @param id The ID of the vocabulary (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVocabularyEntryCall(String id, VocabularyEntry vocabularyEntry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vocabularyEntry;

        // create path and map variables
        String localVarPath = "/vocabularies/{id}/entries"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVocabularyEntryValidateBeforeCall(String id, VocabularyEntry vocabularyEntry, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createVocabularyEntry(Async)");
        }
        
        // verify the required parameter 'vocabularyEntry' is set
        if (vocabularyEntry == null) {
            throw new ApiException("Missing the required parameter 'vocabularyEntry' when calling createVocabularyEntry(Async)");
        }
        

        okhttp3.Call localVarCall = createVocabularyEntryCall(id, vocabularyEntry, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public String createVocabularyEntry(String id, VocabularyEntry vocabularyEntry) throws ApiException {
        ApiResponse<String> localVarResp = createVocabularyEntryWithHttpInfo(id, vocabularyEntry);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createVocabularyEntryWithHttpInfo(String id, VocabularyEntry vocabularyEntry) throws ApiException {
        okhttp3.Call localVarCall = createVocabularyEntryValidateBeforeCall(id, vocabularyEntry, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVocabularyEntryAsync(String id, VocabularyEntry vocabularyEntry, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVocabularyEntryValidateBeforeCall(id, vocabularyEntry, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVocabularyEntry
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVocabularyEntryCall(String id, String elementId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vocabularies/{id}/entries/{elementId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", localVarApiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVocabularyEntryValidateBeforeCall(String id, String elementId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVocabularyEntry(Async)");
        }
        
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling deleteVocabularyEntry(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVocabularyEntryCall(id, elementId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a vocabulary entry
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVocabularyEntry(String id, String elementId) throws ApiException {
        deleteVocabularyEntryWithHttpInfo(id, elementId);
    }

    /**
     * 
     * Delete a vocabulary entry
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVocabularyEntryWithHttpInfo(String id, String elementId) throws ApiException {
        okhttp3.Call localVarCall = deleteVocabularyEntryValidateBeforeCall(id, elementId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a vocabulary entry
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVocabularyEntryAsync(String id, String elementId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVocabularyEntryValidateBeforeCall(id, elementId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVocabularies
     * @param vocabularyTypeId Limit to vocabulary types (optional)
     * @param page Return page of results (optional)
     * @param pageSize Records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabulariesCall(String vocabularyTypeId, String page, String pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vocabularies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vocabularyTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vocabularyTypeId", vocabularyTypeId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVocabulariesValidateBeforeCall(String vocabularyTypeId, String page, String pageSize, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getVocabulariesCall(vocabularyTypeId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return a list of vocabularies types that you may query
     * @param vocabularyTypeId Limit to vocabulary types (optional)
     * @param page Return page of results (optional)
     * @param pageSize Records per page (optional)
     * @return List&lt;Vocabulary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public List<Vocabulary> getVocabularies(String vocabularyTypeId, String page, String pageSize) throws ApiException {
        ApiResponse<List<Vocabulary>> localVarResp = getVocabulariesWithHttpInfo(vocabularyTypeId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of vocabularies types that you may query
     * @param vocabularyTypeId Limit to vocabulary types (optional)
     * @param page Return page of results (optional)
     * @param pageSize Records per page (optional)
     * @return ApiResponse&lt;List&lt;Vocabulary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Vocabulary>> getVocabulariesWithHttpInfo(String vocabularyTypeId, String page, String pageSize) throws ApiException {
        okhttp3.Call localVarCall = getVocabulariesValidateBeforeCall(vocabularyTypeId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<Vocabulary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of vocabularies types that you may query
     * @param vocabularyTypeId Limit to vocabulary types (optional)
     * @param page Return page of results (optional)
     * @param pageSize Records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabulariesAsync(String vocabularyTypeId, String page, String pageSize, final ApiCallback<List<Vocabulary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVocabulariesValidateBeforeCall(vocabularyTypeId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<Vocabulary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVocabulary
     * @param id The ID of the vocabulary (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vocabularies/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVocabularyValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVocabulary(Async)");
        }
        

        okhttp3.Call localVarCall = getVocabularyCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return a list of vocabularies that you may query
     * @param id The ID of the vocabulary (required)
     * @return Vocabulary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary </td><td>  -  </td></tr>
     </table>
     */
    public Vocabulary getVocabulary(String id) throws ApiException {
        ApiResponse<Vocabulary> localVarResp = getVocabularyWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of vocabularies that you may query
     * @param id The ID of the vocabulary (required)
     * @return ApiResponse&lt;Vocabulary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vocabulary> getVocabularyWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getVocabularyValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Vocabulary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of vocabularies that you may query
     * @param id The ID of the vocabulary (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyAsync(String id, final ApiCallback<Vocabulary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVocabularyValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Vocabulary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVocabularyElement
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyElementCall(String id, String elementId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vocabularies/{id}/entries/{elementId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", localVarApiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVocabularyElementValidateBeforeCall(String id, String elementId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVocabularyElement(Async)");
        }
        
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getVocabularyElement(Async)");
        }
        

        okhttp3.Call localVarCall = getVocabularyElementCall(id, elementId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @return VocabularyEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public VocabularyEntry getVocabularyElement(String id, String elementId) throws ApiException {
        ApiResponse<VocabularyEntry> localVarResp = getVocabularyElementWithHttpInfo(id, elementId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @return ApiResponse&lt;VocabularyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VocabularyEntry> getVocabularyElementWithHttpInfo(String id, String elementId) throws ApiException {
        okhttp3.Call localVarCall = getVocabularyElementValidateBeforeCall(id, elementId, null);
        Type localVarReturnType = new TypeToken<VocabularyEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyElementAsync(String id, String elementId, final ApiCallback<VocabularyEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVocabularyElementValidateBeforeCall(id, elementId, _callback);
        Type localVarReturnType = new TypeToken<VocabularyEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVocabularyEntries
     * @param id The ID of the vocabulary (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyEntriesCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vocabularies/{id}/entries"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVocabularyEntriesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVocabularyEntries(Async)");
        }
        

        okhttp3.Call localVarCall = getVocabularyEntriesCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary (required)
     * @return List&lt;VocabularyEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public List<VocabularyEntry> getVocabularyEntries(String id) throws ApiException {
        ApiResponse<List<VocabularyEntry>> localVarResp = getVocabularyEntriesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary (required)
     * @return ApiResponse&lt;List&lt;VocabularyEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VocabularyEntry>> getVocabularyEntriesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getVocabularyEntriesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<VocabularyEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabularies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyEntriesAsync(String id, final ApiCallback<List<VocabularyEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVocabularyEntriesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<VocabularyEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVocabularyTypeById
     * @param id The ID of the vocabulary type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyTypeByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vocabularyTypes/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVocabularyTypeByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVocabularyTypeById(Async)");
        }
        

        okhttp3.Call localVarCall = getVocabularyTypeByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return a vocabulary type
     * @param id The ID of the vocabulary type (required)
     * @return VocabularyType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary type </td><td>  -  </td></tr>
     </table>
     */
    public VocabularyType getVocabularyTypeById(String id) throws ApiException {
        ApiResponse<VocabularyType> localVarResp = getVocabularyTypeByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a vocabulary type
     * @param id The ID of the vocabulary type (required)
     * @return ApiResponse&lt;VocabularyType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VocabularyType> getVocabularyTypeByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getVocabularyTypeByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VocabularyType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a vocabulary type
     * @param id The ID of the vocabulary type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a vocabulary type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyTypeByIdAsync(String id, final ApiCallback<VocabularyType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVocabularyTypeByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VocabularyType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVocabularyTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabulary types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyTypesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vocabularyTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVocabularyTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getVocabularyTypesCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Return a list of vocabularies types that you may query
     * @return List&lt;VocabularyType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabulary types </td><td>  -  </td></tr>
     </table>
     */
    public List<VocabularyType> getVocabularyTypes() throws ApiException {
        ApiResponse<List<VocabularyType>> localVarResp = getVocabularyTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Return a list of vocabularies types that you may query
     * @return ApiResponse&lt;List&lt;VocabularyType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabulary types </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VocabularyType>> getVocabularyTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVocabularyTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<VocabularyType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a list of vocabularies types that you may query
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returning a list of vocabulary types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVocabularyTypesAsync(final ApiCallback<List<VocabularyType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVocabularyTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<VocabularyType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVocabularyEntry
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVocabularyEntryCall(String id, String elementId, VocabularyEntry vocabularyEntry, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vocabularyEntry;

        // create path and map variables
        String localVarPath = "/vocabularies/{id}/entries/{elementId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", localVarApiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVocabularyEntryValidateBeforeCall(String id, String elementId, VocabularyEntry vocabularyEntry, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putVocabularyEntry(Async)");
        }
        
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling putVocabularyEntry(Async)");
        }
        
        // verify the required parameter 'vocabularyEntry' is set
        if (vocabularyEntry == null) {
            throw new ApiException("Missing the required parameter 'vocabularyEntry' when calling putVocabularyEntry(Async)");
        }
        

        okhttp3.Call localVarCall = putVocabularyEntryCall(id, elementId, vocabularyEntry, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public void putVocabularyEntry(String id, String elementId, VocabularyEntry vocabularyEntry) throws ApiException {
        putVocabularyEntryWithHttpInfo(id, elementId, vocabularyEntry);
    }

    /**
     * 
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putVocabularyEntryWithHttpInfo(String id, String elementId, VocabularyEntry vocabularyEntry) throws ApiException {
        okhttp3.Call localVarCall = putVocabularyEntryValidateBeforeCall(id, elementId, vocabularyEntry, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary (required)
     * @param elementId The ID of the vocabulary element (required)
     * @param vocabularyEntry Details of the vocabulary entry (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putVocabularyEntryAsync(String id, String elementId, VocabularyEntry vocabularyEntry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVocabularyEntryValidateBeforeCall(id, elementId, vocabularyEntry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

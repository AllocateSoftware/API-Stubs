/*
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/api/v1/",
		Index,
	},

	{
		"CreateMapping",
		http.MethodPost,
		"/api/v1/mappingSets/:setId/mappings",
		CreateMapping,
	},

	{
		"DeleteMapping",
		http.MethodDelete,
		"/api/v1/mappingSets/:id/mappings/:mappingId",
		DeleteMapping,
	},

	{
		"GetMapping",
		http.MethodGet,
		"/api/v1/mappingSets/:id/mappings/:mappingId",
		GetMapping,
	},

	{
		"GetMappingSetById",
		http.MethodGet,
		"/api/v1/mappingSets/:setId",
		GetMappingSetById,
	},

	{
		"GetMappingSets",
		http.MethodGet,
		"/api/v1/mappingSets",
		GetMappingSets,
	},

	{
		"GetMappings",
		http.MethodGet,
		"/api/v1/mappingSets/:setId/mappings",
		GetMappings,
	},

	{
		"PutMapping",
		http.MethodPut,
		"/api/v1/mappingSets/:id/mappings/:mappingId",
		PutMapping,
	},

	{
		"CreateVocabularyEntry",
		http.MethodPost,
		"/api/v1/vocabularies/:id/entries",
		CreateVocabularyEntry,
	},

	{
		"DeleteVocabularyEntry",
		http.MethodDelete,
		"/api/v1/vocabularies/:id/entries/:elementId",
		DeleteVocabularyEntry,
	},

	{
		"GetVocabularies",
		http.MethodGet,
		"/api/v1/vocabularies",
		GetVocabularies,
	},

	{
		"GetVocabulary",
		http.MethodGet,
		"/api/v1/vocabularies/:id",
		GetVocabulary,
	},

	{
		"GetVocabularyElement",
		http.MethodGet,
		"/api/v1/vocabularies/:id/entries/:elementId",
		GetVocabularyElement,
	},

	{
		"GetVocabularyEntries",
		http.MethodGet,
		"/api/v1/vocabularies/:id/entries",
		GetVocabularyEntries,
	},

	{
		"GetVocabularyTypeById",
		http.MethodGet,
		"/api/v1/vocabularyTypes/:id",
		GetVocabularyTypeById,
	},

	{
		"GetVocabularyTypes",
		http.MethodGet,
		"/api/v1/vocabularyTypes",
		GetVocabularyTypes,
	},

	{
		"PutVocabularyEntry",
		http.MethodPut,
		"/api/v1/vocabularies/:id/entries/:elementId",
		PutVocabularyEntry,
	},
}

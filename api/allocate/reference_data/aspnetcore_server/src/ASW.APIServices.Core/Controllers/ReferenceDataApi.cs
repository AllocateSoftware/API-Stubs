/*
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using ASW.APIServices.Core.Attributes;
using Microsoft.AspNetCore.Authorization;
using ASW.APIServices.Core.Models;

namespace ASW.APIServices.Core.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReferenceDataApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new entry in a vocabulary</remarks>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <response code="200">Returning a list of vocabularies</response>
        [HttpPost]
        [Route("/api/v1/vocabularies/{id}/entries")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(string))]
        public virtual IActionResult CreateVocabularyEntry([FromRoute][Required]string id, [FromBody]VocabularyEntry vocabularyEntry)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a vocabulary entry</remarks>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <response code="200">Updated successfully</response>
        [HttpDelete]
        [Route("/api/v1/vocabularies/{id}/entries/{elementId}")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult DeleteVocabularyEntry([FromRoute][Required]string id, [FromRoute][Required]string elementId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return a list of vocabularies types that you may query</remarks>
        /// <param name="vocabularyTypeId">Limit to vocabulary types</param>
        /// <param name="page">Return page of results</param>
        /// <param name="pageSize">Records per page</param>
        /// <response code="200">Returning a list of vocabularies</response>
        [HttpGet]
        [Route("/api/v1/vocabularies")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Vocabulary>))]
        public virtual IActionResult GetVocabularies([FromQuery]string vocabularyTypeId, [FromQuery]string page, [FromQuery]string pageSize)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Vocabulary>));
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : \"NCUH\",\n  \"description\" : \"List of grades\",\n  \"typeId\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\",\n  \"id\" : \"DA32F546-E049-49DE-BDDD-EA466597E27E\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Vocabulary>>(exampleJson)
            : default(List<Vocabulary>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return a list of vocabularies that you may query</remarks>
        /// <param name="id">The ID of the vocabulary</param>
        /// <response code="200">Returning a vocabulary</response>
        [HttpGet]
        [Route("/api/v1/vocabularies/{id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(Vocabulary))]
        public virtual IActionResult GetVocabulary([FromRoute][Required]string id)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Vocabulary));
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : \"NCUH\",\n  \"description\" : \"List of grades\",\n  \"typeId\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\",\n  \"id\" : \"DA32F546-E049-49DE-BDDD-EA466597E27E\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Vocabulary>(exampleJson)
            : default(Vocabulary);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return the elements of a vocabulary</remarks>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <response code="200">Returning a list of vocabularies</response>
        [HttpGet]
        [Route("/api/v1/vocabularies/{id}/entries/{elementId}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VocabularyEntry))]
        public virtual IActionResult GetVocabularyElement([FromRoute][Required]string id, [FromRoute][Required]string elementId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VocabularyEntry));
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : \"ABCD\",\n  \"title\" : \"ABCD\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VocabularyEntry>(exampleJson)
            : default(VocabularyEntry);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return the elements of a vocabulary</remarks>
        /// <param name="id">The ID of the vocabulary</param>
        /// <response code="200">Returning a list of vocabularies</response>
        [HttpGet]
        [Route("/api/v1/vocabularies/{id}/entries")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<VocabularyEntry>))]
        public virtual IActionResult GetVocabularyEntries([FromRoute][Required]string id)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<VocabularyEntry>));
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : \"ABCD\",\n  \"title\" : \"ABCD\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<VocabularyEntry>>(exampleJson)
            : default(List<VocabularyEntry>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return a vocabulary type</remarks>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <response code="200">Returning a vocabulary type</response>
        [HttpGet]
        [Route("/api/v1/vocabularyTypes/{id}")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(VocabularyType))]
        public virtual IActionResult GetVocabularyTypeById([FromRoute][Required]string id)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VocabularyType));
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"grades\",\n  \"description\" : \"List of grades\",\n  \"id\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\",\n  \"tags\" : {\n    \"key\" : \"tags\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VocabularyType>(exampleJson)
            : default(VocabularyType);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Return a list of vocabularies types that you may query</remarks>
        /// <response code="200">Returning a list of vocabulary types</response>
        [HttpGet]
        [Route("/api/v1/vocabularyTypes")]
        [Authorize]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<VocabularyType>))]
        public virtual IActionResult GetVocabularyTypes()
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<VocabularyType>));
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"grades\",\n  \"description\" : \"List of grades\",\n  \"id\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\",\n  \"tags\" : {\n    \"key\" : \"tags\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<VocabularyType>>(exampleJson)
            : default(List<VocabularyType>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new entry in a vocabulary</remarks>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <response code="200">Updated successfully</response>
        [HttpPut]
        [Route("/api/v1/vocabularies/{id}/entries/{elementId}")]
        [Authorize]
        [ValidateModelState]
        public virtual IActionResult PutVocabularyEntry([FromRoute][Required]string id, [FromRoute][Required]string elementId, [FromBody]VocabularyEntry vocabularyEntry)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}

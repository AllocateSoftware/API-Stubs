/* 
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMappingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>string</returns>
        string CreateMapping (string setId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateMappingWithHttpInfo (string setId, Mapping mapping);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns></returns>
        void DeleteMapping (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMappingWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Mapping</returns>
        Mapping GetMapping (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>ApiResponse of Mapping</returns>
        ApiResponse<Mapping> GetMappingWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>MappingSet</returns>
        MappingSet GetMappingSetById (string setId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of MappingSet</returns>
        ApiResponse<MappingSet> GetMappingSetByIdWithHttpInfo (string setId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MappingSet&gt;</returns>
        List<MappingSet> GetMappingSets ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MappingSet&gt;</returns>
        ApiResponse<List<MappingSet>> GetMappingSetsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>List&lt;Mapping&gt;</returns>
        List<Mapping> GetMappings (string setId, string fromCode = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>ApiResponse of List&lt;Mapping&gt;</returns>
        ApiResponse<List<Mapping>> GetMappingsWithHttpInfo (string setId, string fromCode = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns></returns>
        void PutMapping (string id, string mappingId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutMappingWithHttpInfo (string id, string mappingId, Mapping mapping);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMappingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateMappingAsync (string setId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateMappingAsyncWithHttpInfo (string setId, Mapping mapping);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMappingAsync (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMappingAsyncWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of Mapping</returns>
        System.Threading.Tasks.Task<Mapping> GetMappingAsync (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of ApiResponse (Mapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<Mapping>> GetMappingAsyncWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of MappingSet</returns>
        System.Threading.Tasks.Task<MappingSet> GetMappingSetByIdAsync (string setId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (MappingSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<MappingSet>> GetMappingSetByIdAsyncWithHttpInfo (string setId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MappingSet&gt;</returns>
        System.Threading.Tasks.Task<List<MappingSet>> GetMappingSetsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MappingSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MappingSet>>> GetMappingSetsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of List&lt;Mapping&gt;</returns>
        System.Threading.Tasks.Task<List<Mapping>> GetMappingsAsync (string setId, string fromCode = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Mapping&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Mapping>>> GetMappingsAsyncWithHttpInfo (string setId, string fromCode = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutMappingAsync (string id, string mappingId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutMappingAsyncWithHttpInfo (string id, string mappingId, Mapping mapping);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMappingsApi : IMappingsApiSync, IMappingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MappingsApi : IMappingsApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MappingsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MappingsApi(String basePath)
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                new ASW.APIServices.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MappingsApi(ASW.APIServices.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MappingsApi(ASW.APIServices.Core.Client.ISynchronousClient client,ASW.APIServices.Core.Client.IAsynchronousClient asyncClient, ASW.APIServices.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>string</returns>
        public string CreateMapping (string setId, Mapping mapping)
        {
             ASW.APIServices.Core.Client.ApiResponse<string> localVarResponse = CreateMappingWithHttpInfo(setId, mapping);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of string</returns>
        public ASW.APIServices.Core.Client.ApiResponse< string > CreateMappingWithHttpInfo (string setId, Mapping mapping)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->CreateMapping");

            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->CreateMapping");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (setId != null)
                localVarRequestOptions.PathParameters.Add("setId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(setId)); // path parameter
            localVarRequestOptions.Data = mapping;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< string >("/mappingSets/{setId}/mappings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateMappingAsync (string setId, Mapping mapping)
        {
             ASW.APIServices.Core.Client.ApiResponse<string> localVarResponse = await CreateMappingAsyncWithHttpInfo(setId, mapping);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<string>> CreateMappingAsyncWithHttpInfo (string setId, Mapping mapping)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->CreateMapping");

            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->CreateMapping");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (setId != null)
                localVarRequestOptions.PathParameters.Add("setId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(setId)); // path parameter
            localVarRequestOptions.Data = mapping;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/mappingSets/{setId}/mappings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns></returns>
        public void DeleteMapping (string id, string mappingId)
        {
             DeleteMappingWithHttpInfo(id, mappingId);
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.Core.Client.ApiResponse<Object> DeleteMappingWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling MappingsApi->DeleteMapping");

            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->DeleteMapping");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mappingId != null)
                localVarRequestOptions.PathParameters.Add("mappingId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/mappingSets/{id}/mappings/{mappingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMappingAsync (string id, string mappingId)
        {
             await DeleteMappingAsyncWithHttpInfo(id, mappingId);

        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Object>> DeleteMappingAsyncWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling MappingsApi->DeleteMapping");

            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->DeleteMapping");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mappingId != null)
                localVarRequestOptions.PathParameters.Add("mappingId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/mappingSets/{id}/mappings/{mappingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Mapping</returns>
        public Mapping GetMapping (string id, string mappingId)
        {
             ASW.APIServices.Core.Client.ApiResponse<Mapping> localVarResponse = GetMappingWithHttpInfo(id, mappingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>ApiResponse of Mapping</returns>
        public ASW.APIServices.Core.Client.ApiResponse< Mapping > GetMappingWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling MappingsApi->GetMapping");

            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->GetMapping");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mappingId != null)
                localVarRequestOptions.PathParameters.Add("mappingId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Mapping >("/mappingSets/{id}/mappings/{mappingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of Mapping</returns>
        public async System.Threading.Tasks.Task<Mapping> GetMappingAsync (string id, string mappingId)
        {
             ASW.APIServices.Core.Client.ApiResponse<Mapping> localVarResponse = await GetMappingAsyncWithHttpInfo(id, mappingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of ApiResponse (Mapping)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Mapping>> GetMappingAsyncWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling MappingsApi->GetMapping");

            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->GetMapping");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mappingId != null)
                localVarRequestOptions.PathParameters.Add("mappingId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Mapping>("/mappingSets/{id}/mappings/{mappingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>MappingSet</returns>
        public MappingSet GetMappingSetById (string setId)
        {
             ASW.APIServices.Core.Client.ApiResponse<MappingSet> localVarResponse = GetMappingSetByIdWithHttpInfo(setId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of MappingSet</returns>
        public ASW.APIServices.Core.Client.ApiResponse< MappingSet > GetMappingSetByIdWithHttpInfo (string setId)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappingSetById");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (setId != null)
                localVarRequestOptions.PathParameters.Add("setId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(setId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MappingSet >("/mappingSets/{setId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMappingSetById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of MappingSet</returns>
        public async System.Threading.Tasks.Task<MappingSet> GetMappingSetByIdAsync (string setId)
        {
             ASW.APIServices.Core.Client.ApiResponse<MappingSet> localVarResponse = await GetMappingSetByIdAsyncWithHttpInfo(setId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (MappingSet)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<MappingSet>> GetMappingSetByIdAsyncWithHttpInfo (string setId)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappingSetById");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (setId != null)
                localVarRequestOptions.PathParameters.Add("setId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(setId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MappingSet>("/mappingSets/{setId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMappingSetById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MappingSet&gt;</returns>
        public List<MappingSet> GetMappingSets ()
        {
             ASW.APIServices.Core.Client.ApiResponse<List<MappingSet>> localVarResponse = GetMappingSetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MappingSet&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<MappingSet> > GetMappingSetsWithHttpInfo ()
        {
            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<MappingSet> >("/mappingSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMappingSets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MappingSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<MappingSet>> GetMappingSetsAsync ()
        {
             ASW.APIServices.Core.Client.ApiResponse<List<MappingSet>> localVarResponse = await GetMappingSetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MappingSet&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<MappingSet>>> GetMappingSetsAsyncWithHttpInfo ()
        {

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MappingSet>>("/mappingSets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMappingSets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>List&lt;Mapping&gt;</returns>
        public List<Mapping> GetMappings (string setId, string fromCode = default(string))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<Mapping>> localVarResponse = GetMappingsWithHttpInfo(setId, fromCode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>ApiResponse of List&lt;Mapping&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<Mapping> > GetMappingsWithHttpInfo (string setId, string fromCode = default(string))
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappings");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (setId != null)
                localVarRequestOptions.PathParameters.Add("setId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(setId)); // path parameter
            if (fromCode != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "fromCode", fromCode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Mapping> >("/mappingSets/{setId}/mappings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMappings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of List&lt;Mapping&gt;</returns>
        public async System.Threading.Tasks.Task<List<Mapping>> GetMappingsAsync (string setId, string fromCode = default(string))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<Mapping>> localVarResponse = await GetMappingsAsyncWithHttpInfo(setId, fromCode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Mapping&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<Mapping>>> GetMappingsAsyncWithHttpInfo (string setId, string fromCode = default(string))
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappings");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (setId != null)
                localVarRequestOptions.PathParameters.Add("setId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(setId)); // path parameter
            if (fromCode != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "fromCode", fromCode))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Mapping>>("/mappingSets/{setId}/mappings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMappings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns></returns>
        public void PutMapping (string id, string mappingId, Mapping mapping)
        {
             PutMappingWithHttpInfo(id, mappingId, mapping);
        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.Core.Client.ApiResponse<Object> PutMappingWithHttpInfo (string id, string mappingId, Mapping mapping)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling MappingsApi->PutMapping");

            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->PutMapping");

            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->PutMapping");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mappingId != null)
                localVarRequestOptions.PathParameters.Add("mappingId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(mappingId)); // path parameter
            localVarRequestOptions.Data = mapping;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/mappingSets/{id}/mappings/{mappingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutMappingAsync (string id, string mappingId, Mapping mapping)
        {
             await PutMappingAsyncWithHttpInfo(id, mappingId, mapping);

        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Object>> PutMappingAsyncWithHttpInfo (string id, string mappingId, Mapping mapping)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling MappingsApi->PutMapping");

            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->PutMapping");

            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->PutMapping");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (mappingId != null)
                localVarRequestOptions.PathParameters.Add("mappingId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(mappingId)); // path parameter
            localVarRequestOptions.Data = mapping;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/mappingSets/{id}/mappings/{mappingId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutMapping", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

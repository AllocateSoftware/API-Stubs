/* 
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>string</returns>
        string CreateVocabularyEntry (string id, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateVocabularyEntryWithHttpInfo (string id, VocabularyEntry vocabularyEntry);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns></returns>
        void DeleteVocabularyEntry (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVocabularyEntryWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>List&lt;Vocabulary&gt;</returns>
        List<Vocabulary> GetVocabularies (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;Vocabulary&gt;</returns>
        ApiResponse<List<Vocabulary>> GetVocabulariesWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Vocabulary</returns>
        Vocabulary GetVocabulary (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of Vocabulary</returns>
        ApiResponse<Vocabulary> GetVocabularyWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>VocabularyEntry</returns>
        VocabularyEntry GetVocabularyElement (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of VocabularyEntry</returns>
        ApiResponse<VocabularyEntry> GetVocabularyElementWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>List&lt;VocabularyEntry&gt;</returns>
        List<VocabularyEntry> GetVocabularyEntries (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of List&lt;VocabularyEntry&gt;</returns>
        ApiResponse<List<VocabularyEntry>> GetVocabularyEntriesWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>VocabularyType</returns>
        VocabularyType GetVocabularyTypeById (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of VocabularyType</returns>
        ApiResponse<VocabularyType> GetVocabularyTypeByIdWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VocabularyType&gt;</returns>
        List<VocabularyType> GetVocabularyTypes ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VocabularyType&gt;</returns>
        ApiResponse<List<VocabularyType>> GetVocabularyTypesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns></returns>
        void PutVocabularyEntry (string id, string elementId, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutVocabularyEntryWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateVocabularyEntryAsync (string id, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateVocabularyEntryAsyncWithHttpInfo (string id, VocabularyEntry vocabularyEntry);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVocabularyEntryAsync (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVocabularyEntryAsyncWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of List&lt;Vocabulary&gt;</returns>
        System.Threading.Tasks.Task<List<Vocabulary>> GetVocabulariesAsync (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Vocabulary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vocabulary>>> GetVocabulariesAsyncWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of Vocabulary</returns>
        System.Threading.Tasks.Task<Vocabulary> GetVocabularyAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (Vocabulary)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vocabulary>> GetVocabularyAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of VocabularyEntry</returns>
        System.Threading.Tasks.Task<VocabularyEntry> GetVocabularyElementAsync (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse (VocabularyEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<VocabularyEntry>> GetVocabularyElementAsyncWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of List&lt;VocabularyEntry&gt;</returns>
        System.Threading.Tasks.Task<List<VocabularyEntry>> GetVocabularyEntriesAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (List&lt;VocabularyEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VocabularyEntry>>> GetVocabularyEntriesAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of VocabularyType</returns>
        System.Threading.Tasks.Task<VocabularyType> GetVocabularyTypeByIdAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (VocabularyType)</returns>
        System.Threading.Tasks.Task<ApiResponse<VocabularyType>> GetVocabularyTypeByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VocabularyType&gt;</returns>
        System.Threading.Tasks.Task<List<VocabularyType>> GetVocabularyTypesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VocabularyType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VocabularyType>>> GetVocabularyTypesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutVocabularyEntryAsync (string id, string elementId, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutVocabularyEntryAsyncWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApi : IReferenceDataApiSync, IReferenceDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferenceDataApi : IReferenceDataApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi(String basePath)
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                new ASW.APIServices.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferenceDataApi(ASW.APIServices.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReferenceDataApi(ASW.APIServices.Core.Client.ISynchronousClient client,ASW.APIServices.Core.Client.IAsynchronousClient asyncClient, ASW.APIServices.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>string</returns>
        public string CreateVocabularyEntry (string id, VocabularyEntry vocabularyEntry)
        {
             ASW.APIServices.Core.Client.ApiResponse<string> localVarResponse = CreateVocabularyEntryWithHttpInfo(id, vocabularyEntry);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of string</returns>
        public ASW.APIServices.Core.Client.ApiResponse< string > CreateVocabularyEntryWithHttpInfo (string id, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->CreateVocabularyEntry");

            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->CreateVocabularyEntry");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = vocabularyEntry;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< string >("/vocabularies/{id}/entries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVocabularyEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateVocabularyEntryAsync (string id, VocabularyEntry vocabularyEntry)
        {
             ASW.APIServices.Core.Client.ApiResponse<string> localVarResponse = await CreateVocabularyEntryAsyncWithHttpInfo(id, vocabularyEntry);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<string>> CreateVocabularyEntryAsyncWithHttpInfo (string id, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->CreateVocabularyEntry");

            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->CreateVocabularyEntry");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = vocabularyEntry;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/vocabularies/{id}/entries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVocabularyEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns></returns>
        public void DeleteVocabularyEntry (string id, string elementId)
        {
             DeleteVocabularyEntryWithHttpInfo(id, elementId);
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.Core.Client.ApiResponse<Object> DeleteVocabularyEntryWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->DeleteVocabularyEntry");

            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->DeleteVocabularyEntry");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (elementId != null)
                localVarRequestOptions.PathParameters.Add("elementId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/vocabularies/{id}/entries/{elementId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVocabularyEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVocabularyEntryAsync (string id, string elementId)
        {
             await DeleteVocabularyEntryAsyncWithHttpInfo(id, elementId);

        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Object>> DeleteVocabularyEntryAsyncWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->DeleteVocabularyEntry");

            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->DeleteVocabularyEntry");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (elementId != null)
                localVarRequestOptions.PathParameters.Add("elementId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/vocabularies/{id}/entries/{elementId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVocabularyEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>List&lt;Vocabulary&gt;</returns>
        public List<Vocabulary> GetVocabularies (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<Vocabulary>> localVarResponse = GetVocabulariesWithHttpInfo(vocabularyTypeId, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;Vocabulary&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<Vocabulary> > GetVocabulariesWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {
            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (vocabularyTypeId != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "vocabularyTypeId", vocabularyTypeId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Vocabulary> >("/vocabularies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of List&lt;Vocabulary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vocabulary>> GetVocabulariesAsync (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<Vocabulary>> localVarResponse = await GetVocabulariesAsyncWithHttpInfo(vocabularyTypeId, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Vocabulary&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<Vocabulary>>> GetVocabulariesAsyncWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (vocabularyTypeId != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "vocabularyTypeId", vocabularyTypeId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Vocabulary>>("/vocabularies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Vocabulary</returns>
        public Vocabulary GetVocabulary (string id)
        {
             ASW.APIServices.Core.Client.ApiResponse<Vocabulary> localVarResponse = GetVocabularyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of Vocabulary</returns>
        public ASW.APIServices.Core.Client.ApiResponse< Vocabulary > GetVocabularyWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabulary");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Vocabulary >("/vocabularies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabulary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of Vocabulary</returns>
        public async System.Threading.Tasks.Task<Vocabulary> GetVocabularyAsync (string id)
        {
             ASW.APIServices.Core.Client.ApiResponse<Vocabulary> localVarResponse = await GetVocabularyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (Vocabulary)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Vocabulary>> GetVocabularyAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabulary");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Vocabulary>("/vocabularies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabulary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>VocabularyEntry</returns>
        public VocabularyEntry GetVocabularyElement (string id, string elementId)
        {
             ASW.APIServices.Core.Client.ApiResponse<VocabularyEntry> localVarResponse = GetVocabularyElementWithHttpInfo(id, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of VocabularyEntry</returns>
        public ASW.APIServices.Core.Client.ApiResponse< VocabularyEntry > GetVocabularyElementWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyElement");

            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->GetVocabularyElement");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (elementId != null)
                localVarRequestOptions.PathParameters.Add("elementId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< VocabularyEntry >("/vocabularies/{id}/entries/{elementId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyElement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of VocabularyEntry</returns>
        public async System.Threading.Tasks.Task<VocabularyEntry> GetVocabularyElementAsync (string id, string elementId)
        {
             ASW.APIServices.Core.Client.ApiResponse<VocabularyEntry> localVarResponse = await GetVocabularyElementAsyncWithHttpInfo(id, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse (VocabularyEntry)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<VocabularyEntry>> GetVocabularyElementAsyncWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyElement");

            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->GetVocabularyElement");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (elementId != null)
                localVarRequestOptions.PathParameters.Add("elementId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VocabularyEntry>("/vocabularies/{id}/entries/{elementId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyElement", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>List&lt;VocabularyEntry&gt;</returns>
        public List<VocabularyEntry> GetVocabularyEntries (string id)
        {
             ASW.APIServices.Core.Client.ApiResponse<List<VocabularyEntry>> localVarResponse = GetVocabularyEntriesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of List&lt;VocabularyEntry&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<VocabularyEntry> > GetVocabularyEntriesWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyEntries");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<VocabularyEntry> >("/vocabularies/{id}/entries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyEntries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of List&lt;VocabularyEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<VocabularyEntry>> GetVocabularyEntriesAsync (string id)
        {
             ASW.APIServices.Core.Client.ApiResponse<List<VocabularyEntry>> localVarResponse = await GetVocabularyEntriesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (List&lt;VocabularyEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<VocabularyEntry>>> GetVocabularyEntriesAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyEntries");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<VocabularyEntry>>("/vocabularies/{id}/entries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyEntries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>VocabularyType</returns>
        public VocabularyType GetVocabularyTypeById (string id)
        {
             ASW.APIServices.Core.Client.ApiResponse<VocabularyType> localVarResponse = GetVocabularyTypeByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of VocabularyType</returns>
        public ASW.APIServices.Core.Client.ApiResponse< VocabularyType > GetVocabularyTypeByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyTypeById");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< VocabularyType >("/vocabularyTypes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyTypeById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of VocabularyType</returns>
        public async System.Threading.Tasks.Task<VocabularyType> GetVocabularyTypeByIdAsync (string id)
        {
             ASW.APIServices.Core.Client.ApiResponse<VocabularyType> localVarResponse = await GetVocabularyTypeByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (VocabularyType)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<VocabularyType>> GetVocabularyTypeByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyTypeById");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<VocabularyType>("/vocabularyTypes/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyTypeById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VocabularyType&gt;</returns>
        public List<VocabularyType> GetVocabularyTypes ()
        {
             ASW.APIServices.Core.Client.ApiResponse<List<VocabularyType>> localVarResponse = GetVocabularyTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VocabularyType&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<VocabularyType> > GetVocabularyTypesWithHttpInfo ()
        {
            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<VocabularyType> >("/vocabularyTypes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VocabularyType&gt;</returns>
        public async System.Threading.Tasks.Task<List<VocabularyType>> GetVocabularyTypesAsync ()
        {
             ASW.APIServices.Core.Client.ApiResponse<List<VocabularyType>> localVarResponse = await GetVocabularyTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VocabularyType&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<VocabularyType>>> GetVocabularyTypesAsyncWithHttpInfo ()
        {

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<VocabularyType>>("/vocabularyTypes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVocabularyTypes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns></returns>
        public void PutVocabularyEntry (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
             PutVocabularyEntryWithHttpInfo(id, elementId, vocabularyEntry);
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.Core.Client.ApiResponse<Object> PutVocabularyEntryWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->PutVocabularyEntry");

            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->PutVocabularyEntry");

            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->PutVocabularyEntry");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (elementId != null)
                localVarRequestOptions.PathParameters.Add("elementId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(elementId)); // path parameter
            localVarRequestOptions.Data = vocabularyEntry;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/vocabularies/{id}/entries/{elementId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutVocabularyEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutVocabularyEntryAsync (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
             await PutVocabularyEntryAsyncWithHttpInfo(id, elementId, vocabularyEntry);

        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Object>> PutVocabularyEntryAsyncWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->PutVocabularyEntry");

            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->PutVocabularyEntry");

            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->PutVocabularyEntry");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (elementId != null)
                localVarRequestOptions.PathParameters.Add("elementId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(elementId)); // path parameter
            localVarRequestOptions.Data = vocabularyEntry;

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + ASW.APIServices.Core.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/vocabularies/{id}/entries/{elementId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutVocabularyEntry", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

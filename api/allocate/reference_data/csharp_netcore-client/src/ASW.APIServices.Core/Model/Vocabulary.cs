/* 
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Vocabulary
    /// </summary>
    [DataContract]
    public partial class Vocabulary :  IEquatable<Vocabulary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vocabulary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vocabulary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vocabulary" /> class.
        /// </summary>
        /// <param name="id">ID of this vocabulary (required).</param>
        /// <param name="typeId">ID of the type of vocabulary that this is an example of (required).</param>
        /// <param name="code">Code for this vocabulary. Unique within the type of vocabulary (required).</param>
        /// <param name="description">Optional description of the vocabulary.</param>
        public Vocabulary(string id = default(string), string typeId = default(string), string code = default(string), string description = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Vocabulary and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "typeId" is required (not null)
            if (typeId == null)
            {
                throw new InvalidDataException("typeId is a required property for Vocabulary and cannot be null");
            }
            else
            {
                this.TypeId = typeId;
            }

            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for Vocabulary and cannot be null");
            }
            else
            {
                this.Code = code;
            }

            this.Description = description;
        }
        
        /// <summary>
        /// ID of this vocabulary
        /// </summary>
        /// <value>ID of this vocabulary</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ID of the type of vocabulary that this is an example of
        /// </summary>
        /// <value>ID of the type of vocabulary that this is an example of</value>
        [DataMember(Name="typeId", EmitDefaultValue=false)]
        public string TypeId { get; set; }

        /// <summary>
        /// Code for this vocabulary. Unique within the type of vocabulary
        /// </summary>
        /// <value>Code for this vocabulary. Unique within the type of vocabulary</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Optional description of the vocabulary
        /// </summary>
        /// <value>Optional description of the vocabulary</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vocabulary {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vocabulary);
        }

        /// <summary>
        /// Returns true if Vocabulary instances are equal
        /// </summary>
        /// <param name="input">Instance of Vocabulary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vocabulary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

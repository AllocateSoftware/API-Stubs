/* 
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMappingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>string</returns>
        string CreateMapping (string setId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateMappingWithHttpInfo (string setId, Mapping mapping);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns></returns>
        void DeleteMapping (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMappingWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Mapping</returns>
        Mapping GetMapping (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>ApiResponse of Mapping</returns>
        ApiResponse<Mapping> GetMappingWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>MappingSet</returns>
        MappingSet GetMappingSetById (string setId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of MappingSet</returns>
        ApiResponse<MappingSet> GetMappingSetByIdWithHttpInfo (string setId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MappingSet&gt;</returns>
        List<MappingSet> GetMappingSets ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MappingSet&gt;</returns>
        ApiResponse<List<MappingSet>> GetMappingSetsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>List&lt;Mapping&gt;</returns>
        List<Mapping> GetMappings (string setId, string fromCode = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>ApiResponse of List&lt;Mapping&gt;</returns>
        ApiResponse<List<Mapping>> GetMappingsWithHttpInfo (string setId, string fromCode = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns></returns>
        void PutMapping (string id, string mappingId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutMappingWithHttpInfo (string id, string mappingId, Mapping mapping);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateMappingAsync (string setId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateMappingAsyncWithHttpInfo (string setId, Mapping mapping);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMappingAsync (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMappingAsyncWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of Mapping</returns>
        System.Threading.Tasks.Task<Mapping> GetMappingAsync (string id, string mappingId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of ApiResponse (Mapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<Mapping>> GetMappingAsyncWithHttpInfo (string id, string mappingId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of MappingSet</returns>
        System.Threading.Tasks.Task<MappingSet> GetMappingSetByIdAsync (string setId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a mapping set by ID
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (MappingSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<MappingSet>> GetMappingSetByIdAsyncWithHttpInfo (string setId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MappingSet&gt;</returns>
        System.Threading.Tasks.Task<List<MappingSet>> GetMappingSetsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of mapping sets that you may utilise
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MappingSet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MappingSet>>> GetMappingSetsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of List&lt;Mapping&gt;</returns>
        System.Threading.Tasks.Task<List<Mapping>> GetMappingsAsync (string setId, string fromCode = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a mapping set
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Mapping&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Mapping>>> GetMappingsAsyncWithHttpInfo (string setId, string fromCode = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutMappingAsync (string id, string mappingId, Mapping mapping);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update a mapping
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutMappingAsyncWithHttpInfo (string id, string mappingId, Mapping mapping);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MappingsApi : IMappingsApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MappingsApi(String basePath)
        {
            this.Configuration = new ASW.APIServices.Core.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public MappingsApi()
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MappingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MappingsApi(ASW.APIServices.Core.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>string</returns>
        public string CreateMapping (string setId, Mapping mapping)
        {
             ApiResponse<string> localVarResponse = CreateMappingWithHttpInfo(setId, mapping);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> CreateMappingWithHttpInfo (string setId, Mapping mapping)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->CreateMapping");
            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->CreateMapping");

            var localVarPath = "/mappingSets/{setId}/mappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setId != null) localVarPathParams.Add("setId", this.Configuration.ApiClient.ParameterToString(setId)); // path parameter
            if (mapping != null && mapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mapping; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateMappingAsync (string setId, Mapping mapping)
        {
             ApiResponse<string> localVarResponse = await CreateMappingAsyncWithHttpInfo(setId, mapping);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new entry in a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateMappingAsyncWithHttpInfo (string setId, Mapping mapping)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->CreateMapping");
            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->CreateMapping");

            var localVarPath = "/mappingSets/{setId}/mappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setId != null) localVarPathParams.Add("setId", this.Configuration.ApiClient.ParameterToString(setId)); // path parameter
            if (mapping != null && mapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mapping; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns></returns>
        public void DeleteMapping (string id, string mappingId)
        {
             DeleteMappingWithHttpInfo(id, mappingId);
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMappingWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MappingsApi->DeleteMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->DeleteMapping");

            var localVarPath = "/mappingSets/{id}/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMappingAsync (string id, string mappingId)
        {
             await DeleteMappingAsyncWithHttpInfo(id, mappingId);

        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMappingAsyncWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MappingsApi->DeleteMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->DeleteMapping");

            var localVarPath = "/mappingSets/{id}/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Mapping</returns>
        public Mapping GetMapping (string id, string mappingId)
        {
             ApiResponse<Mapping> localVarResponse = GetMappingWithHttpInfo(id, mappingId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>ApiResponse of Mapping</returns>
        public ApiResponse<Mapping> GetMappingWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MappingsApi->GetMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->GetMapping");

            var localVarPath = "/mappingSets/{id}/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Mapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Mapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Mapping)));
        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of Mapping</returns>
        public async System.Threading.Tasks.Task<Mapping> GetMappingAsync (string id, string mappingId)
        {
             ApiResponse<Mapping> localVarResponse = await GetMappingAsyncWithHttpInfo(id, mappingId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the mapping set</param>
        /// <param name="mappingId">The ID of the mapping set element</param>
        /// <returns>Task of ApiResponse (Mapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Mapping>> GetMappingAsyncWithHttpInfo (string id, string mappingId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MappingsApi->GetMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->GetMapping");

            var localVarPath = "/mappingSets/{id}/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Mapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Mapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Mapping)));
        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>MappingSet</returns>
        public MappingSet GetMappingSetById (string setId)
        {
             ApiResponse<MappingSet> localVarResponse = GetMappingSetByIdWithHttpInfo(setId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of MappingSet</returns>
        public ApiResponse<MappingSet> GetMappingSetByIdWithHttpInfo (string setId)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappingSetById");

            var localVarPath = "/mappingSets/{setId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setId != null) localVarPathParams.Add("setId", this.Configuration.ApiClient.ParameterToString(setId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappingSetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MappingSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MappingSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MappingSet)));
        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of MappingSet</returns>
        public async System.Threading.Tasks.Task<MappingSet> GetMappingSetByIdAsync (string setId)
        {
             ApiResponse<MappingSet> localVarResponse = await GetMappingSetByIdAsyncWithHttpInfo(setId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a mapping set by ID
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (MappingSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MappingSet>> GetMappingSetByIdAsyncWithHttpInfo (string setId)
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappingSetById");

            var localVarPath = "/mappingSets/{setId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setId != null) localVarPathParams.Add("setId", this.Configuration.ApiClient.ParameterToString(setId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappingSetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MappingSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MappingSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MappingSet)));
        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MappingSet&gt;</returns>
        public List<MappingSet> GetMappingSets ()
        {
             ApiResponse<List<MappingSet>> localVarResponse = GetMappingSetsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MappingSet&gt;</returns>
        public ApiResponse<List<MappingSet>> GetMappingSetsWithHttpInfo ()
        {

            var localVarPath = "/mappingSets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappingSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MappingSet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MappingSet>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MappingSet>)));
        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MappingSet&gt;</returns>
        public async System.Threading.Tasks.Task<List<MappingSet>> GetMappingSetsAsync ()
        {
             ApiResponse<List<MappingSet>> localVarResponse = await GetMappingSetsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of mapping sets that you may utilise
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MappingSet&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MappingSet>>> GetMappingSetsAsyncWithHttpInfo ()
        {

            var localVarPath = "/mappingSets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappingSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MappingSet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MappingSet>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MappingSet>)));
        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>List&lt;Mapping&gt;</returns>
        public List<Mapping> GetMappings (string setId, string fromCode = default(string))
        {
             ApiResponse<List<Mapping>> localVarResponse = GetMappingsWithHttpInfo(setId, fromCode);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>ApiResponse of List&lt;Mapping&gt;</returns>
        public ApiResponse<List<Mapping>> GetMappingsWithHttpInfo (string setId, string fromCode = default(string))
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappings");

            var localVarPath = "/mappingSets/{setId}/mappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setId != null) localVarPathParams.Add("setId", this.Configuration.ApiClient.ParameterToString(setId)); // path parameter
            if (fromCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromCode", fromCode)); // query parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Mapping>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Mapping>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Mapping>)));
        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of List&lt;Mapping&gt;</returns>
        public async System.Threading.Tasks.Task<List<Mapping>> GetMappingsAsync (string setId, string fromCode = default(string))
        {
             ApiResponse<List<Mapping>> localVarResponse = await GetMappingsAsyncWithHttpInfo(setId, fromCode);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the elements of a mapping set
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setId">The ID of the mapping set</param>
        /// <param name="fromCode">Search for a mapping where the from code matches the provided string (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Mapping&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Mapping>>> GetMappingsAsyncWithHttpInfo (string setId, string fromCode = default(string))
        {
            // verify the required parameter 'setId' is set
            if (setId == null)
                throw new ApiException(400, "Missing required parameter 'setId' when calling MappingsApi->GetMappings");

            var localVarPath = "/mappingSets/{setId}/mappings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setId != null) localVarPathParams.Add("setId", this.Configuration.ApiClient.ParameterToString(setId)); // path parameter
            if (fromCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromCode", fromCode)); // query parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Mapping>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Mapping>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Mapping>)));
        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns></returns>
        public void PutMapping (string id, string mappingId, Mapping mapping)
        {
             PutMappingWithHttpInfo(id, mappingId, mapping);
        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutMappingWithHttpInfo (string id, string mappingId, Mapping mapping)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MappingsApi->PutMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->PutMapping");
            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->PutMapping");

            var localVarPath = "/mappingSets/{id}/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter
            if (mapping != null && mapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mapping; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutMappingAsync (string id, string mappingId, Mapping mapping)
        {
             await PutMappingAsyncWithHttpInfo(id, mappingId, mapping);

        }

        /// <summary>
        ///  Update a mapping
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="mappingId">The ID of the vocabulary element</param>
        /// <param name="mapping">Details of the mapping</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutMappingAsyncWithHttpInfo (string id, string mappingId, Mapping mapping)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MappingsApi->PutMapping");
            // verify the required parameter 'mappingId' is set
            if (mappingId == null)
                throw new ApiException(400, "Missing required parameter 'mappingId' when calling MappingsApi->PutMapping");
            // verify the required parameter 'mapping' is set
            if (mapping == null)
                throw new ApiException(400, "Missing required parameter 'mapping' when calling MappingsApi->PutMapping");

            var localVarPath = "/mappingSets/{id}/mappings/{mappingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mappingId != null) localVarPathParams.Add("mappingId", this.Configuration.ApiClient.ParameterToString(mappingId)); // path parameter
            if (mapping != null && mapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mapping; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}

/* 
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>string</returns>
        string CreateVocabularyEntry (string id, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateVocabularyEntryWithHttpInfo (string id, VocabularyEntry vocabularyEntry);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns></returns>
        void DeleteVocabularyEntry (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVocabularyEntryWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>List&lt;Vocabulary&gt;</returns>
        List<Vocabulary> GetVocabularies (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;Vocabulary&gt;</returns>
        ApiResponse<List<Vocabulary>> GetVocabulariesWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Vocabulary</returns>
        Vocabulary GetVocabulary (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of Vocabulary</returns>
        ApiResponse<Vocabulary> GetVocabularyWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>VocabularyEntry</returns>
        VocabularyEntry GetVocabularyElement (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of VocabularyEntry</returns>
        ApiResponse<VocabularyEntry> GetVocabularyElementWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>List&lt;VocabularyEntry&gt;</returns>
        List<VocabularyEntry> GetVocabularyEntries (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of List&lt;VocabularyEntry&gt;</returns>
        ApiResponse<List<VocabularyEntry>> GetVocabularyEntriesWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>VocabularyType</returns>
        VocabularyType GetVocabularyTypeById (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of VocabularyType</returns>
        ApiResponse<VocabularyType> GetVocabularyTypeByIdWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VocabularyType&gt;</returns>
        List<VocabularyType> GetVocabularyTypes ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VocabularyType&gt;</returns>
        ApiResponse<List<VocabularyType>> GetVocabularyTypesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns></returns>
        void PutVocabularyEntry (string id, string elementId, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PutVocabularyEntryWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateVocabularyEntryAsync (string id, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateVocabularyEntryAsyncWithHttpInfo (string id, VocabularyEntry vocabularyEntry);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVocabularyEntryAsync (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a vocabulary entry
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVocabularyEntryAsyncWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of List&lt;Vocabulary&gt;</returns>
        System.Threading.Tasks.Task<List<Vocabulary>> GetVocabulariesAsync (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Vocabulary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vocabulary>>> GetVocabulariesAsyncWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of Vocabulary</returns>
        System.Threading.Tasks.Task<Vocabulary> GetVocabularyAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (Vocabulary)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vocabulary>> GetVocabularyAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of VocabularyEntry</returns>
        System.Threading.Tasks.Task<VocabularyEntry> GetVocabularyElementAsync (string id, string elementId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse (VocabularyEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<VocabularyEntry>> GetVocabularyElementAsyncWithHttpInfo (string id, string elementId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of List&lt;VocabularyEntry&gt;</returns>
        System.Threading.Tasks.Task<List<VocabularyEntry>> GetVocabularyEntriesAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return the elements of a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (List&lt;VocabularyEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VocabularyEntry>>> GetVocabularyEntriesAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of VocabularyType</returns>
        System.Threading.Tasks.Task<VocabularyType> GetVocabularyTypeByIdAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a vocabulary type
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (VocabularyType)</returns>
        System.Threading.Tasks.Task<ApiResponse<VocabularyType>> GetVocabularyTypeByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VocabularyType&gt;</returns>
        System.Threading.Tasks.Task<List<VocabularyType>> GetVocabularyTypesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Return a list of vocabularies types that you may query
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VocabularyType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VocabularyType>>> GetVocabularyTypesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PutVocabularyEntryAsync (string id, string elementId, VocabularyEntry vocabularyEntry);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new entry in a vocabulary
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PutVocabularyEntryAsyncWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferenceDataApi : IReferenceDataApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi(String basePath)
        {
            this.Configuration = new ASW.APIServices.Core.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi()
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferenceDataApi(ASW.APIServices.Core.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>string</returns>
        public string CreateVocabularyEntry (string id, VocabularyEntry vocabularyEntry)
        {
             ApiResponse<string> localVarResponse = CreateVocabularyEntryWithHttpInfo(id, vocabularyEntry);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> CreateVocabularyEntryWithHttpInfo (string id, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->CreateVocabularyEntry");
            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->CreateVocabularyEntry");

            var localVarPath = "/vocabularies/{id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (vocabularyEntry != null && vocabularyEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vocabularyEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vocabularyEntry; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVocabularyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateVocabularyEntryAsync (string id, VocabularyEntry vocabularyEntry)
        {
             ApiResponse<string> localVarResponse = await CreateVocabularyEntryAsyncWithHttpInfo(id, vocabularyEntry);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateVocabularyEntryAsyncWithHttpInfo (string id, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->CreateVocabularyEntry");
            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->CreateVocabularyEntry");

            var localVarPath = "/vocabularies/{id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (vocabularyEntry != null && vocabularyEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vocabularyEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vocabularyEntry; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVocabularyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns></returns>
        public void DeleteVocabularyEntry (string id, string elementId)
        {
             DeleteVocabularyEntryWithHttpInfo(id, elementId);
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVocabularyEntryWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->DeleteVocabularyEntry");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->DeleteVocabularyEntry");

            var localVarPath = "/vocabularies/{id}/entries/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVocabularyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVocabularyEntryAsync (string id, string elementId)
        {
             await DeleteVocabularyEntryAsyncWithHttpInfo(id, elementId);

        }

        /// <summary>
        ///  Delete a vocabulary entry
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVocabularyEntryAsyncWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->DeleteVocabularyEntry");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->DeleteVocabularyEntry");

            var localVarPath = "/vocabularies/{id}/entries/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVocabularyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>List&lt;Vocabulary&gt;</returns>
        public List<Vocabulary> GetVocabularies (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {
             ApiResponse<List<Vocabulary>> localVarResponse = GetVocabulariesWithHttpInfo(vocabularyTypeId, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;Vocabulary&gt;</returns>
        public ApiResponse<List<Vocabulary>> GetVocabulariesWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {

            var localVarPath = "/vocabularies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vocabularyTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vocabularyTypeId", vocabularyTypeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vocabulary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Vocabulary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vocabulary>)));
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of List&lt;Vocabulary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vocabulary>> GetVocabulariesAsync (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {
             ApiResponse<List<Vocabulary>> localVarResponse = await GetVocabulariesAsyncWithHttpInfo(vocabularyTypeId, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vocabularyTypeId">Limit to vocabulary types (optional)</param>
        /// <param name="page">Return page of results (optional)</param>
        /// <param name="pageSize">Records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Vocabulary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Vocabulary>>> GetVocabulariesAsyncWithHttpInfo (string vocabularyTypeId = default(string), string page = default(string), string pageSize = default(string))
        {

            var localVarPath = "/vocabularies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vocabularyTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vocabularyTypeId", vocabularyTypeId)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vocabulary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Vocabulary>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vocabulary>)));
        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Vocabulary</returns>
        public Vocabulary GetVocabulary (string id)
        {
             ApiResponse<Vocabulary> localVarResponse = GetVocabularyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of Vocabulary</returns>
        public ApiResponse<Vocabulary> GetVocabularyWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabulary");

            var localVarPath = "/vocabularies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabulary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vocabulary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Vocabulary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vocabulary)));
        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of Vocabulary</returns>
        public async System.Threading.Tasks.Task<Vocabulary> GetVocabularyAsync (string id)
        {
             ApiResponse<Vocabulary> localVarResponse = await GetVocabularyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of vocabularies that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (Vocabulary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vocabulary>> GetVocabularyAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabulary");

            var localVarPath = "/vocabularies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabulary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vocabulary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Vocabulary) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vocabulary)));
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>VocabularyEntry</returns>
        public VocabularyEntry GetVocabularyElement (string id, string elementId)
        {
             ApiResponse<VocabularyEntry> localVarResponse = GetVocabularyElementWithHttpInfo(id, elementId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>ApiResponse of VocabularyEntry</returns>
        public ApiResponse<VocabularyEntry> GetVocabularyElementWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyElement");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->GetVocabularyElement");

            var localVarPath = "/vocabularies/{id}/entries/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VocabularyEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VocabularyEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VocabularyEntry)));
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of VocabularyEntry</returns>
        public async System.Threading.Tasks.Task<VocabularyEntry> GetVocabularyElementAsync (string id, string elementId)
        {
             ApiResponse<VocabularyEntry> localVarResponse = await GetVocabularyElementAsyncWithHttpInfo(id, elementId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <returns>Task of ApiResponse (VocabularyEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VocabularyEntry>> GetVocabularyElementAsyncWithHttpInfo (string id, string elementId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyElement");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->GetVocabularyElement");

            var localVarPath = "/vocabularies/{id}/entries/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VocabularyEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VocabularyEntry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VocabularyEntry)));
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>List&lt;VocabularyEntry&gt;</returns>
        public List<VocabularyEntry> GetVocabularyEntries (string id)
        {
             ApiResponse<List<VocabularyEntry>> localVarResponse = GetVocabularyEntriesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>ApiResponse of List&lt;VocabularyEntry&gt;</returns>
        public ApiResponse<List<VocabularyEntry>> GetVocabularyEntriesWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyEntries");

            var localVarPath = "/vocabularies/{id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VocabularyEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VocabularyEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VocabularyEntry>)));
        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of List&lt;VocabularyEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<VocabularyEntry>> GetVocabularyEntriesAsync (string id)
        {
             ApiResponse<List<VocabularyEntry>> localVarResponse = await GetVocabularyEntriesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return the elements of a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <returns>Task of ApiResponse (List&lt;VocabularyEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VocabularyEntry>>> GetVocabularyEntriesAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyEntries");

            var localVarPath = "/vocabularies/{id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VocabularyEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VocabularyEntry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VocabularyEntry>)));
        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>VocabularyType</returns>
        public VocabularyType GetVocabularyTypeById (string id)
        {
             ApiResponse<VocabularyType> localVarResponse = GetVocabularyTypeByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>ApiResponse of VocabularyType</returns>
        public ApiResponse<VocabularyType> GetVocabularyTypeByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyTypeById");

            var localVarPath = "/vocabularyTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VocabularyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VocabularyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VocabularyType)));
        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of VocabularyType</returns>
        public async System.Threading.Tasks.Task<VocabularyType> GetVocabularyTypeByIdAsync (string id)
        {
             ApiResponse<VocabularyType> localVarResponse = await GetVocabularyTypeByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a vocabulary type
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary type</param>
        /// <returns>Task of ApiResponse (VocabularyType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VocabularyType>> GetVocabularyTypeByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetVocabularyTypeById");

            var localVarPath = "/vocabularyTypes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VocabularyType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VocabularyType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VocabularyType)));
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;VocabularyType&gt;</returns>
        public List<VocabularyType> GetVocabularyTypes ()
        {
             ApiResponse<List<VocabularyType>> localVarResponse = GetVocabularyTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;VocabularyType&gt;</returns>
        public ApiResponse<List<VocabularyType>> GetVocabularyTypesWithHttpInfo ()
        {

            var localVarPath = "/vocabularyTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VocabularyType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VocabularyType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VocabularyType>)));
        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;VocabularyType&gt;</returns>
        public async System.Threading.Tasks.Task<List<VocabularyType>> GetVocabularyTypesAsync ()
        {
             ApiResponse<List<VocabularyType>> localVarResponse = await GetVocabularyTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Return a list of vocabularies types that you may query
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;VocabularyType&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VocabularyType>>> GetVocabularyTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/vocabularyTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVocabularyTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VocabularyType>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VocabularyType>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VocabularyType>)));
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns></returns>
        public void PutVocabularyEntry (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
             PutVocabularyEntryWithHttpInfo(id, elementId, vocabularyEntry);
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PutVocabularyEntryWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->PutVocabularyEntry");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->PutVocabularyEntry");
            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->PutVocabularyEntry");

            var localVarPath = "/vocabularies/{id}/entries/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (vocabularyEntry != null && vocabularyEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vocabularyEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vocabularyEntry; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutVocabularyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PutVocabularyEntryAsync (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
             await PutVocabularyEntryAsyncWithHttpInfo(id, elementId, vocabularyEntry);

        }

        /// <summary>
        ///  Create a new entry in a vocabulary
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the vocabulary</param>
        /// <param name="elementId">The ID of the vocabulary element</param>
        /// <param name="vocabularyEntry">Details of the vocabulary entry</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PutVocabularyEntryAsyncWithHttpInfo (string id, string elementId, VocabularyEntry vocabularyEntry)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->PutVocabularyEntry");
            // verify the required parameter 'elementId' is set
            if (elementId == null)
                throw new ApiException(400, "Missing required parameter 'elementId' when calling ReferenceDataApi->PutVocabularyEntry");
            // verify the required parameter 'vocabularyEntry' is set
            if (vocabularyEntry == null)
                throw new ApiException(400, "Missing required parameter 'vocabularyEntry' when calling ReferenceDataApi->PutVocabularyEntry");

            var localVarPath = "/vocabularies/{id}/entries/{elementId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (elementId != null) localVarPathParams.Add("elementId", this.Configuration.ApiClient.ParameterToString(elementId)); // path parameter
            if (vocabularyEntry != null && vocabularyEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vocabularyEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vocabularyEntry; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutVocabularyEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}

/* 
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Api;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Test
{
    /// <summary>
    ///  Class for testing MappingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MappingsApiTests
    {
        private MappingsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MappingsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MappingsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MappingsApi
            //Assert.IsInstanceOf(typeof(MappingsApi), instance);
        }

        
        /// <summary>
        /// Test CreateMapping
        /// </summary>
        [Test]
        public void CreateMappingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setId = null;
            //Mapping mapping = null;
            //var response = instance.CreateMapping(setId, mapping);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteMapping
        /// </summary>
        [Test]
        public void DeleteMappingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string mappingId = null;
            //instance.DeleteMapping(id, mappingId);
            
        }
        
        /// <summary>
        /// Test GetMapping
        /// </summary>
        [Test]
        public void GetMappingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string mappingId = null;
            //var response = instance.GetMapping(id, mappingId);
            //Assert.IsInstanceOf(typeof(Mapping), response, "response is Mapping");
        }
        
        /// <summary>
        /// Test GetMappingSetById
        /// </summary>
        [Test]
        public void GetMappingSetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setId = null;
            //var response = instance.GetMappingSetById(setId);
            //Assert.IsInstanceOf(typeof(MappingSet), response, "response is MappingSet");
        }
        
        /// <summary>
        /// Test GetMappingSets
        /// </summary>
        [Test]
        public void GetMappingSetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMappingSets();
            //Assert.IsInstanceOf(typeof(List<MappingSet>), response, "response is List<MappingSet>");
        }
        
        /// <summary>
        /// Test GetMappings
        /// </summary>
        [Test]
        public void GetMappingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string setId = null;
            //string fromCode = null;
            //var response = instance.GetMappings(setId, fromCode);
            //Assert.IsInstanceOf(typeof(List<Mapping>), response, "response is List<Mapping>");
        }
        
        /// <summary>
        /// Test PutMapping
        /// </summary>
        [Test]
        public void PutMappingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string mappingId = null;
            //Mapping mapping = null;
            //instance.PutMapping(id, mappingId, mapping);
            
        }
        
    }

}

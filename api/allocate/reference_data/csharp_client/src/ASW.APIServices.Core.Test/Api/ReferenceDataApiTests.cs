/* 
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Api;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Test
{
    /// <summary>
    ///  Class for testing ReferenceDataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReferenceDataApiTests
    {
        private ReferenceDataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReferenceDataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReferenceDataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ReferenceDataApi
            //Assert.IsInstanceOf(typeof(ReferenceDataApi), instance);
        }

        
        /// <summary>
        /// Test CreateVocabularyEntry
        /// </summary>
        [Test]
        public void CreateVocabularyEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //VocabularyEntry vocabularyEntry = null;
            //var response = instance.CreateVocabularyEntry(id, vocabularyEntry);
            //Assert.IsInstanceOf(typeof(string), response, "response is string");
        }
        
        /// <summary>
        /// Test DeleteVocabularyEntry
        /// </summary>
        [Test]
        public void DeleteVocabularyEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string elementId = null;
            //instance.DeleteVocabularyEntry(id, elementId);
            
        }
        
        /// <summary>
        /// Test GetVocabularies
        /// </summary>
        [Test]
        public void GetVocabulariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vocabularyTypeId = null;
            //string page = null;
            //string pageSize = null;
            //var response = instance.GetVocabularies(vocabularyTypeId, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<Vocabulary>), response, "response is List<Vocabulary>");
        }
        
        /// <summary>
        /// Test GetVocabulary
        /// </summary>
        [Test]
        public void GetVocabularyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetVocabulary(id);
            //Assert.IsInstanceOf(typeof(Vocabulary), response, "response is Vocabulary");
        }
        
        /// <summary>
        /// Test GetVocabularyElement
        /// </summary>
        [Test]
        public void GetVocabularyElementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string elementId = null;
            //var response = instance.GetVocabularyElement(id, elementId);
            //Assert.IsInstanceOf(typeof(VocabularyEntry), response, "response is VocabularyEntry");
        }
        
        /// <summary>
        /// Test GetVocabularyEntries
        /// </summary>
        [Test]
        public void GetVocabularyEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetVocabularyEntries(id);
            //Assert.IsInstanceOf(typeof(List<VocabularyEntry>), response, "response is List<VocabularyEntry>");
        }
        
        /// <summary>
        /// Test GetVocabularyTypeById
        /// </summary>
        [Test]
        public void GetVocabularyTypeByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetVocabularyTypeById(id);
            //Assert.IsInstanceOf(typeof(VocabularyType), response, "response is VocabularyType");
        }
        
        /// <summary>
        /// Test GetVocabularyTypes
        /// </summary>
        [Test]
        public void GetVocabularyTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetVocabularyTypes();
            //Assert.IsInstanceOf(typeof(List<VocabularyType>), response, "response is List<VocabularyType>");
        }
        
        /// <summary>
        /// Test PutVocabularyEntry
        /// </summary>
        [Test]
        public void PutVocabularyEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string elementId = null;
            //VocabularyEntry vocabularyEntry = null;
            //instance.PutVocabularyEntry(id, elementId, vocabularyEntry);
            
        }
        
    }

}

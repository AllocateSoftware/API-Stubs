/**
 * Reference data and Mappings API
 *      ## API for accessing reference data and mapping information 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Vocabulary } from '../model/vocabulary';
import { VocabularyEntry } from '../model/vocabularyEntry';
import { VocabularyType } from '../model/vocabularyType';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ReferenceDataService {

    protected basePath = 'http://healthsuite.allocatesoftware.com/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary
     * @param vocabularyEntry Details of the vocabulary entry
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVocabularyEntry(id: string, vocabularyEntry: VocabularyEntry, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createVocabularyEntry(id: string, vocabularyEntry: VocabularyEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createVocabularyEntry(id: string, vocabularyEntry: VocabularyEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createVocabularyEntry(id: string, vocabularyEntry: VocabularyEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createVocabularyEntry.');
        }
        if (vocabularyEntry === null || vocabularyEntry === undefined) {
            throw new Error('Required parameter vocabularyEntry was null or undefined when calling createVocabularyEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.configuration.basePath}/vocabularies/${encodeURIComponent(String(id))}/entries`,
            vocabularyEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a vocabulary entry
     * @param id The ID of the vocabulary
     * @param elementId The ID of the vocabulary element
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVocabularyEntry(id: string, elementId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVocabularyEntry(id: string, elementId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVocabularyEntry(id: string, elementId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVocabularyEntry(id: string, elementId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteVocabularyEntry.');
        }
        if (elementId === null || elementId === undefined) {
            throw new Error('Required parameter elementId was null or undefined when calling deleteVocabularyEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/vocabularies/${encodeURIComponent(String(id))}/entries/${encodeURIComponent(String(elementId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return a list of vocabularies types that you may query
     * @param vocabularyTypeId Limit to vocabulary types
     * @param page Return page of results
     * @param pageSize Records per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVocabularies(vocabularyTypeId?: string, page?: string, pageSize?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Vocabulary>>;
    public getVocabularies(vocabularyTypeId?: string, page?: string, pageSize?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Vocabulary>>>;
    public getVocabularies(vocabularyTypeId?: string, page?: string, pageSize?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Vocabulary>>>;
    public getVocabularies(vocabularyTypeId?: string, page?: string, pageSize?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (vocabularyTypeId !== undefined && vocabularyTypeId !== null) {
            queryParameters = queryParameters.set('vocabularyTypeId', <any>vocabularyTypeId);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<Vocabulary>>(`${this.configuration.basePath}/vocabularies`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return a list of vocabularies that you may query
     * @param id The ID of the vocabulary
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVocabulary(id: string, observe?: 'body', reportProgress?: boolean): Observable<Vocabulary>;
    public getVocabulary(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Vocabulary>>;
    public getVocabulary(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Vocabulary>>;
    public getVocabulary(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVocabulary.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Vocabulary>(`${this.configuration.basePath}/vocabularies/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary
     * @param elementId The ID of the vocabulary element
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVocabularyElement(id: string, elementId: string, observe?: 'body', reportProgress?: boolean): Observable<VocabularyEntry>;
    public getVocabularyElement(id: string, elementId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VocabularyEntry>>;
    public getVocabularyElement(id: string, elementId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VocabularyEntry>>;
    public getVocabularyElement(id: string, elementId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVocabularyElement.');
        }
        if (elementId === null || elementId === undefined) {
            throw new Error('Required parameter elementId was null or undefined when calling getVocabularyElement.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<VocabularyEntry>(`${this.configuration.basePath}/vocabularies/${encodeURIComponent(String(id))}/entries/${encodeURIComponent(String(elementId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return the elements of a vocabulary
     * @param id The ID of the vocabulary
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVocabularyEntries(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VocabularyEntry>>;
    public getVocabularyEntries(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VocabularyEntry>>>;
    public getVocabularyEntries(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VocabularyEntry>>>;
    public getVocabularyEntries(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVocabularyEntries.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<VocabularyEntry>>(`${this.configuration.basePath}/vocabularies/${encodeURIComponent(String(id))}/entries`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return a vocabulary type
     * @param id The ID of the vocabulary type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVocabularyTypeById(id: string, observe?: 'body', reportProgress?: boolean): Observable<VocabularyType>;
    public getVocabularyTypeById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VocabularyType>>;
    public getVocabularyTypeById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VocabularyType>>;
    public getVocabularyTypeById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getVocabularyTypeById.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<VocabularyType>(`${this.configuration.basePath}/vocabularyTypes/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return a list of vocabularies types that you may query
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVocabularyTypes(observe?: 'body', reportProgress?: boolean): Observable<Array<VocabularyType>>;
    public getVocabularyTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VocabularyType>>>;
    public getVocabularyTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VocabularyType>>>;
    public getVocabularyTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Array<VocabularyType>>(`${this.configuration.basePath}/vocabularyTypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new entry in a vocabulary
     * @param id The ID of the vocabulary
     * @param elementId The ID of the vocabulary element
     * @param vocabularyEntry Details of the vocabulary entry
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putVocabularyEntry(id: string, elementId: string, vocabularyEntry: VocabularyEntry, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putVocabularyEntry(id: string, elementId: string, vocabularyEntry: VocabularyEntry, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putVocabularyEntry(id: string, elementId: string, vocabularyEntry: VocabularyEntry, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putVocabularyEntry(id: string, elementId: string, vocabularyEntry: VocabularyEntry, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putVocabularyEntry.');
        }
        if (elementId === null || elementId === undefined) {
            throw new Error('Required parameter elementId was null or undefined when calling putVocabularyEntry.');
        }
        if (vocabularyEntry === null || vocabularyEntry === undefined) {
            throw new Error('Required parameter vocabularyEntry was null or undefined when calling putVocabularyEntry.');
        }

        let headers = this.defaultHeaders;

        // authentication (jwt) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/vocabularies/${encodeURIComponent(String(id))}/entries/${encodeURIComponent(String(elementId))}`,
            vocabularyEntry,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

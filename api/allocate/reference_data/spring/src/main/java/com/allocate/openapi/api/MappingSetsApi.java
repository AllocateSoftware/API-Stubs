/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.openapi.api;

import com.allocate.openapi.model.Mapping;
import com.allocate.openapi.model.MappingSet;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:34:47.784750Z[Europe/London]")

@Validated
@Api(value = "mappingSets", description = "the mappingSets API")
public interface MappingSetsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "createMapping", notes = "Create a new entry in a mapping set", response = String.class, authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Mappings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created", response = String.class) })
    @RequestMapping(value = "/mappingSets/{setId}/mappings",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> createMapping(@ApiParam(value = "The ID of the mapping set",required=true) @PathVariable("setId") String setId,@ApiParam(value = "Details of the mapping" ,required=true )  @Valid @RequestBody Mapping mapping) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "deleteMapping", notes = "Delete a vocabulary entry", authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Mappings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated successfully") })
    @RequestMapping(value = "/mappingSets/{id}/mappings/{mappingId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteMapping(@ApiParam(value = "The ID of the vocabulary",required=true) @PathVariable("id") String id,@ApiParam(value = "The ID of the mapping",required=true) @PathVariable("mappingId") String mappingId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getMapping", notes = "Return the mapping", response = Mapping.class, authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Mappings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returning a list of vocabularies", response = Mapping.class) })
    @RequestMapping(value = "/mappingSets/{id}/mappings/{mappingId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Mapping> getMapping(@ApiParam(value = "The ID of the mapping set",required=true) @PathVariable("id") String id,@ApiParam(value = "The ID of the mapping set element",required=true) @PathVariable("mappingId") String mappingId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mappingSetId\" : \"mappingSetId\", \"from\" : { \"code\" : \"ABCD\", \"title\" : \"ABCD\" }, \"id\" : \"id\", \"to\" : { \"code\" : \"ABCD\", \"title\" : \"ABCD\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getMappingSetById", notes = "Get a mapping set by ID", response = MappingSet.class, authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Mappings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returning a list of mapping sets", response = MappingSet.class) })
    @RequestMapping(value = "/mappingSets/{setId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<MappingSet> getMappingSetById(@ApiParam(value = "The ID of the vocabulary type",required=true) @PathVariable("setId") String setId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\", \"vocabularyType\" : { \"name\" : \"grades\", \"description\" : \"List of grades\", \"id\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\", \"tags\" : { \"key\" : \"tags\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getMappingSets", notes = "Return a list of mapping sets that you may utilise", response = MappingSet.class, responseContainer = "List", authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Mappings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returning a list of mapping sets", response = MappingSet.class, responseContainer = "List") })
    @RequestMapping(value = "/mappingSets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<MappingSet>> getMappingSets() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\", \"vocabularyType\" : { \"name\" : \"grades\", \"description\" : \"List of grades\", \"id\" : \"D1E3B83E-99A3-4AF3-B95B-3DC2913EDDC2\", \"tags\" : { \"key\" : \"tags\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getMappings", notes = "Return the elements of a mapping set", response = Mapping.class, responseContainer = "List", authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Mappings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returning a list of mapping set entries", response = Mapping.class, responseContainer = "List") })
    @RequestMapping(value = "/mappingSets/{setId}/mappings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Mapping>> getMappings(@ApiParam(value = "The ID of the mapping set",required=true) @PathVariable("setId") String setId,@ApiParam(value = "Search for a mapping where the from code matches the provided string") @Valid @RequestParam(value = "fromCode", required = false) String fromCode) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mappingSetId\" : \"mappingSetId\", \"from\" : { \"code\" : \"ABCD\", \"title\" : \"ABCD\" }, \"id\" : \"id\", \"to\" : { \"code\" : \"ABCD\", \"title\" : \"ABCD\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "putMapping", notes = "Update a mapping", authorizations = {
        @Authorization(value = "jwt")
    }, tags={ "Mappings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated successfully") })
    @RequestMapping(value = "/mappingSets/{id}/mappings/{mappingId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putMapping(@ApiParam(value = "The ID of the vocabulary",required=true) @PathVariable("id") String id,@ApiParam(value = "The ID of the vocabulary element",required=true) @PathVariable("mappingId") String mappingId,@ApiParam(value = "Details of the mapping" ,required=true )  @Valid @RequestBody Mapping mapping) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

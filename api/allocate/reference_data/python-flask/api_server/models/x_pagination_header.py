# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class XPaginationHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_page=None, page_size=None):  # noqa: E501
        """XPaginationHeader - a model defined in OpenAPI

        :param current_page: The current_page of this XPaginationHeader.  # noqa: E501
        :type current_page: int
        :param page_size: The page_size of this XPaginationHeader.  # noqa: E501
        :type page_size: int
        """
        self.openapi_types = {
            'current_page': int,
            'page_size': int
        }

        self.attribute_map = {
            'current_page': 'currentPage',
            'page_size': 'pageSize'
        }

        self._current_page = current_page
        self._page_size = page_size

    @classmethod
    def from_dict(cls, dikt) -> 'XPaginationHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The XPaginationHeader of this XPaginationHeader.  # noqa: E501
        :rtype: XPaginationHeader
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_page(self):
        """Gets the current_page of this XPaginationHeader.


        :return: The current_page of this XPaginationHeader.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this XPaginationHeader.


        :param current_page: The current_page of this XPaginationHeader.
        :type current_page: int
        """
        if current_page is None:
            raise ValueError("Invalid value for `current_page`, must not be `None`")  # noqa: E501

        self._current_page = current_page

    @property
    def page_size(self):
        """Gets the page_size of this XPaginationHeader.


        :return: The page_size of this XPaginationHeader.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this XPaginationHeader.


        :param page_size: The page_size of this XPaginationHeader.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

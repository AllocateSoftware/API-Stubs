# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server.models.vocabulary_type import VocabularyType
from api_server import util

from api_server.models.vocabulary_type import VocabularyType  # noqa: E501

class MappingSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, vocabulary_type=None):  # noqa: E501
        """MappingSet - a model defined in OpenAPI

        :param id: The id of this MappingSet.  # noqa: E501
        :type id: str
        :param vocabulary_type: The vocabulary_type of this MappingSet.  # noqa: E501
        :type vocabulary_type: VocabularyType
        """
        self.openapi_types = {
            'id': str,
            'vocabulary_type': VocabularyType
        }

        self.attribute_map = {
            'id': 'id',
            'vocabulary_type': 'vocabularyType'
        }

        self._id = id
        self._vocabulary_type = vocabulary_type

    @classmethod
    def from_dict(cls, dikt) -> 'MappingSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MappingSet of this MappingSet.  # noqa: E501
        :rtype: MappingSet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MappingSet.

        ID of this mapping set  # noqa: E501

        :return: The id of this MappingSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MappingSet.

        ID of this mapping set  # noqa: E501

        :param id: The id of this MappingSet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def vocabulary_type(self):
        """Gets the vocabulary_type of this MappingSet.


        :return: The vocabulary_type of this MappingSet.
        :rtype: VocabularyType
        """
        return self._vocabulary_type

    @vocabulary_type.setter
    def vocabulary_type(self, vocabulary_type):
        """Sets the vocabulary_type of this MappingSet.


        :param vocabulary_type: The vocabulary_type of this MappingSet.
        :type vocabulary_type: VocabularyType
        """
        if vocabulary_type is None:
            raise ValueError("Invalid value for `vocabulary_type`, must not be `None`")  # noqa: E501

        self._vocabulary_type = vocabulary_type

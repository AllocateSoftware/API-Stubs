# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class VocabularyType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, tags=None):  # noqa: E501
        """VocabularyType - a model defined in OpenAPI

        :param id: The id of this VocabularyType.  # noqa: E501
        :type id: str
        :param name: The name of this VocabularyType.  # noqa: E501
        :type name: str
        :param description: The description of this VocabularyType.  # noqa: E501
        :type description: str
        :param tags: The tags of this VocabularyType.  # noqa: E501
        :type tags: Dict[str, str]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'VocabularyType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VocabularyType of this VocabularyType.  # noqa: E501
        :rtype: VocabularyType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VocabularyType.

        ID of this vocabulary type  # noqa: E501

        :return: The id of this VocabularyType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VocabularyType.

        ID of this vocabulary type  # noqa: E501

        :param id: The id of this VocabularyType.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this VocabularyType.

        Name of the vocabulary. Usually would not contain spaces (as this will be used in URLs).  # noqa: E501

        :return: The name of this VocabularyType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VocabularyType.

        Name of the vocabulary. Usually would not contain spaces (as this will be used in URLs).  # noqa: E501

        :param name: The name of this VocabularyType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this VocabularyType.

        Description of the vocabulary  # noqa: E501

        :return: The description of this VocabularyType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VocabularyType.

        Description of the vocabulary  # noqa: E501

        :param description: The description of this VocabularyType.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this VocabularyType.

        Optional array of tags which may be applied  # noqa: E501

        :return: The tags of this VocabularyType.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VocabularyType.

        Optional array of tags which may be applied  # noqa: E501

        :param tags: The tags of this VocabularyType.
        :type tags: Dict[str, str]
        """

        self._tags = tags

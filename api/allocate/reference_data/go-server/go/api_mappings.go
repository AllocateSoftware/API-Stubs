/*
 * Reference data and Mappings API
 *
 *      ## API for accessing reference data and mapping information 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A MappingsApiController binds http requests to an api service and writes the service results to the http response
type MappingsApiController struct {
	service MappingsApiServicer
}

// NewMappingsApiController creates a default api controller
func NewMappingsApiController(s MappingsApiServicer) Router {
	return &MappingsApiController{ service: s }
}

// Routes returns all of the api route for the MappingsApiController
func (c *MappingsApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateMapping",
			strings.ToUpper("Post"),
			"/api/v1/mappingSets/{setId}/mappings",
			c.CreateMapping,
		},
		{
			"DeleteMapping",
			strings.ToUpper("Delete"),
			"/api/v1/mappingSets/{id}/mappings/{mappingId}",
			c.DeleteMapping,
		},
		{
			"GetMapping",
			strings.ToUpper("Get"),
			"/api/v1/mappingSets/{id}/mappings/{mappingId}",
			c.GetMapping,
		},
		{
			"GetMappingSetById",
			strings.ToUpper("Get"),
			"/api/v1/mappingSets/{setId}",
			c.GetMappingSetById,
		},
		{
			"GetMappingSets",
			strings.ToUpper("Get"),
			"/api/v1/mappingSets",
			c.GetMappingSets,
		},
		{
			"GetMappings",
			strings.ToUpper("Get"),
			"/api/v1/mappingSets/{setId}/mappings",
			c.GetMappings,
		},
		{
			"PutMapping",
			strings.ToUpper("Put"),
			"/api/v1/mappingSets/{id}/mappings/{mappingId}",
			c.PutMapping,
		},
	}
}

// CreateMapping - 
func (c *MappingsApiController) CreateMapping(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	setId := params["setId"]
	mapping := &Mapping{}
	if err := json.NewDecoder(r.Body).Decode(&mapping); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.CreateMapping(setId, *mapping)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeleteMapping - 
func (c *MappingsApiController) DeleteMapping(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	mappingId := params["mappingId"]
	result, err := c.service.DeleteMapping(id, mappingId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetMapping - 
func (c *MappingsApiController) GetMapping(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	mappingId := params["mappingId"]
	result, err := c.service.GetMapping(id, mappingId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetMappingSetById - 
func (c *MappingsApiController) GetMappingSetById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	setId := params["setId"]
	result, err := c.service.GetMappingSetById(setId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetMappingSets - 
func (c *MappingsApiController) GetMappingSets(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.GetMappingSets()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetMappings - 
func (c *MappingsApiController) GetMappings(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	setId := params["setId"]
	fromCode := query.Get("fromCode")
	result, err := c.service.GetMappings(setId, fromCode)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// PutMapping - 
func (c *MappingsApiController) PutMapping(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	mappingId := params["mappingId"]
	mapping := &Mapping{}
	if err := json.NewDecoder(r.Body).Decode(&mapping); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.PutMapping(id, mappingId, *mapping)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class Identifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace=None, id=None):  # noqa: E501
        """Identifier - a model defined in OpenAPI

        :param namespace: The namespace of this Identifier.  # noqa: E501
        :type namespace: str
        :param id: The id of this Identifier.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'namespace': str,
            'id': str
        }

        self.attribute_map = {
            'namespace': 'namespace',
            'id': 'id'
        }

        self._namespace = namespace
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'Identifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Identifier of this Identifier.  # noqa: E501
        :rtype: Identifier
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this Identifier.

        Namespace for this identifier.  # noqa: E501

        :return: The namespace of this Identifier.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Identifier.

        Namespace for this identifier.  # noqa: E501

        :param namespace: The namespace of this Identifier.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def id(self):
        """Gets the id of this Identifier.


        :return: The id of this Identifier.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Identifier.


        :param id: The id of this Identifier.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

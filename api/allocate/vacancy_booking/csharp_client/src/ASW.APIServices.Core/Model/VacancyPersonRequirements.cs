/* 
 * Vacancy Booking API and Events
 *
 *      ## Duty Booking API and events and Events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// VacancyPersonRequirements
    /// </summary>
    [DataContract]
    public partial class VacancyPersonRequirements :  IEquatable<VacancyPersonRequirements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VacancyPersonRequirements" /> class.
        /// </summary>
        /// <param name="grade">grade.</param>
        /// <param name="gradeType">gradeType.</param>
        /// <param name="gradeTypeCategory">gradeTypeCategory.</param>
        /// <param name="gender">gender.</param>
        public VacancyPersonRequirements(string grade = default(string), string gradeType = default(string), string gradeTypeCategory = default(string), string gender = default(string))
        {
            this.Grade = grade;
            this.GradeType = gradeType;
            this.GradeTypeCategory = gradeTypeCategory;
            this.Gender = gender;
        }
        
        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or Sets GradeType
        /// </summary>
        [DataMember(Name="gradeType", EmitDefaultValue=false)]
        public string GradeType { get; set; }

        /// <summary>
        /// Gets or Sets GradeTypeCategory
        /// </summary>
        [DataMember(Name="gradeTypeCategory", EmitDefaultValue=false)]
        public string GradeTypeCategory { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public string Gender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VacancyPersonRequirements {\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  GradeType: ").Append(GradeType).Append("\n");
            sb.Append("  GradeTypeCategory: ").Append(GradeTypeCategory).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VacancyPersonRequirements);
        }

        /// <summary>
        /// Returns true if VacancyPersonRequirements instances are equal
        /// </summary>
        /// <param name="input">Instance of VacancyPersonRequirements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VacancyPersonRequirements input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.GradeType == input.GradeType ||
                    (this.GradeType != null &&
                    this.GradeType.Equals(input.GradeType))
                ) && 
                (
                    this.GradeTypeCategory == input.GradeTypeCategory ||
                    (this.GradeTypeCategory != null &&
                    this.GradeTypeCategory.Equals(input.GradeTypeCategory))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.GradeType != null)
                    hashCode = hashCode * 59 + this.GradeType.GetHashCode();
                if (this.GradeTypeCategory != null)
                    hashCode = hashCode * 59 + this.GradeTypeCategory.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

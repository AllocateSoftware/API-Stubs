/* 
 * Vacancy Booking API and Events
 *
 *      ## Duty Booking API and events and Events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVacancyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Offer a worker for filling a duty
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>CreateProposalResponse</returns>
        CreateProposalResponse CreateProposal (string vacancyId, ProposalDetails proposalDetails);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Offer a worker for filling a duty
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>ApiResponse of CreateProposalResponse</returns>
        ApiResponse<CreateProposalResponse> CreateProposalWithHttpInfo (string vacancyId, ProposalDetails proposalDetails);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>CreateVacancyResponse</returns>
        CreateVacancyResponse CreateVacancy (Vacancy vacancy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>ApiResponse of CreateVacancyResponse</returns>
        ApiResponse<CreateVacancyResponse> CreateVacancyWithHttpInfo (Vacancy vacancy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send timesheet information for a completed activity
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        void SubmitTimesheet (string vacancyId, InlineObject inlineObject);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send timesheet information for a completed activity
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SubmitTimesheetWithHttpInfo (string vacancyId, InlineObject inlineObject);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Offer a worker for filling a duty
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>Task of CreateProposalResponse</returns>
        System.Threading.Tasks.Task<CreateProposalResponse> CreateProposalAsync (string vacancyId, ProposalDetails proposalDetails);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Offer a worker for filling a duty
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>Task of ApiResponse (CreateProposalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateProposalResponse>> CreateProposalAsyncWithHttpInfo (string vacancyId, ProposalDetails proposalDetails);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>Task of CreateVacancyResponse</returns>
        System.Threading.Tasks.Task<CreateVacancyResponse> CreateVacancyAsync (Vacancy vacancy);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>Task of ApiResponse (CreateVacancyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateVacancyResponse>> CreateVacancyAsyncWithHttpInfo (Vacancy vacancy);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send timesheet information for a completed activity
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SubmitTimesheetAsync (string vacancyId, InlineObject inlineObject);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send timesheet information for a completed activity
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SubmitTimesheetAsyncWithHttpInfo (string vacancyId, InlineObject inlineObject);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VacancyApi : IVacancyApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VacancyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VacancyApi(String basePath)
        {
            this.Configuration = new ASW.APIServices.Core.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VacancyApi"/> class
        /// </summary>
        /// <returns></returns>
        public VacancyApi()
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VacancyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VacancyApi(ASW.APIServices.Core.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Offer a worker for filling a duty
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>CreateProposalResponse</returns>
        public CreateProposalResponse CreateProposal (string vacancyId, ProposalDetails proposalDetails)
        {
             ApiResponse<CreateProposalResponse> localVarResponse = CreateProposalWithHttpInfo(vacancyId, proposalDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Offer a worker for filling a duty
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>ApiResponse of CreateProposalResponse</returns>
        public ApiResponse<CreateProposalResponse> CreateProposalWithHttpInfo (string vacancyId, ProposalDetails proposalDetails)
        {
            // verify the required parameter 'vacancyId' is set
            if (vacancyId == null)
                throw new ApiException(400, "Missing required parameter 'vacancyId' when calling VacancyApi->CreateProposal");
            // verify the required parameter 'proposalDetails' is set
            if (proposalDetails == null)
                throw new ApiException(400, "Missing required parameter 'proposalDetails' when calling VacancyApi->CreateProposal");

            var localVarPath = "/vacancies/{vacancyId}/proposals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vacancyId != null) localVarPathParams.Add("vacancyId", this.Configuration.ApiClient.ParameterToString(vacancyId)); // path parameter
            if (proposalDetails != null && proposalDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(proposalDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = proposalDetails; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProposal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateProposalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateProposalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateProposalResponse)));
        }

        /// <summary>
        ///  Offer a worker for filling a duty
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>Task of CreateProposalResponse</returns>
        public async System.Threading.Tasks.Task<CreateProposalResponse> CreateProposalAsync (string vacancyId, ProposalDetails proposalDetails)
        {
             ApiResponse<CreateProposalResponse> localVarResponse = await CreateProposalAsyncWithHttpInfo(vacancyId, proposalDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Offer a worker for filling a duty
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="proposalDetails">Details of the proposal for filling the vacancy (worker, costs, etc)</param>
        /// <returns>Task of ApiResponse (CreateProposalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateProposalResponse>> CreateProposalAsyncWithHttpInfo (string vacancyId, ProposalDetails proposalDetails)
        {
            // verify the required parameter 'vacancyId' is set
            if (vacancyId == null)
                throw new ApiException(400, "Missing required parameter 'vacancyId' when calling VacancyApi->CreateProposal");
            // verify the required parameter 'proposalDetails' is set
            if (proposalDetails == null)
                throw new ApiException(400, "Missing required parameter 'proposalDetails' when calling VacancyApi->CreateProposal");

            var localVarPath = "/vacancies/{vacancyId}/proposals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vacancyId != null) localVarPathParams.Add("vacancyId", this.Configuration.ApiClient.ParameterToString(vacancyId)); // path parameter
            if (proposalDetails != null && proposalDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(proposalDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = proposalDetails; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProposal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateProposalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateProposalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateProposalResponse)));
        }

        /// <summary>
        ///  Create a new vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>CreateVacancyResponse</returns>
        public CreateVacancyResponse CreateVacancy (Vacancy vacancy)
        {
             ApiResponse<CreateVacancyResponse> localVarResponse = CreateVacancyWithHttpInfo(vacancy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>ApiResponse of CreateVacancyResponse</returns>
        public ApiResponse<CreateVacancyResponse> CreateVacancyWithHttpInfo (Vacancy vacancy)
        {
            // verify the required parameter 'vacancy' is set
            if (vacancy == null)
                throw new ApiException(400, "Missing required parameter 'vacancy' when calling VacancyApi->CreateVacancy");

            var localVarPath = "/vacancies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vacancy != null && vacancy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vacancy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vacancy; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVacancy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateVacancyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateVacancyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateVacancyResponse)));
        }

        /// <summary>
        ///  Create a new vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>Task of CreateVacancyResponse</returns>
        public async System.Threading.Tasks.Task<CreateVacancyResponse> CreateVacancyAsync (Vacancy vacancy)
        {
             ApiResponse<CreateVacancyResponse> localVarResponse = await CreateVacancyAsyncWithHttpInfo(vacancy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create a new vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancy">Details of the vacancy</param>
        /// <returns>Task of ApiResponse (CreateVacancyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateVacancyResponse>> CreateVacancyAsyncWithHttpInfo (Vacancy vacancy)
        {
            // verify the required parameter 'vacancy' is set
            if (vacancy == null)
                throw new ApiException(400, "Missing required parameter 'vacancy' when calling VacancyApi->CreateVacancy");

            var localVarPath = "/vacancies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vacancy != null && vacancy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vacancy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vacancy; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVacancy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateVacancyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateVacancyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateVacancyResponse)));
        }

        /// <summary>
        ///  Send timesheet information for a completed activity
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        public void SubmitTimesheet (string vacancyId, InlineObject inlineObject)
        {
             SubmitTimesheetWithHttpInfo(vacancyId, inlineObject);
        }

        /// <summary>
        ///  Send timesheet information for a completed activity
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SubmitTimesheetWithHttpInfo (string vacancyId, InlineObject inlineObject)
        {
            // verify the required parameter 'vacancyId' is set
            if (vacancyId == null)
                throw new ApiException(400, "Missing required parameter 'vacancyId' when calling VacancyApi->SubmitTimesheet");
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling VacancyApi->SubmitTimesheet");

            var localVarPath = "/vacancies/{vacancyId}/timesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vacancyId != null) localVarPathParams.Add("vacancyId", this.Configuration.ApiClient.ParameterToString(vacancyId)); // path parameter
            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitTimesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Send timesheet information for a completed activity
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SubmitTimesheetAsync (string vacancyId, InlineObject inlineObject)
        {
             await SubmitTimesheetAsyncWithHttpInfo(vacancyId, inlineObject);

        }

        /// <summary>
        ///  Send timesheet information for a completed activity
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vacancyId">The ID of the vacancy</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SubmitTimesheetAsyncWithHttpInfo (string vacancyId, InlineObject inlineObject)
        {
            // verify the required parameter 'vacancyId' is set
            if (vacancyId == null)
                throw new ApiException(400, "Missing required parameter 'vacancyId' when calling VacancyApi->SubmitTimesheet");
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling VacancyApi->SubmitTimesheet");

            var localVarPath = "/vacancies/{vacancyId}/timesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vacancyId != null) localVarPathParams.Add("vacancyId", this.Configuration.ApiClient.ParameterToString(vacancyId)); // path parameter
            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }

            // authentication (jwt) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitTimesheet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}

/*
 * Vacancy Booking API and Events
 *      ## Duty Booking API and events and Events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.AsyncResponse;
import com.allocate.openapi.model.CreateProposalResponse;
import com.allocate.openapi.model.CreateVacancyResponse;
import com.allocate.openapi.model.ErrorResponse;
import com.allocate.openapi.model.InlineObject;
import com.allocate.openapi.model.ProposalDetails;
import com.allocate.openapi.model.Vacancy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VacancyApi {
    private ApiClient localVarApiClient;

    public VacancyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VacancyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createProposal
     * @param vacancyId The ID of the vacancy (required)
     * @param proposalDetails Details of the proposal for filling the vacancy (worker, costs, etc) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The proposal has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProposalCall(String vacancyId, ProposalDetails proposalDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = proposalDetails;

        // create path and map variables
        String localVarPath = "/vacancies/{vacancyId}/proposals"
            .replaceAll("\\{" + "vacancyId" + "\\}", localVarApiClient.escapeString(vacancyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProposalValidateBeforeCall(String vacancyId, ProposalDetails proposalDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vacancyId' is set
        if (vacancyId == null) {
            throw new ApiException("Missing the required parameter 'vacancyId' when calling createProposal(Async)");
        }
        
        // verify the required parameter 'proposalDetails' is set
        if (proposalDetails == null) {
            throw new ApiException("Missing the required parameter 'proposalDetails' when calling createProposal(Async)");
        }
        

        okhttp3.Call localVarCall = createProposalCall(vacancyId, proposalDetails, _callback);
        return localVarCall;

    }

    /**
     * 
     * Offer a worker for filling a duty
     * @param vacancyId The ID of the vacancy (required)
     * @param proposalDetails Details of the proposal for filling the vacancy (worker, costs, etc) (required)
     * @return CreateProposalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The proposal has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
     </table>
     */
    public CreateProposalResponse createProposal(String vacancyId, ProposalDetails proposalDetails) throws ApiException {
        ApiResponse<CreateProposalResponse> localVarResp = createProposalWithHttpInfo(vacancyId, proposalDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * Offer a worker for filling a duty
     * @param vacancyId The ID of the vacancy (required)
     * @param proposalDetails Details of the proposal for filling the vacancy (worker, costs, etc) (required)
     * @return ApiResponse&lt;CreateProposalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The proposal has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateProposalResponse> createProposalWithHttpInfo(String vacancyId, ProposalDetails proposalDetails) throws ApiException {
        okhttp3.Call localVarCall = createProposalValidateBeforeCall(vacancyId, proposalDetails, null);
        Type localVarReturnType = new TypeToken<CreateProposalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Offer a worker for filling a duty
     * @param vacancyId The ID of the vacancy (required)
     * @param proposalDetails Details of the proposal for filling the vacancy (worker, costs, etc) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Proposal created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The proposal has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> One or more errors have occurred when attempting to process the provided data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProposalAsync(String vacancyId, ProposalDetails proposalDetails, final ApiCallback<CreateProposalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProposalValidateBeforeCall(vacancyId, proposalDetails, _callback);
        Type localVarReturnType = new TypeToken<CreateProposalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVacancy
     * @param vacancy Details of the vacancy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Vacancy created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVacancyCall(Vacancy vacancy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = vacancy;

        // create path and map variables
        String localVarPath = "/vacancies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVacancyValidateBeforeCall(Vacancy vacancy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vacancy' is set
        if (vacancy == null) {
            throw new ApiException("Missing the required parameter 'vacancy' when calling createVacancy(Async)");
        }
        

        okhttp3.Call localVarCall = createVacancyCall(vacancy, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new vacancy
     * @param vacancy Details of the vacancy (required)
     * @return CreateVacancyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Vacancy created successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateVacancyResponse createVacancy(Vacancy vacancy) throws ApiException {
        ApiResponse<CreateVacancyResponse> localVarResp = createVacancyWithHttpInfo(vacancy);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new vacancy
     * @param vacancy Details of the vacancy (required)
     * @return ApiResponse&lt;CreateVacancyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Vacancy created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVacancyResponse> createVacancyWithHttpInfo(Vacancy vacancy) throws ApiException {
        okhttp3.Call localVarCall = createVacancyValidateBeforeCall(vacancy, null);
        Type localVarReturnType = new TypeToken<CreateVacancyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new vacancy
     * @param vacancy Details of the vacancy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden - you do not have the necessary permissions to undertake this action </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Vacancy created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVacancyAsync(Vacancy vacancy, final ApiCallback<CreateVacancyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVacancyValidateBeforeCall(vacancy, _callback);
        Type localVarReturnType = new TypeToken<CreateVacancyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitTimesheet
     * @param vacancyId The ID of the vacancy (required)
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timesheet successfully submitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitTimesheetCall(String vacancyId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/vacancies/{vacancyId}/timesheet"
            .replaceAll("\\{" + "vacancyId" + "\\}", localVarApiClient.escapeString(vacancyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "jwt" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTimesheetValidateBeforeCall(String vacancyId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vacancyId' is set
        if (vacancyId == null) {
            throw new ApiException("Missing the required parameter 'vacancyId' when calling submitTimesheet(Async)");
        }
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling submitTimesheet(Async)");
        }
        

        okhttp3.Call localVarCall = submitTimesheetCall(vacancyId, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * 
     * Send timesheet information for a completed activity
     * @param vacancyId The ID of the vacancy (required)
     * @param inlineObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timesheet successfully submitted </td><td>  -  </td></tr>
     </table>
     */
    public void submitTimesheet(String vacancyId, InlineObject inlineObject) throws ApiException {
        submitTimesheetWithHttpInfo(vacancyId, inlineObject);
    }

    /**
     * 
     * Send timesheet information for a completed activity
     * @param vacancyId The ID of the vacancy (required)
     * @param inlineObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timesheet successfully submitted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> submitTimesheetWithHttpInfo(String vacancyId, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = submitTimesheetValidateBeforeCall(vacancyId, inlineObject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Send timesheet information for a completed activity
     * @param vacancyId The ID of the vacancy (required)
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Timesheet successfully submitted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitTimesheetAsync(String vacancyId, InlineObject inlineObject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTimesheetValidateBeforeCall(vacancyId, inlineObject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

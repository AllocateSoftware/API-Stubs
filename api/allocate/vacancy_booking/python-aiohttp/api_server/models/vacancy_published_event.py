# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server.models.vacancy import Vacancy
from api_server import util


class VacancyPublishedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, vacancy: Vacancy=None):
        """VacancyPublishedEvent - a model defined in OpenAPI

        :param id: The id of this VacancyPublishedEvent.
        :param vacancy: The vacancy of this VacancyPublishedEvent.
        """
        self.openapi_types = {
            'id': str,
            'vacancy': Vacancy
        }

        self.attribute_map = {
            'id': 'id',
            'vacancy': 'vacancy'
        }

        self._id = id
        self._vacancy = vacancy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VacancyPublishedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VacancyPublishedEvent of this VacancyPublishedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VacancyPublishedEvent.

        ID of the vacancy

        :return: The id of this VacancyPublishedEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VacancyPublishedEvent.

        ID of the vacancy

        :param id: The id of this VacancyPublishedEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def vacancy(self):
        """Gets the vacancy of this VacancyPublishedEvent.


        :return: The vacancy of this VacancyPublishedEvent.
        :rtype: Vacancy
        """
        return self._vacancy

    @vacancy.setter
    def vacancy(self, vacancy):
        """Sets the vacancy of this VacancyPublishedEvent.


        :param vacancy: The vacancy of this VacancyPublishedEvent.
        :type vacancy: Vacancy
        """
        if vacancy is None:
            raise ValueError("Invalid value for `vacancy`, must not be `None`")

        self._vacancy = vacancy

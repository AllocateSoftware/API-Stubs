/*
 * Vacancy Booking API and Events
 *
 *      ## Duty Booking API and events and Events 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A VacancyApiController binds http requests to an api service and writes the service results to the http response
type VacancyApiController struct {
	service VacancyApiServicer
}

// NewVacancyApiController creates a default api controller
func NewVacancyApiController(s VacancyApiServicer) Router {
	return &VacancyApiController{ service: s }
}

// Routes returns all of the api route for the VacancyApiController
func (c *VacancyApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateProposal",
			strings.ToUpper("Post"),
			"/api/v1/vacancies/{vacancyId}/proposals",
			c.CreateProposal,
		},
		{
			"CreateVacancy",
			strings.ToUpper("Post"),
			"/api/v1/vacancies",
			c.CreateVacancy,
		},
		{
			"SubmitTimesheet",
			strings.ToUpper("Post"),
			"/api/v1/vacancies/{vacancyId}/timesheet",
			c.SubmitTimesheet,
		},
	}
}

// CreateProposal - 
func (c *VacancyApiController) CreateProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	vacancyId := params["vacancyId"]
	proposalDetails := &ProposalDetails{}
	if err := json.NewDecoder(r.Body).Decode(&proposalDetails); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.CreateProposal(vacancyId, *proposalDetails)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// CreateVacancy - 
func (c *VacancyApiController) CreateVacancy(w http.ResponseWriter, r *http.Request) { 
	vacancy := &Vacancy{}
	if err := json.NewDecoder(r.Body).Decode(&vacancy); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.CreateVacancy(*vacancy)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// SubmitTimesheet - 
func (c *VacancyApiController) SubmitTimesheet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	vacancyId := params["vacancyId"]
	inlineObject := &InlineObject{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.SubmitTimesheet(vacancyId, *inlineObject)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

/*
 * Vacancy Booking API and Events
 *
 *      ## Duty Booking API and events and Events 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ProposalApiController binds http requests to an api service and writes the service results to the http response
type ProposalApiController struct {
	service ProposalApiServicer
}

// NewProposalApiController creates a default api controller
func NewProposalApiController(s ProposalApiServicer) Router {
	return &ProposalApiController{ service: s }
}

// Routes returns all of the api route for the ProposalApiController
func (c *ProposalApiController) Routes() Routes {
	return Routes{ 
		{
			"AcceptProposal",
			strings.ToUpper("Post"),
			"/api/v1/proposals/{id}/accept",
			c.AcceptProposal,
		},
		{
			"CancelProposal",
			strings.ToUpper("Delete"),
			"/api/v1/proposals/{id}",
			c.CancelProposal,
		},
		{
			"GetProposal",
			strings.ToUpper("Get"),
			"/api/v1/proposals/{id}",
			c.GetProposal,
		},
		{
			"UpdateProposal",
			strings.ToUpper("Put"),
			"/api/v1/proposals/{id}",
			c.UpdateProposal,
		},
	}
}

// AcceptProposal - 
func (c *ProposalApiController) AcceptProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.AcceptProposal(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// CancelProposal - 
func (c *ProposalApiController) CancelProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.CancelProposal(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetProposal - 
func (c *ProposalApiController) GetProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.GetProposal(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UpdateProposal - 
func (c *ProposalApiController) UpdateProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	proposalDetails := &ProposalDetails{}
	if err := json.NewDecoder(r.Body).Decode(&proposalDetails); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UpdateProposal(id, *proposalDetails)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

/* 
 * Duties and Events
 *
 * ## Duties and Events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Event
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "EventType")]
    [JsonSubtypes.KnownSubType(typeof(DutyDeletedEvent), "DutyDeletedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentTimesheetRejectedEvent), "DutyAssignmentTimesheetRejectedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentUpdatedEvent), "DutyAssignmentUpdatedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentClearedEvent), "DutyAssignmentClearedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentTimesheetConfirmedEvent), "DutyAssignmentTimesheetConfirmedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyUpdatedEvent), "DutyUpdatedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentTimesheetUnconfirmedEvent), "DutyAssignmentTimesheetUnconfirmedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentSubmittedEvent), "DutyAssignmentSubmittedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyTempStaffingNoteDeletedEvent), "DutyTempStaffingNoteDeletedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentFinalisedEvent), "DutyAssignmentFinalisedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyCancelledEvent), "DutyCancelledEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyEvent), "DutyEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyTempStaffingNoteCreatedEvent), "DutyTempStaffingNoteCreatedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignedEvent), "DutyAssignedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyApprovedEvent), "DutyApprovedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyCascadeEvent), "DutyCascadeEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentRedeploymentEvent), "DutyAssignmentRedeploymentEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyTempStaffingExpressionOfInterestEvent), "DutyTempStaffingExpressionOfInterestEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentUnFinalisedEvent), "DutyAssignmentUnFinalisedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyEvent), "DutyEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyTempStaffingNoteCreatedEvent), "DutyTempStaffingNoteCreatedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyTempStaffingNoteDeletedEvent), "DutyTempStaffingNoteDeletedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyTempStaffingExpressionOfInterestEvent), "DutyTempStaffingExpressionOfInterestEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyCascadeEvent), "DutyCascadeEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyUpdatedEvent), "DutyUpdatedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyCancelledEvent), "DutyCancelledEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyDeletedEvent), "DutyDeletedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyApprovedEvent), "DutyApprovedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignedEvent), "DutyAssignedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentClearedEvent), "DutyAssignmentClearedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentUpdatedEvent), "DutyAssignmentUpdatedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentFinalisedEvent), "DutyAssignmentFinalisedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentUnFinalisedEvent), "DutyAssignmentUnFinalisedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentTimesheetConfirmedEvent), "DutyAssignmentTimesheetConfirmedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentTimesheetUnconfirmedEvent), "DutyAssignmentTimesheetUnconfirmedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentTimesheetRejectedEvent), "DutyAssignmentTimesheetRejectedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentSubmittedEvent), "DutyAssignmentSubmittedEvent")]
    [JsonSubtypes.KnownSubType(typeof(DutyAssignmentRedeploymentEvent), "DutyAssignmentRedeploymentEvent")]
    public partial class Event :  IEquatable<Event>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Event() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="eventType">eventType (required).</param>
        public Event(string eventType = default(string))
        {
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new InvalidDataException("eventType is a required property for Event and cannot be null");
            }
            else
            {
                this.EventType = eventType;
            }

        }
        
        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Event);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="input">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

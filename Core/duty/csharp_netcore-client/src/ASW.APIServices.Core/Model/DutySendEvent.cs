/* 
 * Duties and Events
 *
 * ## Duties and Events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// DutySendEvent
    /// </summary>
    [DataContract]
    public partial class DutySendEvent :  IEquatable<DutySendEvent>, IValidatableObject
    {
        /// <summary>
        /// Where this duty has been sent
        /// </summary>
        /// <value>Where this duty has been sent</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DestinationEnum
        {
            /// <summary>
            /// Enum Bank for value: bank
            /// </summary>
            [EnumMember(Value = "bank")]
            Bank = 1,

            /// <summary>
            /// Enum Agency for value: agency
            /// </summary>
            [EnumMember(Value = "agency")]
            Agency = 2,

            /// <summary>
            /// Enum Cloudstaff for value: cloudstaff
            /// </summary>
            [EnumMember(Value = "cloudstaff")]
            Cloudstaff = 3

        }

        /// <summary>
        /// Where this duty has been sent
        /// </summary>
        /// <value>Where this duty has been sent</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public DestinationEnum? Destination { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DutySendEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DutySendEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DutySendEvent" /> class.
        /// </summary>
        /// <param name="eventType">eventType (required).</param>
        /// <param name="destination">Where this duty has been sent.</param>
        /// <param name="duty">duty.</param>
        public DutySendEvent(string eventType = default(string), DestinationEnum? destination = default(DestinationEnum?), Duty duty = default(Duty))
        {
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new InvalidDataException("eventType is a required property for DutySendEvent and cannot be null");
            }
            else
            {
                this.EventType = eventType;
            }

            this.Destination = destination;
            this.Duty = duty;
        }
        
        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets Duty
        /// </summary>
        [DataMember(Name="duty", EmitDefaultValue=false)]
        public Duty Duty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DutySendEvent {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Duty: ").Append(Duty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DutySendEvent);
        }

        /// <summary>
        /// Returns true if DutySendEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of DutySendEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DutySendEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.Destination == input.Destination ||
                    this.Destination.Equals(input.Destination)
                ) && 
                (
                    this.Duty == input.Duty ||
                    (this.Duty != null &&
                    this.Duty.Equals(input.Duty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.Duty != null)
                    hashCode = hashCode * 59 + this.Duty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Duties and Events
 *
 * ## Duties and Events 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"net/http"
)


// BookingsApiRouter defines the required methods for binding the api requests to a responses for the BookingsApi
// The BookingsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a BookingsApiServicer to perform the required actions, then write the service results to the http response.
type BookingsApiRouter interface { 
	SendDutyCosting(http.ResponseWriter, *http.Request)
}
// Class3rdPartyRosteringApiRouter defines the required methods for binding the api requests to a responses for the Class3rdPartyRosteringApi
// The Class3rdPartyRosteringApiRouter implementation should parse necessary information from the http request, 
// pass the data to a Class3rdPartyRosteringApiServicer to perform the required actions, then write the service results to the http response.
type Class3rdPartyRosteringApiRouter interface { 
	CancelDuty(http.ResponseWriter, *http.Request)
	CancelDutyBooking(http.ResponseWriter, *http.Request)
	CreateDuty(http.ResponseWriter, *http.Request)
	SendDutyForFulfillment(http.ResponseWriter, *http.Request)
}
// CostingApiRouter defines the required methods for binding the api requests to a responses for the CostingApi
// The CostingApiRouter implementation should parse necessary information from the http request, 
// pass the data to a CostingApiServicer to perform the required actions, then write the service results to the http response.
type CostingApiRouter interface { 
	SendDutyCosting(http.ResponseWriter, *http.Request)
}
// DutiesApiRouter defines the required methods for binding the api requests to a responses for the DutiesApi
// The DutiesApiRouter implementation should parse necessary information from the http request, 
// pass the data to a DutiesApiServicer to perform the required actions, then write the service results to the http response.
type DutiesApiRouter interface { 
	CancelDuty(http.ResponseWriter, *http.Request)
	CancelDutyBooking(http.ResponseWriter, *http.Request)
	CreateDuty(http.ResponseWriter, *http.Request)
	SendDutyCosting(http.ResponseWriter, *http.Request)
	SendDutyForFulfillment(http.ResponseWriter, *http.Request)
}


// BookingsApiServicer defines the api actions for the BookingsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type BookingsApiServicer interface { 
	SendDutyCosting(string, DutyCostDetails) (interface{}, error)
}


// Class3rdPartyRosteringApiServicer defines the api actions for the Class3rdPartyRosteringApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type Class3rdPartyRosteringApiServicer interface { 
	CancelDuty(string) (interface{}, error)
	CancelDutyBooking(string) (interface{}, error)
	CreateDuty(DutyDetails) (interface{}, error)
	SendDutyForFulfillment(string, string) (interface{}, error)
}


// CostingApiServicer defines the api actions for the CostingApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type CostingApiServicer interface { 
	SendDutyCosting(string, DutyCostDetails) (interface{}, error)
}


// DutiesApiServicer defines the api actions for the DutiesApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type DutiesApiServicer interface { 
	CancelDuty(string) (interface{}, error)
	CancelDutyBooking(string) (interface{}, error)
	CreateDuty(DutyDetails) (interface{}, error)
	SendDutyCosting(string, DutyCostDetails) (interface{}, error)
	SendDutyForFulfillment(string, string) (interface{}, error)
}

/*
 * Duties and Events
 *
 * ## Duties and Events 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DutiesApiController binds http requests to an api service and writes the service results to the http response
type DutiesApiController struct {
	service DutiesApiServicer
}

// NewDutiesApiController creates a default api controller
func NewDutiesApiController(s DutiesApiServicer) Router {
	return &DutiesApiController{ service: s }
}

// Routes returns all of the api route for the DutiesApiController
func (c *DutiesApiController) Routes() Routes {
	return Routes{ 
		{
			"CancelDuty",
			strings.ToUpper("Delete"),
			"/api/duty/v1/duties/{id}",
			c.CancelDuty,
		},
		{
			"CancelDutyBooking",
			strings.ToUpper("Delete"),
			"/api/duty/v1/duties/{id}/booking",
			c.CancelDutyBooking,
		},
		{
			"CreateDuty",
			strings.ToUpper("Post"),
			"/api/duty/v1/duties",
			c.CreateDuty,
		},
		{
			"SendDutyCosting",
			strings.ToUpper("Post"),
			"/api/duty/v1/duties/{id}/costing",
			c.SendDutyCosting,
		},
		{
			"SendDutyForFulfillment",
			strings.ToUpper("Post"),
			"/api/duty/v1/duties/{id}/sendTo/{destination}",
			c.SendDutyForFulfillment,
		},
	}
}

// CancelDuty - 
func (c *DutiesApiController) CancelDuty(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.CancelDuty(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// CancelDutyBooking - 
func (c *DutiesApiController) CancelDutyBooking(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.CancelDutyBooking(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// CreateDuty - 
func (c *DutiesApiController) CreateDuty(w http.ResponseWriter, r *http.Request) { 
	dutyDetails := &DutyDetails{}
	if err := json.NewDecoder(r.Body).Decode(&dutyDetails); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.CreateDuty(*dutyDetails)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// SendDutyCosting - 
func (c *DutiesApiController) SendDutyCosting(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	dutyCostDetails := &DutyCostDetails{}
	if err := json.NewDecoder(r.Body).Decode(&dutyCostDetails); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.SendDutyCosting(id, *dutyCostDetails)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// SendDutyForFulfillment - 
func (c *DutiesApiController) SendDutyForFulfillment(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	destination := params["destination"]
	result, err := c.service.SendDutyForFulfillment(id, destination)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

/*
 * Duties and Events
 * ## Duties and Events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.AsyncResponse;
import com.allocate.openapi.model.DutyCostDetails;
import com.allocate.openapi.model.DutyDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DutiesApi {
    private ApiClient localVarApiClient;

    public DutiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DutiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelDuty
     * @param id ID of the duty (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The cancellation has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDutyCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/duties/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDutyValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelDuty(Async)");
        }
        

        okhttp3.Call localVarCall = cancelDutyCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Cancel a duty. Also cancels any bookings (if present).
     * @param id ID of the duty (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The cancellation has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public void cancelDuty(String id) throws ApiException {
        cancelDutyWithHttpInfo(id);
    }

    /**
     * 
     * Cancel a duty. Also cancels any bookings (if present).
     * @param id ID of the duty (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The cancellation has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelDutyWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = cancelDutyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancel a duty. Also cancels any bookings (if present).
     * @param id ID of the duty (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The cancellation has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDutyAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDutyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelDutyBooking
     * @param id ID of the duty (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty booking cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty cancellation been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Duty or Customer not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDutyBookingCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/duties/{id}/booking"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDutyBookingValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelDutyBooking(Async)");
        }
        

        okhttp3.Call localVarCall = cancelDutyBookingCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Cancel a duty booking.
     * @param id ID of the duty (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty booking cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty cancellation been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Duty or Customer not found </td><td>  -  </td></tr>
     </table>
     */
    public void cancelDutyBooking(String id) throws ApiException {
        cancelDutyBookingWithHttpInfo(id);
    }

    /**
     * 
     * Cancel a duty booking.
     * @param id ID of the duty (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty booking cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty cancellation been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Duty or Customer not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelDutyBookingWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = cancelDutyBookingValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancel a duty booking.
     * @param id ID of the duty (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty booking cancelled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty cancellation been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Duty or Customer not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDutyBookingAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDutyBookingValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDuty
     * @param dutyDetails Duty to be sent to agency (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDutyCall(DutyDetails dutyDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dutyDetails;

        // create path and map variables
        String localVarPath = "/duties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDutyValidateBeforeCall(DutyDetails dutyDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dutyDetails' is set
        if (dutyDetails == null) {
            throw new ApiException("Missing the required parameter 'dutyDetails' when calling createDuty(Async)");
        }
        

        okhttp3.Call localVarCall = createDutyCall(dutyDetails, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new Duty
     * @param dutyDetails Duty to be sent to agency (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public String createDuty(DutyDetails dutyDetails) throws ApiException {
        ApiResponse<String> localVarResp = createDutyWithHttpInfo(dutyDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Duty
     * @param dutyDetails Duty to be sent to agency (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createDutyWithHttpInfo(DutyDetails dutyDetails) throws ApiException {
        okhttp3.Call localVarCall = createDutyValidateBeforeCall(dutyDetails, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Duty
     * @param dutyDetails Duty to be sent to agency (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty created successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDutyAsync(DutyDetails dutyDetails, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDutyValidateBeforeCall(dutyDetails, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendDutyCosting
     * @param id ID of the duty (required)
     * @param dutyCostDetails Costing Information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty costing successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty costing has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDutyCostingCall(String id, DutyCostDetails dutyCostDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dutyCostDetails;

        // create path and map variables
        String localVarPath = "/duties/{id}/costing"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendDutyCostingValidateBeforeCall(String id, DutyCostDetails dutyCostDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendDutyCosting(Async)");
        }
        
        // verify the required parameter 'dutyCostDetails' is set
        if (dutyCostDetails == null) {
            throw new ApiException("Missing the required parameter 'dutyCostDetails' when calling sendDutyCosting(Async)");
        }
        

        okhttp3.Call localVarCall = sendDutyCostingCall(id, dutyCostDetails, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id ID of the duty (required)
     * @param dutyCostDetails Costing Information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty costing successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty costing has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public void sendDutyCosting(String id, DutyCostDetails dutyCostDetails) throws ApiException {
        sendDutyCostingWithHttpInfo(id, dutyCostDetails);
    }

    /**
     * 
     * 
     * @param id ID of the duty (required)
     * @param dutyCostDetails Costing Information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty costing successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty costing has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendDutyCostingWithHttpInfo(String id, DutyCostDetails dutyCostDetails) throws ApiException {
        okhttp3.Call localVarCall = sendDutyCostingValidateBeforeCall(id, dutyCostDetails, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id ID of the duty (required)
     * @param dutyCostDetails Costing Information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty costing successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The duty costing has been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDutyCostingAsync(String id, DutyCostDetails dutyCostDetails, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendDutyCostingValidateBeforeCall(id, dutyCostDetails, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendDutyForFulfillment
     * @param id ID of the duty (required)
     * @param destination Desination to send the duty (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty sent successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDutyForFulfillmentCall(String id, String destination, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/duties/{id}/sendTo/{destination}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "destination" + "\\}", localVarApiClient.escapeString(destination.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendDutyForFulfillmentValidateBeforeCall(String id, String destination, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendDutyForFulfillment(Async)");
        }
        
        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling sendDutyForFulfillment(Async)");
        }
        

        okhttp3.Call localVarCall = sendDutyForFulfillmentCall(id, destination, _callback);
        return localVarCall;

    }

    /**
     * 
     * Send a duty for fulfillment by contingent workforce (Bank, Cloudstaff, Agency)
     * @param id ID of the duty (required)
     * @param destination Desination to send the duty (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty sent successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public void sendDutyForFulfillment(String id, String destination) throws ApiException {
        sendDutyForFulfillmentWithHttpInfo(id, destination);
    }

    /**
     * 
     * Send a duty for fulfillment by contingent workforce (Bank, Cloudstaff, Agency)
     * @param id ID of the duty (required)
     * @param destination Desination to send the duty (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty sent successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendDutyForFulfillmentWithHttpInfo(String id, String destination) throws ApiException {
        okhttp3.Call localVarCall = sendDutyForFulfillmentValidateBeforeCall(id, destination, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Send a duty for fulfillment by contingent workforce (Bank, Cloudstaff, Agency)
     * @param id ID of the duty (required)
     * @param destination Desination to send the duty (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Duty sent successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Request been accepted and a response will be returned asyncronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDutyForFulfillmentAsync(String id, String destination, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendDutyForFulfillmentValidateBeforeCall(id, destination, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

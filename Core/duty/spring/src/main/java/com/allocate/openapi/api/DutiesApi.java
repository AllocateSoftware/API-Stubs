/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.openapi.api;

import com.allocate.openapi.model.AsyncResponse;
import com.allocate.openapi.model.DutyCostDetails;
import com.allocate.openapi.model.DutyDetails;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:35:56.228501Z[Europe/London]")

@Validated
@Api(value = "duties", description = "the duties API")
public interface DutiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "cancelDuty", notes = "Cancel a duty. Also cancels any bookings (if present).", tags={ "Duties","3rd Party Rostering", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty cancelled"),
        @ApiResponse(code = 202, message = "The cancellation has been accepted and a response will be returned asyncronously.", response = AsyncResponse.class) })
    @RequestMapping(value = "/duties/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> cancelDuty(@ApiParam(value = "ID of the duty",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "cancelDutyBooking", notes = "Cancel a duty booking.", tags={ "Duties","3rd Party Rostering", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty booking cancelled"),
        @ApiResponse(code = 202, message = "The duty cancellation been accepted and a response will be returned asyncronously.", response = AsyncResponse.class),
        @ApiResponse(code = 404, message = "Duty or Customer not found") })
    @RequestMapping(value = "/duties/{id}/booking",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> cancelDutyBooking(@ApiParam(value = "ID of the duty",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "createDuty", notes = "Create a new Duty", response = String.class, tags={ "Duties","3rd Party Rostering", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty created successfully", response = String.class),
        @ApiResponse(code = 202, message = "The duty has been accepted and a response will be returned asyncronously.", response = AsyncResponse.class) })
    @RequestMapping(value = "/duties",
        produces = { "text/plain", "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> createDuty(@ApiParam(value = "Duty to be sent to agency" ,required=true )  @Valid @RequestBody DutyDetails dutyDetails) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "sendDutyCosting", notes = "", tags={ "Duties","Costing","Bookings", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty costing successfully"),
        @ApiResponse(code = 202, message = "The duty costing has been accepted and a response will be returned asyncronously.", response = AsyncResponse.class) })
    @RequestMapping(value = "/duties/{id}/costing",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> sendDutyCosting(@ApiParam(value = "ID of the duty",required=true) @PathVariable("id") String id,@ApiParam(value = "Costing Information" ,required=true )  @Valid @RequestBody DutyCostDetails dutyCostDetails) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "sendDutyForFulfillment", notes = "Send a duty for fulfillment by contingent workforce (Bank, Cloudstaff, Agency)", tags={ "Duties","3rd Party Rostering", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty sent successfully"),
        @ApiResponse(code = 202, message = "Request been accepted and a response will be returned asyncronously.", response = AsyncResponse.class) })
    @RequestMapping(value = "/duties/{id}/sendTo/{destination}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> sendDutyForFulfillment(@ApiParam(value = "ID of the duty",required=true) @PathVariable("id") String id,@ApiParam(value = "Desination to send the duty",required=true, allowableValues = "\"bank\", \"agency\", \"cloudstaff\"") @PathVariable("destination") String destination) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server.models.duty import Duty
from api_server.models.duty_assignment_redeployment_event_all_of import DutyAssignmentRedeploymentEventAllOf
from api_server.models.event import Event
from api_server import util


class DutyAssignmentRedeploymentEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: str=None, assignment_number: str=None, original_duty: Duty=None, new_duty: Duty=None):
        """DutyAssignmentRedeploymentEvent - a model defined in OpenAPI

        :param event_type: The event_type of this DutyAssignmentRedeploymentEvent.
        :param assignment_number: The assignment_number of this DutyAssignmentRedeploymentEvent.
        :param original_duty: The original_duty of this DutyAssignmentRedeploymentEvent.
        :param new_duty: The new_duty of this DutyAssignmentRedeploymentEvent.
        """
        self.openapi_types = {
            'event_type': str,
            'assignment_number': str,
            'original_duty': Duty,
            'new_duty': Duty
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'assignment_number': 'assignmentNumber',
            'original_duty': 'originalDuty',
            'new_duty': 'newDuty'
        }

        self._event_type = event_type
        self._assignment_number = assignment_number
        self._original_duty = original_duty
        self._new_duty = new_duty

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DutyAssignmentRedeploymentEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DutyAssignmentRedeploymentEvent of this DutyAssignmentRedeploymentEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this DutyAssignmentRedeploymentEvent.


        :return: The event_type of this DutyAssignmentRedeploymentEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this DutyAssignmentRedeploymentEvent.


        :param event_type: The event_type of this DutyAssignmentRedeploymentEvent.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def assignment_number(self):
        """Gets the assignment_number of this DutyAssignmentRedeploymentEvent.


        :return: The assignment_number of this DutyAssignmentRedeploymentEvent.
        :rtype: str
        """
        return self._assignment_number

    @assignment_number.setter
    def assignment_number(self, assignment_number):
        """Sets the assignment_number of this DutyAssignmentRedeploymentEvent.


        :param assignment_number: The assignment_number of this DutyAssignmentRedeploymentEvent.
        :type assignment_number: str
        """

        self._assignment_number = assignment_number

    @property
    def original_duty(self):
        """Gets the original_duty of this DutyAssignmentRedeploymentEvent.


        :return: The original_duty of this DutyAssignmentRedeploymentEvent.
        :rtype: Duty
        """
        return self._original_duty

    @original_duty.setter
    def original_duty(self, original_duty):
        """Sets the original_duty of this DutyAssignmentRedeploymentEvent.


        :param original_duty: The original_duty of this DutyAssignmentRedeploymentEvent.
        :type original_duty: Duty
        """

        self._original_duty = original_duty

    @property
    def new_duty(self):
        """Gets the new_duty of this DutyAssignmentRedeploymentEvent.


        :return: The new_duty of this DutyAssignmentRedeploymentEvent.
        :rtype: Duty
        """
        return self._new_duty

    @new_duty.setter
    def new_duty(self, new_duty):
        """Sets the new_duty of this DutyAssignmentRedeploymentEvent.


        :param new_duty: The new_duty of this DutyAssignmentRedeploymentEvent.
        :type new_duty: Duty
        """

        self._new_duty = new_duty

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server import util


class DutyCostDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, costing_type: str=None, amount: float=None):
        """DutyCostDetails - a model defined in OpenAPI

        :param costing_type: The costing_type of this DutyCostDetails.
        :param amount: The amount of this DutyCostDetails.
        """
        self.openapi_types = {
            'costing_type': str,
            'amount': float
        }

        self.attribute_map = {
            'costing_type': 'costingType',
            'amount': 'amount'
        }

        self._costing_type = costing_type
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DutyCostDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DutyCostDetails of this DutyCostDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def costing_type(self):
        """Gets the costing_type of this DutyCostDetails.

        Whether this cost is estimated, or actual

        :return: The costing_type of this DutyCostDetails.
        :rtype: str
        """
        return self._costing_type

    @costing_type.setter
    def costing_type(self, costing_type):
        """Sets the costing_type of this DutyCostDetails.

        Whether this cost is estimated, or actual

        :param costing_type: The costing_type of this DutyCostDetails.
        :type costing_type: str
        """
        allowed_values = ["estimated", "actual"]
        if costing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `costing_type` ({0}), must be one of {1}"
                .format(costing_type, allowed_values)
            )

        self._costing_type = costing_type

    @property
    def amount(self):
        """Gets the amount of this DutyCostDetails.

        The amount (sterling)

        :return: The amount of this DutyCostDetails.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DutyCostDetails.

        The amount (sterling)

        :param amount: The amount of this DutyCostDetails.
        :type amount: float
        """

        self._amount = amount

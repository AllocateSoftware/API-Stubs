# coding: utf-8

"""
    Duties and Events

    ## Duties and Events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class DutyCascadeEventAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'duty_id': 'str',
        'cascade_from': 'str',
        'cascade_to': 'str',
        'is_duty_reset': 'bool'
    }

    attribute_map = {
        'duty_id': 'dutyId',
        'cascade_from': 'cascadeFrom',
        'cascade_to': 'cascadeTo',
        'is_duty_reset': 'isDutyReset'
    }

    def __init__(self, duty_id=None, cascade_from=None, cascade_to=None, is_duty_reset=None, local_vars_configuration=None):  # noqa: E501
        """DutyCascadeEventAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._duty_id = None
        self._cascade_from = None
        self._cascade_to = None
        self._is_duty_reset = None
        self.discriminator = None

        self.duty_id = duty_id
        if cascade_from is not None:
            self.cascade_from = cascade_from
        self.cascade_to = cascade_to
        if is_duty_reset is not None:
            self.is_duty_reset = is_duty_reset

    @property
    def duty_id(self):
        """Gets the duty_id of this DutyCascadeEventAllOf.  # noqa: E501


        :return: The duty_id of this DutyCascadeEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._duty_id

    @duty_id.setter
    def duty_id(self, duty_id):
        """Sets the duty_id of this DutyCascadeEventAllOf.


        :param duty_id: The duty_id of this DutyCascadeEventAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and duty_id is None:  # noqa: E501
            raise ValueError("Invalid value for `duty_id`, must not be `None`")  # noqa: E501

        self._duty_id = duty_id

    @property
    def cascade_from(self):
        """Gets the cascade_from of this DutyCascadeEventAllOf.  # noqa: E501


        :return: The cascade_from of this DutyCascadeEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._cascade_from

    @cascade_from.setter
    def cascade_from(self, cascade_from):
        """Sets the cascade_from of this DutyCascadeEventAllOf.


        :param cascade_from: The cascade_from of this DutyCascadeEventAllOf.  # noqa: E501
        :type: str
        """
        allowed_values = ["ward", "bank", "cloudstaff", "agency", "nationalBank"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cascade_from not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cascade_from` ({0}), must be one of {1}"  # noqa: E501
                .format(cascade_from, allowed_values)
            )

        self._cascade_from = cascade_from

    @property
    def cascade_to(self):
        """Gets the cascade_to of this DutyCascadeEventAllOf.  # noqa: E501


        :return: The cascade_to of this DutyCascadeEventAllOf.  # noqa: E501
        :rtype: str
        """
        return self._cascade_to

    @cascade_to.setter
    def cascade_to(self, cascade_to):
        """Sets the cascade_to of this DutyCascadeEventAllOf.


        :param cascade_to: The cascade_to of this DutyCascadeEventAllOf.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cascade_to is None:  # noqa: E501
            raise ValueError("Invalid value for `cascade_to`, must not be `None`")  # noqa: E501
        allowed_values = ["ward", "bank", "cloudstaff", "agency", "nationalBank"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cascade_to not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cascade_to` ({0}), must be one of {1}"  # noqa: E501
                .format(cascade_to, allowed_values)
            )

        self._cascade_to = cascade_to

    @property
    def is_duty_reset(self):
        """Gets the is_duty_reset of this DutyCascadeEventAllOf.  # noqa: E501

        Is this a 'reset' ? (I.E Revert)  # noqa: E501

        :return: The is_duty_reset of this DutyCascadeEventAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_duty_reset

    @is_duty_reset.setter
    def is_duty_reset(self, is_duty_reset):
        """Sets the is_duty_reset of this DutyCascadeEventAllOf.

        Is this a 'reset' ? (I.E Revert)  # noqa: E501

        :param is_duty_reset: The is_duty_reset of this DutyCascadeEventAllOf.  # noqa: E501
        :type: bool
        """

        self._is_duty_reset = is_duty_reset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DutyCascadeEventAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DutyCascadeEventAllOf):
            return True

        return self.to_dict() != other.to_dict()

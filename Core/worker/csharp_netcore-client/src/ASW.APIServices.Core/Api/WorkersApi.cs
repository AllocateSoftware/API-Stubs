/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>WorkerRegistrationResponse</returns>
        WorkerRegistrationResponse RegisterWorker (Person person);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>ApiResponse of WorkerRegistrationResponse</returns>
        ApiResponse<WorkerRegistrationResponse> RegisterWorkerWithHttpInfo (Person person);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submit an leave (vacation) claim for a worker
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>AsyncResponse</returns>
        AsyncResponse SubmitAnnualLeaveClaim (string id, LeaveClaim leaveClaim);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submit an leave (vacation) claim for a worker
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        ApiResponse<AsyncResponse> SubmitAnnualLeaveClaimWithHttpInfo (string id, LeaveClaim leaveClaim);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>Task of WorkerRegistrationResponse</returns>
        System.Threading.Tasks.Task<WorkerRegistrationResponse> RegisterWorkerAsync (Person person);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>Task of ApiResponse (WorkerRegistrationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkerRegistrationResponse>> RegisterWorkerAsyncWithHttpInfo (Person person);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submit an leave (vacation) claim for a worker
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>Task of AsyncResponse</returns>
        System.Threading.Tasks.Task<AsyncResponse> SubmitAnnualLeaveClaimAsync (string id, LeaveClaim leaveClaim);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Submit an leave (vacation) claim for a worker
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> SubmitAnnualLeaveClaimAsyncWithHttpInfo (string id, LeaveClaim leaveClaim);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkersApi : IWorkersApiSync, IWorkersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkersApi : IWorkersApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkersApi(String basePath)
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                new ASW.APIServices.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkersApi(ASW.APIServices.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WorkersApi(ASW.APIServices.Core.Client.ISynchronousClient client,ASW.APIServices.Core.Client.IAsynchronousClient asyncClient, ASW.APIServices.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>WorkerRegistrationResponse</returns>
        public WorkerRegistrationResponse RegisterWorker (Person person)
        {
             ASW.APIServices.Core.Client.ApiResponse<WorkerRegistrationResponse> localVarResponse = RegisterWorkerWithHttpInfo(person);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>ApiResponse of WorkerRegistrationResponse</returns>
        public ASW.APIServices.Core.Client.ApiResponse< WorkerRegistrationResponse > RegisterWorkerWithHttpInfo (Person person)
        {
            // verify the required parameter 'person' is set
            if (person == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'person' when calling WorkersApi->RegisterWorker");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = person;


            // make the HTTP request
            var localVarResponse = this.Client.Post< WorkerRegistrationResponse >("/workers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterWorker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>Task of WorkerRegistrationResponse</returns>
        public async System.Threading.Tasks.Task<WorkerRegistrationResponse> RegisterWorkerAsync (Person person)
        {
             ASW.APIServices.Core.Client.ApiResponse<WorkerRegistrationResponse> localVarResponse = await RegisterWorkerAsyncWithHttpInfo(person);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Provide worker details for inclusion into the Allocate ecosystem. The platform will accept the worker information, and respond either synchronously or asynchronously with the allocate worker identifier. This may entail an on-boarding process, so the final response may require human interaction before it can be completed.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="person">Worker information</param>
        /// <returns>Task of ApiResponse (WorkerRegistrationResponse)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<WorkerRegistrationResponse>> RegisterWorkerAsyncWithHttpInfo (Person person)
        {
            // verify the required parameter 'person' is set
            if (person == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'person' when calling WorkersApi->RegisterWorker");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = person;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkerRegistrationResponse>("/workers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterWorker", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Submit an leave (vacation) claim for a worker
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>AsyncResponse</returns>
        public AsyncResponse SubmitAnnualLeaveClaim (string id, LeaveClaim leaveClaim)
        {
             ASW.APIServices.Core.Client.ApiResponse<AsyncResponse> localVarResponse = SubmitAnnualLeaveClaimWithHttpInfo(id, leaveClaim);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Submit an leave (vacation) claim for a worker
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        public ASW.APIServices.Core.Client.ApiResponse< AsyncResponse > SubmitAnnualLeaveClaimWithHttpInfo (string id, LeaveClaim leaveClaim)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling WorkersApi->SubmitAnnualLeaveClaim");

            // verify the required parameter 'leaveClaim' is set
            if (leaveClaim == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'leaveClaim' when calling WorkersApi->SubmitAnnualLeaveClaim");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = leaveClaim;


            // make the HTTP request
            var localVarResponse = this.Client.Post< AsyncResponse >("/worker/{id}/leave", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitAnnualLeaveClaim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Submit an leave (vacation) claim for a worker
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>Task of AsyncResponse</returns>
        public async System.Threading.Tasks.Task<AsyncResponse> SubmitAnnualLeaveClaimAsync (string id, LeaveClaim leaveClaim)
        {
             ASW.APIServices.Core.Client.ApiResponse<AsyncResponse> localVarResponse = await SubmitAnnualLeaveClaimAsyncWithHttpInfo(id, leaveClaim);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Submit an leave (vacation) claim for a worker
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the worker</param>
        /// <param name="leaveClaim">Leave claim for a worker</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<AsyncResponse>> SubmitAnnualLeaveClaimAsyncWithHttpInfo (string id, LeaveClaim leaveClaim)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling WorkersApi->SubmitAnnualLeaveClaim");

            // verify the required parameter 'leaveClaim' is set
            if (leaveClaim == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'leaveClaim' when calling WorkersApi->SubmitAnnualLeaveClaim");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
                localVarRequestOptions.PathParameters.Add("id", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = leaveClaim;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AsyncResponse>("/worker/{id}/leave", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitAnnualLeaveClaim", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

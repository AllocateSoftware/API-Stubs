/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// ContactLogInformationDetails
    /// </summary>
    [DataContract]
    public partial class ContactLogInformationDetails :  IEquatable<ContactLogInformationDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactLogInformationDetails" /> class.
        /// </summary>
        /// <param name="successful">Was this contact successful? (e.g: Call was answered) .</param>
        /// <param name="notes">Notes on the contact.</param>
        public ContactLogInformationDetails(bool successful = default(bool), string notes = default(string))
        {
            this.Successful = successful;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Was this contact successful? (e.g: Call was answered) 
        /// </summary>
        /// <value>Was this contact successful? (e.g: Call was answered) </value>
        [DataMember(Name="successful", EmitDefaultValue=false)]
        public bool Successful { get; set; }

        /// <summary>
        /// Notes on the contact
        /// </summary>
        /// <value>Notes on the contact</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactLogInformationDetails {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactLogInformationDetails);
        }

        /// <summary>
        /// Returns true if ContactLogInformationDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactLogInformationDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactLogInformationDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    this.Successful.Equals(input.Successful)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

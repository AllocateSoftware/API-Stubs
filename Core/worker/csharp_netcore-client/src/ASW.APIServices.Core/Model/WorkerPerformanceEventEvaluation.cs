/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// WorkerPerformanceEventEvaluation
    /// </summary>
    [DataContract]
    public partial class WorkerPerformanceEventEvaluation :  IEquatable<WorkerPerformanceEventEvaluation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerPerformanceEventEvaluation" /> class.
        /// </summary>
        /// <param name="evaluator">evaluator.</param>
        /// <param name="score">Score out of 10.</param>
        /// <param name="comment">Free text comment.</param>
        /// <param name="quesions">List of questions and answers froman evaluator.</param>
        public WorkerPerformanceEventEvaluation(WorkerPerformanceEventEvaluationEvaluator evaluator = default(WorkerPerformanceEventEvaluationEvaluator), decimal score = default(decimal), string comment = default(string), List<WorkerPerformanceEventEvaluationQuesions> quesions = default(List<WorkerPerformanceEventEvaluationQuesions>))
        {
            this.Evaluator = evaluator;
            this.Score = score;
            this.Comment = comment;
            this.Quesions = quesions;
        }
        
        /// <summary>
        /// Gets or Sets Evaluator
        /// </summary>
        [DataMember(Name="evaluator", EmitDefaultValue=false)]
        public WorkerPerformanceEventEvaluationEvaluator Evaluator { get; set; }

        /// <summary>
        /// Score out of 10
        /// </summary>
        /// <value>Score out of 10</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public decimal Score { get; set; }

        /// <summary>
        /// Free text comment
        /// </summary>
        /// <value>Free text comment</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// List of questions and answers froman evaluator
        /// </summary>
        /// <value>List of questions and answers froman evaluator</value>
        [DataMember(Name="quesions", EmitDefaultValue=false)]
        public List<WorkerPerformanceEventEvaluationQuesions> Quesions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerPerformanceEventEvaluation {\n");
            sb.Append("  Evaluator: ").Append(Evaluator).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Quesions: ").Append(Quesions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerPerformanceEventEvaluation);
        }

        /// <summary>
        /// Returns true if WorkerPerformanceEventEvaluation instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerPerformanceEventEvaluation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerPerformanceEventEvaluation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Evaluator == input.Evaluator ||
                    (this.Evaluator != null &&
                    this.Evaluator.Equals(input.Evaluator))
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Quesions == input.Quesions ||
                    this.Quesions != null &&
                    input.Quesions != null &&
                    this.Quesions.SequenceEqual(input.Quesions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Evaluator != null)
                    hashCode = hashCode * 59 + this.Evaluator.GetHashCode();
                hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Quesions != null)
                    hashCode = hashCode * 59 + this.Quesions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Score (decimal) maximum
            if(this.Score > (decimal)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value less than or equal to 10.", new [] { "Score" });
            }

            // Score (decimal) minimum
            if(this.Score < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new [] { "Score" });
            }

            yield break;
        }
    }

}

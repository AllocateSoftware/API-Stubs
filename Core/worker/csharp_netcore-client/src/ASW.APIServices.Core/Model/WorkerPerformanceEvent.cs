/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// WorkerPerformanceEvent
    /// </summary>
    [DataContract]
    public partial class WorkerPerformanceEvent :  IEquatable<WorkerPerformanceEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerPerformanceEvent" /> class.
        /// </summary>
        /// <param name="worker">worker.</param>
        /// <param name="dutyDetails">dutyDetails.</param>
        /// <param name="evaluation">evaluation.</param>
        public WorkerPerformanceEvent(WorkerPerformanceEventWorker worker = default(WorkerPerformanceEventWorker), WorkerPerformanceEventDutyDetails dutyDetails = default(WorkerPerformanceEventDutyDetails), WorkerPerformanceEventEvaluation evaluation = default(WorkerPerformanceEventEvaluation))
        {
            this.Worker = worker;
            this.DutyDetails = dutyDetails;
            this.Evaluation = evaluation;
        }
        
        /// <summary>
        /// Gets or Sets Worker
        /// </summary>
        [DataMember(Name="worker", EmitDefaultValue=false)]
        public WorkerPerformanceEventWorker Worker { get; set; }

        /// <summary>
        /// Gets or Sets DutyDetails
        /// </summary>
        [DataMember(Name="dutyDetails", EmitDefaultValue=false)]
        public WorkerPerformanceEventDutyDetails DutyDetails { get; set; }

        /// <summary>
        /// Gets or Sets Evaluation
        /// </summary>
        [DataMember(Name="evaluation", EmitDefaultValue=false)]
        public WorkerPerformanceEventEvaluation Evaluation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerPerformanceEvent {\n");
            sb.Append("  Worker: ").Append(Worker).Append("\n");
            sb.Append("  DutyDetails: ").Append(DutyDetails).Append("\n");
            sb.Append("  Evaluation: ").Append(Evaluation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerPerformanceEvent);
        }

        /// <summary>
        /// Returns true if WorkerPerformanceEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerPerformanceEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerPerformanceEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Worker == input.Worker ||
                    (this.Worker != null &&
                    this.Worker.Equals(input.Worker))
                ) && 
                (
                    this.DutyDetails == input.DutyDetails ||
                    (this.DutyDetails != null &&
                    this.DutyDetails.Equals(input.DutyDetails))
                ) && 
                (
                    this.Evaluation == input.Evaluation ||
                    (this.Evaluation != null &&
                    this.Evaluation.Equals(input.Evaluation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Worker != null)
                    hashCode = hashCode * 59 + this.Worker.GetHashCode();
                if (this.DutyDetails != null)
                    hashCode = hashCode * 59 + this.DutyDetails.GetHashCode();
                if (this.Evaluation != null)
                    hashCode = hashCode * 59 + this.Evaluation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

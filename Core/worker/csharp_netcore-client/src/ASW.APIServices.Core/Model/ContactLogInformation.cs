/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// ContactLogInformation
    /// </summary>
    [DataContract]
    public partial class ContactLogInformation :  IEquatable<ContactLogInformation>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Telephone for value: telephone
            /// </summary>
            [EnumMember(Value = "telephone")]
            Telephone = 1,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 2,

            /// <summary>
            /// Enum IM for value: IM
            /// </summary>
            [EnumMember(Value = "IM")]
            IM = 3,

            /// <summary>
            /// Enum FaceToFace for value: faceToFace
            /// </summary>
            [EnumMember(Value = "faceToFace")]
            FaceToFace = 4

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactLogInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactLogInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactLogInformation" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="when">when.</param>
        /// <param name="who">who.</param>
        /// <param name="details">details.</param>
        public ContactLogInformation(TypeEnum type = default(TypeEnum), DateTime when = default(DateTime), Dictionary<string, Identifier> who = default(Dictionary<string, Identifier>), ContactLogInformationDetails details = default(ContactLogInformationDetails))
        {
            this.Type = type;
            this.When = when;
            this.Who = who;
            this.Details = details;
        }
        
        /// <summary>
        /// Gets or Sets When
        /// </summary>
        [DataMember(Name="when", EmitDefaultValue=false)]
        public DateTime When { get; set; }

        /// <summary>
        /// Gets or Sets Who
        /// </summary>
        [DataMember(Name="who", EmitDefaultValue=false)]
        public Dictionary<string, Identifier> Who { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public ContactLogInformationDetails Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactLogInformation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Who: ").Append(Who).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactLogInformation);
        }

        /// <summary>
        /// Returns true if ContactLogInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactLogInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactLogInformation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.When == input.When ||
                    (this.When != null &&
                    this.When.Equals(input.When))
                ) && 
                (
                    this.Who == input.Who ||
                    this.Who != null &&
                    input.Who != null &&
                    this.Who.SequenceEqual(input.Who)
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.When != null)
                    hashCode = hashCode * 59 + this.When.GetHashCode();
                if (this.Who != null)
                    hashCode = hashCode * 59 + this.Who.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

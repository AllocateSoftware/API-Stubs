/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// WorkerPerformanceEventDutyDetails
    /// </summary>
    [DataContract]
    public partial class WorkerPerformanceEventDutyDetails :  IEquatable<WorkerPerformanceEventDutyDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkerPerformanceEventDutyDetails" /> class.
        /// </summary>
        /// <param name="dutyId">ID of the duty within the allocate system.</param>
        /// <param name="from">When the duty started.</param>
        /// <param name="to">When the duty ended.</param>
        public WorkerPerformanceEventDutyDetails(string dutyId = default(string), DateTime from = default(DateTime), DateTime to = default(DateTime))
        {
            this.DutyId = dutyId;
            this.From = from;
            this.To = to;
        }
        
        /// <summary>
        /// ID of the duty within the allocate system
        /// </summary>
        /// <value>ID of the duty within the allocate system</value>
        [DataMember(Name="dutyId", EmitDefaultValue=false)]
        public string DutyId { get; set; }

        /// <summary>
        /// When the duty started
        /// </summary>
        /// <value>When the duty started</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public DateTime From { get; set; }

        /// <summary>
        /// When the duty ended
        /// </summary>
        /// <value>When the duty ended</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public DateTime To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerPerformanceEventDutyDetails {\n");
            sb.Append("  DutyId: ").Append(DutyId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkerPerformanceEventDutyDetails);
        }

        /// <summary>
        /// Returns true if WorkerPerformanceEventDutyDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkerPerformanceEventDutyDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerPerformanceEventDutyDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DutyId == input.DutyId ||
                    (this.DutyId != null &&
                    this.DutyId.Equals(input.DutyId))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DutyId != null)
                    hashCode = hashCode * 59 + this.DutyId.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

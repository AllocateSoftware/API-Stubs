/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// WorkingRestrictionRestrictions
    /// </summary>
    [DataContract]
    public partial class WorkingRestrictionRestrictions :  IEquatable<WorkingRestrictionRestrictions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkingRestrictionRestrictions" /> class.
        /// </summary>
        /// <param name="effectiveFrom">effectiveFrom.</param>
        /// <param name="daysPerWeek">daysPerWeek.</param>
        /// <param name="maxDaysPerWeek">maxDaysPerWeek.</param>
        /// <param name="maxShiftsPerWeek">maxShiftsPerWeek.</param>
        /// <param name="maxConsecutiveDays">maxConsecutiveDays.</param>
        /// <param name="maxConsecutiveDaysRequested">maxConsecutiveDaysRequested.</param>
        /// <param name="maxWorkTimePerDay">maxWorkTimePerDay.</param>
        /// <param name="maxDurationPerShift">maxDurationPerShift.</param>
        /// <param name="additionalHoursPerWeek">additionalHoursPerWeek.</param>
        /// <param name="maxOvertimePerDay">maxOvertimePerDay.</param>
        /// <param name="maxOvertimePerWeek">maxOvertimePerWeek.</param>
        /// <param name="maxOvertimePerCalendarMonth">maxOvertimePerCalendarMonth.</param>
        /// <param name="wtdDayStart">wtdDayStart.</param>
        /// <param name="wtdWeekDayStart">wtdWeekDayStart.</param>
        /// <param name="wtdWeekTimeStart">wtdWeekTimeStart.</param>
        /// <param name="minBreakBetweenShifts">minBreakBetweenShifts.</param>
        /// <param name="notes">notes.</param>
        public WorkingRestrictionRestrictions(string effectiveFrom = default(string), string daysPerWeek = default(string), string maxDaysPerWeek = default(string), string maxShiftsPerWeek = default(string), string maxConsecutiveDays = default(string), string maxConsecutiveDaysRequested = default(string), string maxWorkTimePerDay = default(string), string maxDurationPerShift = default(string), string additionalHoursPerWeek = default(string), string maxOvertimePerDay = default(string), string maxOvertimePerWeek = default(string), string maxOvertimePerCalendarMonth = default(string), string wtdDayStart = default(string), string wtdWeekDayStart = default(string), string wtdWeekTimeStart = default(string), decimal minBreakBetweenShifts = default(decimal), string notes = default(string))
        {
            this.EffectiveFrom = effectiveFrom;
            this.DaysPerWeek = daysPerWeek;
            this.MaxDaysPerWeek = maxDaysPerWeek;
            this.MaxShiftsPerWeek = maxShiftsPerWeek;
            this.MaxConsecutiveDays = maxConsecutiveDays;
            this.MaxConsecutiveDaysRequested = maxConsecutiveDaysRequested;
            this.MaxWorkTimePerDay = maxWorkTimePerDay;
            this.MaxDurationPerShift = maxDurationPerShift;
            this.AdditionalHoursPerWeek = additionalHoursPerWeek;
            this.MaxOvertimePerDay = maxOvertimePerDay;
            this.MaxOvertimePerWeek = maxOvertimePerWeek;
            this.MaxOvertimePerCalendarMonth = maxOvertimePerCalendarMonth;
            this.WtdDayStart = wtdDayStart;
            this.WtdWeekDayStart = wtdWeekDayStart;
            this.WtdWeekTimeStart = wtdWeekTimeStart;
            this.MinBreakBetweenShifts = minBreakBetweenShifts;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets EffectiveFrom
        /// </summary>
        [DataMember(Name="effectiveFrom", EmitDefaultValue=false)]
        public string EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or Sets DaysPerWeek
        /// </summary>
        [DataMember(Name="daysPerWeek", EmitDefaultValue=false)]
        public string DaysPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxDaysPerWeek
        /// </summary>
        [DataMember(Name="maxDaysPerWeek", EmitDefaultValue=false)]
        public string MaxDaysPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxShiftsPerWeek
        /// </summary>
        [DataMember(Name="maxShiftsPerWeek", EmitDefaultValue=false)]
        public string MaxShiftsPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxConsecutiveDays
        /// </summary>
        [DataMember(Name="maxConsecutiveDays", EmitDefaultValue=false)]
        public string MaxConsecutiveDays { get; set; }

        /// <summary>
        /// Gets or Sets MaxConsecutiveDaysRequested
        /// </summary>
        [DataMember(Name="maxConsecutiveDaysRequested", EmitDefaultValue=false)]
        public string MaxConsecutiveDaysRequested { get; set; }

        /// <summary>
        /// Gets or Sets MaxWorkTimePerDay
        /// </summary>
        [DataMember(Name="maxWorkTimePerDay", EmitDefaultValue=false)]
        public string MaxWorkTimePerDay { get; set; }

        /// <summary>
        /// Gets or Sets MaxDurationPerShift
        /// </summary>
        [DataMember(Name="maxDurationPerShift", EmitDefaultValue=false)]
        public string MaxDurationPerShift { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalHoursPerWeek
        /// </summary>
        [DataMember(Name="additionalHoursPerWeek", EmitDefaultValue=false)]
        public string AdditionalHoursPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxOvertimePerDay
        /// </summary>
        [DataMember(Name="maxOvertimePerDay", EmitDefaultValue=false)]
        public string MaxOvertimePerDay { get; set; }

        /// <summary>
        /// Gets or Sets MaxOvertimePerWeek
        /// </summary>
        [DataMember(Name="maxOvertimePerWeek", EmitDefaultValue=false)]
        public string MaxOvertimePerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxOvertimePerCalendarMonth
        /// </summary>
        [DataMember(Name="maxOvertimePerCalendarMonth", EmitDefaultValue=false)]
        public string MaxOvertimePerCalendarMonth { get; set; }

        /// <summary>
        /// Gets or Sets WtdDayStart
        /// </summary>
        [DataMember(Name="wtdDayStart", EmitDefaultValue=false)]
        public string WtdDayStart { get; set; }

        /// <summary>
        /// Gets or Sets WtdWeekDayStart
        /// </summary>
        [DataMember(Name="wtdWeekDayStart", EmitDefaultValue=false)]
        public string WtdWeekDayStart { get; set; }

        /// <summary>
        /// Gets or Sets WtdWeekTimeStart
        /// </summary>
        [DataMember(Name="wtdWeekTimeStart", EmitDefaultValue=false)]
        public string WtdWeekTimeStart { get; set; }

        /// <summary>
        /// Gets or Sets MinBreakBetweenShifts
        /// </summary>
        [DataMember(Name="minBreakBetweenShifts", EmitDefaultValue=false)]
        public decimal MinBreakBetweenShifts { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkingRestrictionRestrictions {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  DaysPerWeek: ").Append(DaysPerWeek).Append("\n");
            sb.Append("  MaxDaysPerWeek: ").Append(MaxDaysPerWeek).Append("\n");
            sb.Append("  MaxShiftsPerWeek: ").Append(MaxShiftsPerWeek).Append("\n");
            sb.Append("  MaxConsecutiveDays: ").Append(MaxConsecutiveDays).Append("\n");
            sb.Append("  MaxConsecutiveDaysRequested: ").Append(MaxConsecutiveDaysRequested).Append("\n");
            sb.Append("  MaxWorkTimePerDay: ").Append(MaxWorkTimePerDay).Append("\n");
            sb.Append("  MaxDurationPerShift: ").Append(MaxDurationPerShift).Append("\n");
            sb.Append("  AdditionalHoursPerWeek: ").Append(AdditionalHoursPerWeek).Append("\n");
            sb.Append("  MaxOvertimePerDay: ").Append(MaxOvertimePerDay).Append("\n");
            sb.Append("  MaxOvertimePerWeek: ").Append(MaxOvertimePerWeek).Append("\n");
            sb.Append("  MaxOvertimePerCalendarMonth: ").Append(MaxOvertimePerCalendarMonth).Append("\n");
            sb.Append("  WtdDayStart: ").Append(WtdDayStart).Append("\n");
            sb.Append("  WtdWeekDayStart: ").Append(WtdWeekDayStart).Append("\n");
            sb.Append("  WtdWeekTimeStart: ").Append(WtdWeekTimeStart).Append("\n");
            sb.Append("  MinBreakBetweenShifts: ").Append(MinBreakBetweenShifts).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkingRestrictionRestrictions);
        }

        /// <summary>
        /// Returns true if WorkingRestrictionRestrictions instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkingRestrictionRestrictions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkingRestrictionRestrictions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.DaysPerWeek == input.DaysPerWeek ||
                    (this.DaysPerWeek != null &&
                    this.DaysPerWeek.Equals(input.DaysPerWeek))
                ) && 
                (
                    this.MaxDaysPerWeek == input.MaxDaysPerWeek ||
                    (this.MaxDaysPerWeek != null &&
                    this.MaxDaysPerWeek.Equals(input.MaxDaysPerWeek))
                ) && 
                (
                    this.MaxShiftsPerWeek == input.MaxShiftsPerWeek ||
                    (this.MaxShiftsPerWeek != null &&
                    this.MaxShiftsPerWeek.Equals(input.MaxShiftsPerWeek))
                ) && 
                (
                    this.MaxConsecutiveDays == input.MaxConsecutiveDays ||
                    (this.MaxConsecutiveDays != null &&
                    this.MaxConsecutiveDays.Equals(input.MaxConsecutiveDays))
                ) && 
                (
                    this.MaxConsecutiveDaysRequested == input.MaxConsecutiveDaysRequested ||
                    (this.MaxConsecutiveDaysRequested != null &&
                    this.MaxConsecutiveDaysRequested.Equals(input.MaxConsecutiveDaysRequested))
                ) && 
                (
                    this.MaxWorkTimePerDay == input.MaxWorkTimePerDay ||
                    (this.MaxWorkTimePerDay != null &&
                    this.MaxWorkTimePerDay.Equals(input.MaxWorkTimePerDay))
                ) && 
                (
                    this.MaxDurationPerShift == input.MaxDurationPerShift ||
                    (this.MaxDurationPerShift != null &&
                    this.MaxDurationPerShift.Equals(input.MaxDurationPerShift))
                ) && 
                (
                    this.AdditionalHoursPerWeek == input.AdditionalHoursPerWeek ||
                    (this.AdditionalHoursPerWeek != null &&
                    this.AdditionalHoursPerWeek.Equals(input.AdditionalHoursPerWeek))
                ) && 
                (
                    this.MaxOvertimePerDay == input.MaxOvertimePerDay ||
                    (this.MaxOvertimePerDay != null &&
                    this.MaxOvertimePerDay.Equals(input.MaxOvertimePerDay))
                ) && 
                (
                    this.MaxOvertimePerWeek == input.MaxOvertimePerWeek ||
                    (this.MaxOvertimePerWeek != null &&
                    this.MaxOvertimePerWeek.Equals(input.MaxOvertimePerWeek))
                ) && 
                (
                    this.MaxOvertimePerCalendarMonth == input.MaxOvertimePerCalendarMonth ||
                    (this.MaxOvertimePerCalendarMonth != null &&
                    this.MaxOvertimePerCalendarMonth.Equals(input.MaxOvertimePerCalendarMonth))
                ) && 
                (
                    this.WtdDayStart == input.WtdDayStart ||
                    (this.WtdDayStart != null &&
                    this.WtdDayStart.Equals(input.WtdDayStart))
                ) && 
                (
                    this.WtdWeekDayStart == input.WtdWeekDayStart ||
                    (this.WtdWeekDayStart != null &&
                    this.WtdWeekDayStart.Equals(input.WtdWeekDayStart))
                ) && 
                (
                    this.WtdWeekTimeStart == input.WtdWeekTimeStart ||
                    (this.WtdWeekTimeStart != null &&
                    this.WtdWeekTimeStart.Equals(input.WtdWeekTimeStart))
                ) && 
                (
                    this.MinBreakBetweenShifts == input.MinBreakBetweenShifts ||
                    this.MinBreakBetweenShifts.Equals(input.MinBreakBetweenShifts)
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                if (this.DaysPerWeek != null)
                    hashCode = hashCode * 59 + this.DaysPerWeek.GetHashCode();
                if (this.MaxDaysPerWeek != null)
                    hashCode = hashCode * 59 + this.MaxDaysPerWeek.GetHashCode();
                if (this.MaxShiftsPerWeek != null)
                    hashCode = hashCode * 59 + this.MaxShiftsPerWeek.GetHashCode();
                if (this.MaxConsecutiveDays != null)
                    hashCode = hashCode * 59 + this.MaxConsecutiveDays.GetHashCode();
                if (this.MaxConsecutiveDaysRequested != null)
                    hashCode = hashCode * 59 + this.MaxConsecutiveDaysRequested.GetHashCode();
                if (this.MaxWorkTimePerDay != null)
                    hashCode = hashCode * 59 + this.MaxWorkTimePerDay.GetHashCode();
                if (this.MaxDurationPerShift != null)
                    hashCode = hashCode * 59 + this.MaxDurationPerShift.GetHashCode();
                if (this.AdditionalHoursPerWeek != null)
                    hashCode = hashCode * 59 + this.AdditionalHoursPerWeek.GetHashCode();
                if (this.MaxOvertimePerDay != null)
                    hashCode = hashCode * 59 + this.MaxOvertimePerDay.GetHashCode();
                if (this.MaxOvertimePerWeek != null)
                    hashCode = hashCode * 59 + this.MaxOvertimePerWeek.GetHashCode();
                if (this.MaxOvertimePerCalendarMonth != null)
                    hashCode = hashCode * 59 + this.MaxOvertimePerCalendarMonth.GetHashCode();
                if (this.WtdDayStart != null)
                    hashCode = hashCode * 59 + this.WtdDayStart.GetHashCode();
                if (this.WtdWeekDayStart != null)
                    hashCode = hashCode * 59 + this.WtdWeekDayStart.GetHashCode();
                if (this.WtdWeekTimeStart != null)
                    hashCode = hashCode * 59 + this.WtdWeekTimeStart.GetHashCode();
                hashCode = hashCode * 59 + this.MinBreakBetweenShifts.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Specialty
    /// </summary>
    [DataContract]
    public partial class Specialty :  IEquatable<Specialty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Specialty" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Specialty() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Specialty" /> class.
        /// </summary>
        /// <param name="tempStaffSpeciality">tempStaffSpeciality.</param>
        /// <param name="validity">validity (required).</param>
        /// <param name="notes">notes.</param>
        public Specialty(string tempStaffSpeciality = default(string), DateSpan validity = default(DateSpan), string notes = default(string))
        {
            // to ensure "validity" is required (not null)
            if (validity == null)
            {
                throw new InvalidDataException("validity is a required property for Specialty and cannot be null");
            }
            else
            {
                this.Validity = validity;
            }
            
            this.TempStaffSpeciality = tempStaffSpeciality;
            this.Notes = notes;
        }
        
        /// <summary>
        /// Gets or Sets TempStaffSpeciality
        /// </summary>
        [DataMember(Name="tempStaffSpeciality", EmitDefaultValue=false)]
        public string TempStaffSpeciality { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public DateSpan Validity { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Specialty {\n");
            sb.Append("  TempStaffSpeciality: ").Append(TempStaffSpeciality).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Specialty);
        }

        /// <summary>
        /// Returns true if Specialty instances are equal
        /// </summary>
        /// <param name="input">Instance of Specialty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Specialty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TempStaffSpeciality == input.TempStaffSpeciality ||
                    (this.TempStaffSpeciality != null &&
                    this.TempStaffSpeciality.Equals(input.TempStaffSpeciality))
                ) && 
                (
                    this.Validity == input.Validity ||
                    (this.Validity != null &&
                    this.Validity.Equals(input.Validity))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TempStaffSpeciality != null)
                    hashCode = hashCode * 59 + this.TempStaffSpeciality.GetHashCode();
                if (this.Validity != null)
                    hashCode = hashCode * 59 + this.Validity.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

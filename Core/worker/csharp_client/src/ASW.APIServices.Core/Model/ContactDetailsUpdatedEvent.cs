/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// ContactDetailsUpdatedEvent
    /// </summary>
    [DataContract]
    public partial class ContactDetailsUpdatedEvent :  IEquatable<ContactDetailsUpdatedEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDetailsUpdatedEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactDetailsUpdatedEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDetailsUpdatedEvent" /> class.
        /// </summary>
        /// <param name="personId">ASWid of the person (required).</param>
        /// <param name="contactInformation">contactInformation (required).</param>
        public ContactDetailsUpdatedEvent(string personId = default(string), Dictionary<string, ContactInformation> contactInformation = default(Dictionary<string, ContactInformation>))
        {
            // to ensure "personId" is required (not null)
            if (personId == null)
            {
                throw new InvalidDataException("personId is a required property for ContactDetailsUpdatedEvent and cannot be null");
            }
            else
            {
                this.PersonId = personId;
            }
            
            // to ensure "contactInformation" is required (not null)
            if (contactInformation == null)
            {
                throw new InvalidDataException("contactInformation is a required property for ContactDetailsUpdatedEvent and cannot be null");
            }
            else
            {
                this.ContactInformation = contactInformation;
            }
            
        }
        
        /// <summary>
        /// ASWid of the person
        /// </summary>
        /// <value>ASWid of the person</value>
        [DataMember(Name="personId", EmitDefaultValue=false)]
        public string PersonId { get; set; }

        /// <summary>
        /// Gets or Sets ContactInformation
        /// </summary>
        [DataMember(Name="contactInformation", EmitDefaultValue=false)]
        public Dictionary<string, ContactInformation> ContactInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactDetailsUpdatedEvent {\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactDetailsUpdatedEvent);
        }

        /// <summary>
        /// Returns true if ContactDetailsUpdatedEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactDetailsUpdatedEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactDetailsUpdatedEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != null &&
                    this.PersonId.Equals(input.PersonId))
                ) && 
                (
                    this.ContactInformation == input.ContactInformation ||
                    this.ContactInformation != null &&
                    input.ContactInformation != null &&
                    this.ContactInformation.SequenceEqual(input.ContactInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PersonId != null)
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                if (this.ContactInformation != null)
                    hashCode = hashCode * 59 + this.ContactInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

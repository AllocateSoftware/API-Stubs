/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Posting
    /// </summary>
    [DataContract]
    public partial class Posting :  IEquatable<Posting>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Posting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Posting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Posting" /> class.
        /// </summary>
        /// <param name="unit">unit (required).</param>
        /// <param name="post">post.</param>
        /// <param name="postingType">postingType.</param>
        /// <param name="assignmentNo">assignmentNo (required).</param>
        /// <param name="team">team.</param>
        /// <param name="isPrimary">isPrimary (required).</param>
        public Posting(string unit = default(string), string post = default(string), string postingType = default(string), string assignmentNo = default(string), string team = default(string), bool isPrimary = default(bool))
        {
            // to ensure "unit" is required (not null)
            if (unit == null)
            {
                throw new InvalidDataException("unit is a required property for Posting and cannot be null");
            }
            else
            {
                this.Unit = unit;
            }
            
            // to ensure "assignmentNo" is required (not null)
            if (assignmentNo == null)
            {
                throw new InvalidDataException("assignmentNo is a required property for Posting and cannot be null");
            }
            else
            {
                this.AssignmentNo = assignmentNo;
            }
            
            // to ensure "isPrimary" is required (not null)
            if (isPrimary == null)
            {
                throw new InvalidDataException("isPrimary is a required property for Posting and cannot be null");
            }
            else
            {
                this.IsPrimary = isPrimary;
            }
            
            this.Post = post;
            this.PostingType = postingType;
            this.Team = team;
        }
        
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets Post
        /// </summary>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public string Post { get; set; }

        /// <summary>
        /// Gets or Sets PostingType
        /// </summary>
        [DataMember(Name="postingType", EmitDefaultValue=false)]
        public string PostingType { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentNo
        /// </summary>
        [DataMember(Name="assignmentNo", EmitDefaultValue=false)]
        public string AssignmentNo { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public bool IsPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Posting {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  PostingType: ").Append(PostingType).Append("\n");
            sb.Append("  AssignmentNo: ").Append(AssignmentNo).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Posting);
        }

        /// <summary>
        /// Returns true if Posting instances are equal
        /// </summary>
        /// <param name="input">Instance of Posting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Posting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Post == input.Post ||
                    (this.Post != null &&
                    this.Post.Equals(input.Post))
                ) && 
                (
                    this.PostingType == input.PostingType ||
                    (this.PostingType != null &&
                    this.PostingType.Equals(input.PostingType))
                ) && 
                (
                    this.AssignmentNo == input.AssignmentNo ||
                    (this.AssignmentNo != null &&
                    this.AssignmentNo.Equals(input.AssignmentNo))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Post != null)
                    hashCode = hashCode * 59 + this.Post.GetHashCode();
                if (this.PostingType != null)
                    hashCode = hashCode * 59 + this.PostingType.GetHashCode();
                if (this.AssignmentNo != null)
                    hashCode = hashCode * 59 + this.AssignmentNo.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

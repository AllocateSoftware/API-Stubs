/* 
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// PersonalPatternUnavailability
    /// </summary>
    [DataContract]
    public partial class PersonalPatternUnavailability :  IEquatable<PersonalPatternUnavailability>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalPatternUnavailability" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PersonalPatternUnavailability() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalPatternUnavailability" /> class.
        /// </summary>
        /// <param name="unavailabilityGroup">unavailabilityGroup.</param>
        /// <param name="unavailabilityReason">unavailabilityReason (required).</param>
        /// <param name="work">work.</param>
        /// <param name="start">start (required).</param>
        /// <param name="end">end (required).</param>
        /// <param name="externalUnavailabilityIdentifier">externalUnavailabilityIdentifier (required).</param>
        public PersonalPatternUnavailability(string unavailabilityGroup = default(string), string unavailabilityReason = default(string), string work = default(string), string start = default(string), string end = default(string), string externalUnavailabilityIdentifier = default(string))
        {
            // to ensure "unavailabilityReason" is required (not null)
            if (unavailabilityReason == null)
            {
                throw new InvalidDataException("unavailabilityReason is a required property for PersonalPatternUnavailability and cannot be null");
            }
            else
            {
                this.UnavailabilityReason = unavailabilityReason;
            }
            
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException("start is a required property for PersonalPatternUnavailability and cannot be null");
            }
            else
            {
                this.Start = start;
            }
            
            // to ensure "end" is required (not null)
            if (end == null)
            {
                throw new InvalidDataException("end is a required property for PersonalPatternUnavailability and cannot be null");
            }
            else
            {
                this.End = end;
            }
            
            // to ensure "externalUnavailabilityIdentifier" is required (not null)
            if (externalUnavailabilityIdentifier == null)
            {
                throw new InvalidDataException("externalUnavailabilityIdentifier is a required property for PersonalPatternUnavailability and cannot be null");
            }
            else
            {
                this.ExternalUnavailabilityIdentifier = externalUnavailabilityIdentifier;
            }
            
            this.UnavailabilityGroup = unavailabilityGroup;
            this.Work = work;
        }
        
        /// <summary>
        /// Gets or Sets UnavailabilityGroup
        /// </summary>
        [DataMember(Name="unavailabilityGroup", EmitDefaultValue=false)]
        public string UnavailabilityGroup { get; set; }

        /// <summary>
        /// Gets or Sets UnavailabilityReason
        /// </summary>
        [DataMember(Name="unavailabilityReason", EmitDefaultValue=false)]
        public string UnavailabilityReason { get; set; }

        /// <summary>
        /// Gets or Sets Work
        /// </summary>
        [DataMember(Name="work", EmitDefaultValue=false)]
        public string Work { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }

        /// <summary>
        /// Gets or Sets ExternalUnavailabilityIdentifier
        /// </summary>
        [DataMember(Name="externalUnavailabilityIdentifier", EmitDefaultValue=false)]
        public string ExternalUnavailabilityIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalPatternUnavailability {\n");
            sb.Append("  UnavailabilityGroup: ").Append(UnavailabilityGroup).Append("\n");
            sb.Append("  UnavailabilityReason: ").Append(UnavailabilityReason).Append("\n");
            sb.Append("  Work: ").Append(Work).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ExternalUnavailabilityIdentifier: ").Append(ExternalUnavailabilityIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonalPatternUnavailability);
        }

        /// <summary>
        /// Returns true if PersonalPatternUnavailability instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonalPatternUnavailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalPatternUnavailability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UnavailabilityGroup == input.UnavailabilityGroup ||
                    (this.UnavailabilityGroup != null &&
                    this.UnavailabilityGroup.Equals(input.UnavailabilityGroup))
                ) && 
                (
                    this.UnavailabilityReason == input.UnavailabilityReason ||
                    (this.UnavailabilityReason != null &&
                    this.UnavailabilityReason.Equals(input.UnavailabilityReason))
                ) && 
                (
                    this.Work == input.Work ||
                    (this.Work != null &&
                    this.Work.Equals(input.Work))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.ExternalUnavailabilityIdentifier == input.ExternalUnavailabilityIdentifier ||
                    (this.ExternalUnavailabilityIdentifier != null &&
                    this.ExternalUnavailabilityIdentifier.Equals(input.ExternalUnavailabilityIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UnavailabilityGroup != null)
                    hashCode = hashCode * 59 + this.UnavailabilityGroup.GetHashCode();
                if (this.UnavailabilityReason != null)
                    hashCode = hashCode * 59 + this.UnavailabilityReason.GetHashCode();
                if (this.Work != null)
                    hashCode = hashCode * 59 + this.Work.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.ExternalUnavailabilityIdentifier != null)
                    hashCode = hashCode * 59 + this.ExternalUnavailabilityIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server import util


class ContactLogInformationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, successful: bool=None, notes: str=None):
        """ContactLogInformationDetails - a model defined in OpenAPI

        :param successful: The successful of this ContactLogInformationDetails.
        :param notes: The notes of this ContactLogInformationDetails.
        """
        self.openapi_types = {
            'successful': bool,
            'notes': str
        }

        self.attribute_map = {
            'successful': 'successful',
            'notes': 'notes'
        }

        self._successful = successful
        self._notes = notes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactLogInformationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactLogInformation_details of this ContactLogInformationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def successful(self):
        """Gets the successful of this ContactLogInformationDetails.

        Was this contact successful? (e.g: Call was answered) 

        :return: The successful of this ContactLogInformationDetails.
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this ContactLogInformationDetails.

        Was this contact successful? (e.g: Call was answered) 

        :param successful: The successful of this ContactLogInformationDetails.
        :type successful: bool
        """

        self._successful = successful

    @property
    def notes(self):
        """Gets the notes of this ContactLogInformationDetails.

        Notes on the contact

        :return: The notes of this ContactLogInformationDetails.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ContactLogInformationDetails.

        Notes on the contact

        :param notes: The notes of this ContactLogInformationDetails.
        :type notes: str
        """

        self._notes = notes

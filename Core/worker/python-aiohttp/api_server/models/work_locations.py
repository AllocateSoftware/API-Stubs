# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server import util


class WorkLocations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, home_trust: str=None, working_trusts: List[str]=None):
        """WorkLocations - a model defined in OpenAPI

        :param home_trust: The home_trust of this WorkLocations.
        :param working_trusts: The working_trusts of this WorkLocations.
        """
        self.openapi_types = {
            'home_trust': str,
            'working_trusts': List[str]
        }

        self.attribute_map = {
            'home_trust': 'homeTrust',
            'working_trusts': 'workingTrusts'
        }

        self._home_trust = home_trust
        self._working_trusts = working_trusts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkLocations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkLocations of this WorkLocations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def home_trust(self):
        """Gets the home_trust of this WorkLocations.

        The identifier for the home trust for this worker

        :return: The home_trust of this WorkLocations.
        :rtype: str
        """
        return self._home_trust

    @home_trust.setter
    def home_trust(self, home_trust):
        """Sets the home_trust of this WorkLocations.

        The identifier for the home trust for this worker

        :param home_trust: The home_trust of this WorkLocations.
        :type home_trust: str
        """
        if home_trust is None:
            raise ValueError("Invalid value for `home_trust`, must not be `None`")

        self._home_trust = home_trust

    @property
    def working_trusts(self):
        """Gets the working_trusts of this WorkLocations.

        Identifiers for the trusts that the worker may work in (in addition to their home trust)

        :return: The working_trusts of this WorkLocations.
        :rtype: List[str]
        """
        return self._working_trusts

    @working_trusts.setter
    def working_trusts(self, working_trusts):
        """Sets the working_trusts of this WorkLocations.

        Identifiers for the trusts that the worker may work in (in addition to their home trust)

        :param working_trusts: The working_trusts of this WorkLocations.
        :type working_trusts: List[str]
        """

        self._working_trusts = working_trusts

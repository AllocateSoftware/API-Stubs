/*
 * Workers
 *
 * ## Workers and events 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A AnnualLeaveClaimsApiController binds http requests to an api service and writes the service results to the http response
type AnnualLeaveClaimsApiController struct {
	service AnnualLeaveClaimsApiServicer
}

// NewAnnualLeaveClaimsApiController creates a default api controller
func NewAnnualLeaveClaimsApiController(s AnnualLeaveClaimsApiServicer) Router {
	return &AnnualLeaveClaimsApiController{ service: s }
}

// Routes returns all of the api route for the AnnualLeaveClaimsApiController
func (c *AnnualLeaveClaimsApiController) Routes() Routes {
	return Routes{ 
		{
			"SubmitAnnualLeaveClaim",
			strings.ToUpper("Post"),
			"/api/worker/v1/worker/{id}/leave",
			c.SubmitAnnualLeaveClaim,
		},
	}
}

// SubmitAnnualLeaveClaim - 
func (c *AnnualLeaveClaimsApiController) SubmitAnnualLeaveClaim(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	leaveClaim := &LeaveClaim{}
	if err := json.NewDecoder(r.Body).Decode(&leaveClaim); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.SubmitAnnualLeaveClaim(id, *leaveClaim)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

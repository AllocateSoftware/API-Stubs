/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ContactLogInformation : IEquatable<ContactLogInformation>
    { 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TelephoneEnum for telephone
            /// </summary>
            [EnumMember(Value = "telephone")]
            TelephoneEnum = 1,
            
            /// <summary>
            /// Enum EmailEnum for email
            /// </summary>
            [EnumMember(Value = "email")]
            EmailEnum = 2,
            
            /// <summary>
            /// Enum IMEnum for IM
            /// </summary>
            [EnumMember(Value = "IM")]
            IMEnum = 3,
            
            /// <summary>
            /// Enum FaceToFaceEnum for faceToFace
            /// </summary>
            [EnumMember(Value = "faceToFace")]
            FaceToFaceEnum = 4
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets When
        /// </summary>
        [DataMember(Name="when", EmitDefaultValue=false)]
        public DateTime When { get; set; }

        /// <summary>
        /// Gets or Sets Who
        /// </summary>
        [DataMember(Name="who", EmitDefaultValue=false)]
        public Dictionary<string, Identifier> Who { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public ContactLogInformationDetails Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactLogInformation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Who: ").Append(Who).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactLogInformation)obj);
        }

        /// <summary>
        /// Returns true if ContactLogInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactLogInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactLogInformation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    When == other.When ||
                    When != null &&
                    When.Equals(other.When)
                ) && 
                (
                    Who == other.Who ||
                    Who != null &&
                    other.Who != null &&
                    Who.SequenceEqual(other.Who)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.Equals(other.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (When != null)
                    hashCode = hashCode * 59 + When.GetHashCode();
                    if (Who != null)
                    hashCode = hashCode * 59 + Who.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactLogInformation left, ContactLogInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactLogInformation left, ContactLogInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkingRestrictionHoursOfWork : IEquatable<WorkingRestrictionHoursOfWork>
    { 
        /// <summary>
        /// Gets or Sets Mon
        /// </summary>
        [DataMember(Name="mon", EmitDefaultValue=false)]
        public TimeSpan Mon { get; set; }

        /// <summary>
        /// Gets or Sets Tue
        /// </summary>
        [DataMember(Name="tue", EmitDefaultValue=false)]
        public TimeSpan Tue { get; set; }

        /// <summary>
        /// Gets or Sets Wed
        /// </summary>
        [DataMember(Name="wed", EmitDefaultValue=false)]
        public TimeSpan Wed { get; set; }

        /// <summary>
        /// Gets or Sets Thu
        /// </summary>
        [DataMember(Name="thu", EmitDefaultValue=false)]
        public TimeSpan Thu { get; set; }

        /// <summary>
        /// Gets or Sets Fri
        /// </summary>
        [DataMember(Name="fri", EmitDefaultValue=false)]
        public TimeSpan Fri { get; set; }

        /// <summary>
        /// Gets or Sets Sat
        /// </summary>
        [DataMember(Name="sat", EmitDefaultValue=false)]
        public TimeSpan Sat { get; set; }

        /// <summary>
        /// Gets or Sets Sun
        /// </summary>
        [DataMember(Name="sun", EmitDefaultValue=false)]
        public TimeSpan Sun { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkingRestrictionHoursOfWork {\n");
            sb.Append("  Mon: ").Append(Mon).Append("\n");
            sb.Append("  Tue: ").Append(Tue).Append("\n");
            sb.Append("  Wed: ").Append(Wed).Append("\n");
            sb.Append("  Thu: ").Append(Thu).Append("\n");
            sb.Append("  Fri: ").Append(Fri).Append("\n");
            sb.Append("  Sat: ").Append(Sat).Append("\n");
            sb.Append("  Sun: ").Append(Sun).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkingRestrictionHoursOfWork)obj);
        }

        /// <summary>
        /// Returns true if WorkingRestrictionHoursOfWork instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkingRestrictionHoursOfWork to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkingRestrictionHoursOfWork other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Mon == other.Mon ||
                    Mon != null &&
                    Mon.Equals(other.Mon)
                ) && 
                (
                    Tue == other.Tue ||
                    Tue != null &&
                    Tue.Equals(other.Tue)
                ) && 
                (
                    Wed == other.Wed ||
                    Wed != null &&
                    Wed.Equals(other.Wed)
                ) && 
                (
                    Thu == other.Thu ||
                    Thu != null &&
                    Thu.Equals(other.Thu)
                ) && 
                (
                    Fri == other.Fri ||
                    Fri != null &&
                    Fri.Equals(other.Fri)
                ) && 
                (
                    Sat == other.Sat ||
                    Sat != null &&
                    Sat.Equals(other.Sat)
                ) && 
                (
                    Sun == other.Sun ||
                    Sun != null &&
                    Sun.Equals(other.Sun)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Mon != null)
                    hashCode = hashCode * 59 + Mon.GetHashCode();
                    if (Tue != null)
                    hashCode = hashCode * 59 + Tue.GetHashCode();
                    if (Wed != null)
                    hashCode = hashCode * 59 + Wed.GetHashCode();
                    if (Thu != null)
                    hashCode = hashCode * 59 + Thu.GetHashCode();
                    if (Fri != null)
                    hashCode = hashCode * 59 + Fri.GetHashCode();
                    if (Sat != null)
                    hashCode = hashCode * 59 + Sat.GetHashCode();
                    if (Sun != null)
                    hashCode = hashCode * 59 + Sun.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkingRestrictionHoursOfWork left, WorkingRestrictionHoursOfWork right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkingRestrictionHoursOfWork left, WorkingRestrictionHoursOfWork right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

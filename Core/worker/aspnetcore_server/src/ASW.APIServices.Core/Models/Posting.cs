/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Posting : IEquatable<Posting>
    { 
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [Required]
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets Post
        /// </summary>
        [DataMember(Name="post", EmitDefaultValue=false)]
        public string Post { get; set; }

        /// <summary>
        /// Gets or Sets PostingType
        /// </summary>
        [DataMember(Name="postingType", EmitDefaultValue=false)]
        public string PostingType { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentNo
        /// </summary>
        [Required]
        [DataMember(Name="assignmentNo", EmitDefaultValue=false)]
        public string AssignmentNo { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [Required]
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public bool IsPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Posting {\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Post: ").Append(Post).Append("\n");
            sb.Append("  PostingType: ").Append(PostingType).Append("\n");
            sb.Append("  AssignmentNo: ").Append(AssignmentNo).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Posting)obj);
        }

        /// <summary>
        /// Returns true if Posting instances are equal
        /// </summary>
        /// <param name="other">Instance of Posting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Posting other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) && 
                (
                    Post == other.Post ||
                    Post != null &&
                    Post.Equals(other.Post)
                ) && 
                (
                    PostingType == other.PostingType ||
                    PostingType != null &&
                    PostingType.Equals(other.PostingType)
                ) && 
                (
                    AssignmentNo == other.AssignmentNo ||
                    AssignmentNo != null &&
                    AssignmentNo.Equals(other.AssignmentNo)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    IsPrimary == other.IsPrimary ||
                    
                    IsPrimary.Equals(other.IsPrimary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (Post != null)
                    hashCode = hashCode * 59 + Post.GetHashCode();
                    if (PostingType != null)
                    hashCode = hashCode * 59 + PostingType.GetHashCode();
                    if (AssignmentNo != null)
                    hashCode = hashCode * 59 + AssignmentNo.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPrimary.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Posting left, Posting right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Posting left, Posting right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

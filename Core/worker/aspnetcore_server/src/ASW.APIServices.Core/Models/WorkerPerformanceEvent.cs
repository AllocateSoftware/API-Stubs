/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkerPerformanceEvent : IEquatable<WorkerPerformanceEvent>
    { 
        /// <summary>
        /// Gets or Sets Worker
        /// </summary>
        [DataMember(Name="worker", EmitDefaultValue=false)]
        public WorkerPerformanceEventWorker Worker { get; set; }

        /// <summary>
        /// Gets or Sets DutyDetails
        /// </summary>
        [DataMember(Name="dutyDetails", EmitDefaultValue=false)]
        public WorkerPerformanceEventDutyDetails DutyDetails { get; set; }

        /// <summary>
        /// Gets or Sets Evaluation
        /// </summary>
        [DataMember(Name="evaluation", EmitDefaultValue=false)]
        public WorkerPerformanceEventEvaluation Evaluation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerPerformanceEvent {\n");
            sb.Append("  Worker: ").Append(Worker).Append("\n");
            sb.Append("  DutyDetails: ").Append(DutyDetails).Append("\n");
            sb.Append("  Evaluation: ").Append(Evaluation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkerPerformanceEvent)obj);
        }

        /// <summary>
        /// Returns true if WorkerPerformanceEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkerPerformanceEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerPerformanceEvent other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Worker == other.Worker ||
                    Worker != null &&
                    Worker.Equals(other.Worker)
                ) && 
                (
                    DutyDetails == other.DutyDetails ||
                    DutyDetails != null &&
                    DutyDetails.Equals(other.DutyDetails)
                ) && 
                (
                    Evaluation == other.Evaluation ||
                    Evaluation != null &&
                    Evaluation.Equals(other.Evaluation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Worker != null)
                    hashCode = hashCode * 59 + Worker.GetHashCode();
                    if (DutyDetails != null)
                    hashCode = hashCode * 59 + DutyDetails.GetHashCode();
                    if (Evaluation != null)
                    hashCode = hashCode * 59 + Evaluation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkerPerformanceEvent left, WorkerPerformanceEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkerPerformanceEvent left, WorkerPerformanceEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

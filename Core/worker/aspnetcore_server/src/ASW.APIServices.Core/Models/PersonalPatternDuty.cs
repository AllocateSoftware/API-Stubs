/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonalPatternDuty : IEquatable<PersonalPatternDuty>
    { 
        /// <summary>
        /// Gets or Sets ShiftGroup
        /// </summary>
        [DataMember(Name="shiftGroup", EmitDefaultValue=false)]
        public string ShiftGroup { get; set; }

        /// <summary>
        /// Gets or Sets Shift
        /// </summary>
        [DataMember(Name="shift", EmitDefaultValue=false)]
        public string Shift { get; set; }

        /// <summary>
        /// Gets or Sets RosterLocation
        /// </summary>
        [DataMember(Name="rosterLocation", EmitDefaultValue=false)]
        public string RosterLocation { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Gets or Sets ActivityCategory
        /// </summary>
        [DataMember(Name="activityCategory", EmitDefaultValue=false)]
        public string ActivityCategory { get; set; }

        /// <summary>
        /// Gets or Sets ActivityBenchmark
        /// </summary>
        [DataMember(Name="activityBenchmark", EmitDefaultValue=false)]
        public string ActivityBenchmark { get; set; }

        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>
        [DataMember(Name="activityType", EmitDefaultValue=false)]
        public string ActivityType { get; set; }

        /// <summary>
        /// Gets or Sets ActivityProfile
        /// </summary>
        [DataMember(Name="activityProfile", EmitDefaultValue=false)]
        public string ActivityProfile { get; set; }

        /// <summary>
        /// Gets or Sets Work
        /// </summary>
        [DataMember(Name="work", EmitDefaultValue=false)]
        public string Work { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyReccurrance
        /// </summary>
        [DataMember(Name="monthlyReccurrance", EmitDefaultValue=false)]
        public bool MonthlyReccurrance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalPatternDuty {\n");
            sb.Append("  ShiftGroup: ").Append(ShiftGroup).Append("\n");
            sb.Append("  Shift: ").Append(Shift).Append("\n");
            sb.Append("  RosterLocation: ").Append(RosterLocation).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  ActivityCategory: ").Append(ActivityCategory).Append("\n");
            sb.Append("  ActivityBenchmark: ").Append(ActivityBenchmark).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  ActivityProfile: ").Append(ActivityProfile).Append("\n");
            sb.Append("  Work: ").Append(Work).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  MonthlyReccurrance: ").Append(MonthlyReccurrance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalPatternDuty)obj);
        }

        /// <summary>
        /// Returns true if PersonalPatternDuty instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalPatternDuty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalPatternDuty other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ShiftGroup == other.ShiftGroup ||
                    ShiftGroup != null &&
                    ShiftGroup.Equals(other.ShiftGroup)
                ) && 
                (
                    Shift == other.Shift ||
                    Shift != null &&
                    Shift.Equals(other.Shift)
                ) && 
                (
                    RosterLocation == other.RosterLocation ||
                    RosterLocation != null &&
                    RosterLocation.Equals(other.RosterLocation)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    ActivityCategory == other.ActivityCategory ||
                    ActivityCategory != null &&
                    ActivityCategory.Equals(other.ActivityCategory)
                ) && 
                (
                    ActivityBenchmark == other.ActivityBenchmark ||
                    ActivityBenchmark != null &&
                    ActivityBenchmark.Equals(other.ActivityBenchmark)
                ) && 
                (
                    ActivityType == other.ActivityType ||
                    ActivityType != null &&
                    ActivityType.Equals(other.ActivityType)
                ) && 
                (
                    ActivityProfile == other.ActivityProfile ||
                    ActivityProfile != null &&
                    ActivityProfile.Equals(other.ActivityProfile)
                ) && 
                (
                    Work == other.Work ||
                    Work != null &&
                    Work.Equals(other.Work)
                ) && 
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                ) && 
                (
                    MonthlyReccurrance == other.MonthlyReccurrance ||
                    
                    MonthlyReccurrance.Equals(other.MonthlyReccurrance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ShiftGroup != null)
                    hashCode = hashCode * 59 + ShiftGroup.GetHashCode();
                    if (Shift != null)
                    hashCode = hashCode * 59 + Shift.GetHashCode();
                    if (RosterLocation != null)
                    hashCode = hashCode * 59 + RosterLocation.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    if (ActivityCategory != null)
                    hashCode = hashCode * 59 + ActivityCategory.GetHashCode();
                    if (ActivityBenchmark != null)
                    hashCode = hashCode * 59 + ActivityBenchmark.GetHashCode();
                    if (ActivityType != null)
                    hashCode = hashCode * 59 + ActivityType.GetHashCode();
                    if (ActivityProfile != null)
                    hashCode = hashCode * 59 + ActivityProfile.GetHashCode();
                    if (Work != null)
                    hashCode = hashCode * 59 + Work.GetHashCode();
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                    
                    hashCode = hashCode * 59 + MonthlyReccurrance.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalPatternDuty left, PersonalPatternDuty right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalPatternDuty left, PersonalPatternDuty right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

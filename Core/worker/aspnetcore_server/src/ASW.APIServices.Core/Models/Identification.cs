/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Identification : IEquatable<Identification>
    { 
        /// <summary>
        /// Unique and unchanging staff number to use as the constant reference for a Person
        /// </summary>
        /// <value>Unique and unchanging staff number to use as the constant reference for a Person</value>
        [Required]
        [DataMember(Name="staffNumber", EmitDefaultValue=false)]
        public string StaffNumber { get; set; }

        /// <summary>
        /// This value is subject to mapping in the Gateway. If unavailable, provide a constant value e.g. UNKNOWN, which can be mapped to an empty value in HealthRoster Optima
        /// </summary>
        /// <value>This value is subject to mapping in the Gateway. If unavailable, provide a constant value e.g. UNKNOWN, which can be mapped to an empty value in HealthRoster Optima</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Forenames
        /// </summary>
        [Required]
        [DataMember(Name="forenames", EmitDefaultValue=false)]
        public string Forenames { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [Required]
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets MiddleInitials
        /// </summary>
        [DataMember(Name="middleInitials", EmitDefaultValue=false)]
        public string MiddleInitials { get; set; }

        /// <summary>
        /// Gets or Sets KnownAs
        /// </summary>
        [DataMember(Name="knownAs", EmitDefaultValue=false)]
        public string KnownAs { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<GenderEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum MaleEnum for male
            /// </summary>
            [EnumMember(Value = "male")]
            MaleEnum = 1,
            
            /// <summary>
            /// Enum FemaleEnum for female
            /// </summary>
            [EnumMember(Value = "female")]
            FemaleEnum = 2,
            
            /// <summary>
            /// Enum OtherEnum for other
            /// </summary>
            [EnumMember(Value = "other")]
            OtherEnum = 3
        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum Gender { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [Required]
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// National Insurance \\ Social Security Number.
        /// </summary>
        /// <value>National Insurance \\ Social Security Number.</value>
        [DataMember(Name="ssn", EmitDefaultValue=false)]
        public string Ssn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Identification {\n");
            sb.Append("  StaffNumber: ").Append(StaffNumber).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Forenames: ").Append(Forenames).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  MiddleInitials: ").Append(MiddleInitials).Append("\n");
            sb.Append("  KnownAs: ").Append(KnownAs).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Ssn: ").Append(Ssn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Identification)obj);
        }

        /// <summary>
        /// Returns true if Identification instances are equal
        /// </summary>
        /// <param name="other">Instance of Identification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identification other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StaffNumber == other.StaffNumber ||
                    StaffNumber != null &&
                    StaffNumber.Equals(other.StaffNumber)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Forenames == other.Forenames ||
                    Forenames != null &&
                    Forenames.Equals(other.Forenames)
                ) && 
                (
                    Surname == other.Surname ||
                    Surname != null &&
                    Surname.Equals(other.Surname)
                ) && 
                (
                    MiddleInitials == other.MiddleInitials ||
                    MiddleInitials != null &&
                    MiddleInitials.Equals(other.MiddleInitials)
                ) && 
                (
                    KnownAs == other.KnownAs ||
                    KnownAs != null &&
                    KnownAs.Equals(other.KnownAs)
                ) && 
                (
                    Gender == other.Gender ||
                    
                    Gender.Equals(other.Gender)
                ) && 
                (
                    DateOfBirth == other.DateOfBirth ||
                    DateOfBirth != null &&
                    DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    Ssn == other.Ssn ||
                    Ssn != null &&
                    Ssn.Equals(other.Ssn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StaffNumber != null)
                    hashCode = hashCode * 59 + StaffNumber.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Forenames != null)
                    hashCode = hashCode * 59 + Forenames.GetHashCode();
                    if (Surname != null)
                    hashCode = hashCode * 59 + Surname.GetHashCode();
                    if (MiddleInitials != null)
                    hashCode = hashCode * 59 + MiddleInitials.GetHashCode();
                    if (KnownAs != null)
                    hashCode = hashCode * 59 + KnownAs.GetHashCode();
                    
                    hashCode = hashCode * 59 + Gender.GetHashCode();
                    if (DateOfBirth != null)
                    hashCode = hashCode * 59 + DateOfBirth.GetHashCode();
                    if (Ssn != null)
                    hashCode = hashCode * 59 + Ssn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Identification left, Identification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Identification left, Identification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

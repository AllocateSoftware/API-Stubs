# coding: utf-8

"""
    Workers

    ## Workers and events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class PersonalPatternDuty(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'shift_group': 'str',
        'shift': 'str',
        'roster_location': 'str',
        'team': 'str',
        'activity_category': 'str',
        'activity_benchmark': 'str',
        'activity_type': 'str',
        'activity_profile': 'str',
        'work': 'str',
        'start': 'str',
        'end': 'str',
        'monthly_reccurrance': 'bool'
    }

    attribute_map = {
        'shift_group': 'shiftGroup',
        'shift': 'shift',
        'roster_location': 'rosterLocation',
        'team': 'team',
        'activity_category': 'activityCategory',
        'activity_benchmark': 'activityBenchmark',
        'activity_type': 'activityType',
        'activity_profile': 'activityProfile',
        'work': 'work',
        'start': 'start',
        'end': 'end',
        'monthly_reccurrance': 'monthlyReccurrance'
    }

    def __init__(self, shift_group=None, shift=None, roster_location=None, team=None, activity_category=None, activity_benchmark=None, activity_type=None, activity_profile=None, work=None, start=None, end=None, monthly_reccurrance=None, local_vars_configuration=None):  # noqa: E501
        """PersonalPatternDuty - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._shift_group = None
        self._shift = None
        self._roster_location = None
        self._team = None
        self._activity_category = None
        self._activity_benchmark = None
        self._activity_type = None
        self._activity_profile = None
        self._work = None
        self._start = None
        self._end = None
        self._monthly_reccurrance = None
        self.discriminator = None

        if shift_group is not None:
            self.shift_group = shift_group
        if shift is not None:
            self.shift = shift
        if roster_location is not None:
            self.roster_location = roster_location
        if team is not None:
            self.team = team
        if activity_category is not None:
            self.activity_category = activity_category
        if activity_benchmark is not None:
            self.activity_benchmark = activity_benchmark
        if activity_type is not None:
            self.activity_type = activity_type
        if activity_profile is not None:
            self.activity_profile = activity_profile
        if work is not None:
            self.work = work
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if monthly_reccurrance is not None:
            self.monthly_reccurrance = monthly_reccurrance

    @property
    def shift_group(self):
        """Gets the shift_group of this PersonalPatternDuty.  # noqa: E501


        :return: The shift_group of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._shift_group

    @shift_group.setter
    def shift_group(self, shift_group):
        """Sets the shift_group of this PersonalPatternDuty.


        :param shift_group: The shift_group of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._shift_group = shift_group

    @property
    def shift(self):
        """Gets the shift of this PersonalPatternDuty.  # noqa: E501


        :return: The shift of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._shift

    @shift.setter
    def shift(self, shift):
        """Sets the shift of this PersonalPatternDuty.


        :param shift: The shift of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._shift = shift

    @property
    def roster_location(self):
        """Gets the roster_location of this PersonalPatternDuty.  # noqa: E501


        :return: The roster_location of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._roster_location

    @roster_location.setter
    def roster_location(self, roster_location):
        """Sets the roster_location of this PersonalPatternDuty.


        :param roster_location: The roster_location of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._roster_location = roster_location

    @property
    def team(self):
        """Gets the team of this PersonalPatternDuty.  # noqa: E501


        :return: The team of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this PersonalPatternDuty.


        :param team: The team of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._team = team

    @property
    def activity_category(self):
        """Gets the activity_category of this PersonalPatternDuty.  # noqa: E501


        :return: The activity_category of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._activity_category

    @activity_category.setter
    def activity_category(self, activity_category):
        """Sets the activity_category of this PersonalPatternDuty.


        :param activity_category: The activity_category of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._activity_category = activity_category

    @property
    def activity_benchmark(self):
        """Gets the activity_benchmark of this PersonalPatternDuty.  # noqa: E501


        :return: The activity_benchmark of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._activity_benchmark

    @activity_benchmark.setter
    def activity_benchmark(self, activity_benchmark):
        """Sets the activity_benchmark of this PersonalPatternDuty.


        :param activity_benchmark: The activity_benchmark of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._activity_benchmark = activity_benchmark

    @property
    def activity_type(self):
        """Gets the activity_type of this PersonalPatternDuty.  # noqa: E501


        :return: The activity_type of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this PersonalPatternDuty.


        :param activity_type: The activity_type of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._activity_type = activity_type

    @property
    def activity_profile(self):
        """Gets the activity_profile of this PersonalPatternDuty.  # noqa: E501


        :return: The activity_profile of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._activity_profile

    @activity_profile.setter
    def activity_profile(self, activity_profile):
        """Sets the activity_profile of this PersonalPatternDuty.


        :param activity_profile: The activity_profile of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._activity_profile = activity_profile

    @property
    def work(self):
        """Gets the work of this PersonalPatternDuty.  # noqa: E501


        :return: The work of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._work

    @work.setter
    def work(self, work):
        """Sets the work of this PersonalPatternDuty.


        :param work: The work of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._work = work

    @property
    def start(self):
        """Gets the start of this PersonalPatternDuty.  # noqa: E501


        :return: The start of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PersonalPatternDuty.


        :param start: The start of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this PersonalPatternDuty.  # noqa: E501


        :return: The end of this PersonalPatternDuty.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PersonalPatternDuty.


        :param end: The end of this PersonalPatternDuty.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def monthly_reccurrance(self):
        """Gets the monthly_reccurrance of this PersonalPatternDuty.  # noqa: E501


        :return: The monthly_reccurrance of this PersonalPatternDuty.  # noqa: E501
        :rtype: bool
        """
        return self._monthly_reccurrance

    @monthly_reccurrance.setter
    def monthly_reccurrance(self, monthly_reccurrance):
        """Sets the monthly_reccurrance of this PersonalPatternDuty.


        :param monthly_reccurrance: The monthly_reccurrance of this PersonalPatternDuty.  # noqa: E501
        :type: bool
        """

        self._monthly_reccurrance = monthly_reccurrance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalPatternDuty):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersonalPatternDuty):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Workers

    ## Workers and events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class Visa(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'number': 'str',
        'country': 'str',
        'issuing_office': 'str',
        'type': 'str',
        'entries': 'str',
        'validity': 'DateSpan'
    }

    attribute_map = {
        'number': 'number',
        'country': 'country',
        'issuing_office': 'issuingOffice',
        'type': 'type',
        'entries': 'entries',
        'validity': 'validity'
    }

    def __init__(self, number=None, country=None, issuing_office=None, type=None, entries=None, validity=None, local_vars_configuration=None):  # noqa: E501
        """Visa - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._number = None
        self._country = None
        self._issuing_office = None
        self._type = None
        self._entries = None
        self._validity = None
        self.discriminator = None

        if number is not None:
            self.number = number
        if country is not None:
            self.country = country
        if issuing_office is not None:
            self.issuing_office = issuing_office
        if type is not None:
            self.type = type
        if entries is not None:
            self.entries = entries
        self.validity = validity

    @property
    def number(self):
        """Gets the number of this Visa.  # noqa: E501


        :return: The number of this Visa.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Visa.


        :param number: The number of this Visa.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def country(self):
        """Gets the country of this Visa.  # noqa: E501


        :return: The country of this Visa.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Visa.


        :param country: The country of this Visa.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def issuing_office(self):
        """Gets the issuing_office of this Visa.  # noqa: E501


        :return: The issuing_office of this Visa.  # noqa: E501
        :rtype: str
        """
        return self._issuing_office

    @issuing_office.setter
    def issuing_office(self, issuing_office):
        """Sets the issuing_office of this Visa.


        :param issuing_office: The issuing_office of this Visa.  # noqa: E501
        :type: str
        """

        self._issuing_office = issuing_office

    @property
    def type(self):
        """Gets the type of this Visa.  # noqa: E501


        :return: The type of this Visa.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Visa.


        :param type: The type of this Visa.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def entries(self):
        """Gets the entries of this Visa.  # noqa: E501


        :return: The entries of this Visa.  # noqa: E501
        :rtype: str
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this Visa.


        :param entries: The entries of this Visa.  # noqa: E501
        :type: str
        """

        self._entries = entries

    @property
    def validity(self):
        """Gets the validity of this Visa.  # noqa: E501


        :return: The validity of this Visa.  # noqa: E501
        :rtype: DateSpan
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this Visa.


        :param validity: The validity of this Visa.  # noqa: E501
        :type: DateSpan
        """
        if self.local_vars_configuration.client_side_validation and validity is None:  # noqa: E501
            raise ValueError("Invalid value for `validity`, must not be `None`")  # noqa: E501

        self._validity = validity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Visa):
            return True

        return self.to_dict() != other.to_dict()

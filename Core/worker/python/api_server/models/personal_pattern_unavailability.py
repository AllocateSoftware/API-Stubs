# coding: utf-8

"""
    Workers

    ## Workers and events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class PersonalPatternUnavailability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'unavailability_group': 'str',
        'unavailability_reason': 'str',
        'work': 'str',
        'start': 'str',
        'end': 'str',
        'external_unavailability_identifier': 'str'
    }

    attribute_map = {
        'unavailability_group': 'unavailabilityGroup',
        'unavailability_reason': 'unavailabilityReason',
        'work': 'work',
        'start': 'start',
        'end': 'end',
        'external_unavailability_identifier': 'externalUnavailabilityIdentifier'
    }

    def __init__(self, unavailability_group=None, unavailability_reason=None, work=None, start=None, end=None, external_unavailability_identifier=None, local_vars_configuration=None):  # noqa: E501
        """PersonalPatternUnavailability - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._unavailability_group = None
        self._unavailability_reason = None
        self._work = None
        self._start = None
        self._end = None
        self._external_unavailability_identifier = None
        self.discriminator = None

        if unavailability_group is not None:
            self.unavailability_group = unavailability_group
        self.unavailability_reason = unavailability_reason
        if work is not None:
            self.work = work
        self.start = start
        self.end = end
        self.external_unavailability_identifier = external_unavailability_identifier

    @property
    def unavailability_group(self):
        """Gets the unavailability_group of this PersonalPatternUnavailability.  # noqa: E501


        :return: The unavailability_group of this PersonalPatternUnavailability.  # noqa: E501
        :rtype: str
        """
        return self._unavailability_group

    @unavailability_group.setter
    def unavailability_group(self, unavailability_group):
        """Sets the unavailability_group of this PersonalPatternUnavailability.


        :param unavailability_group: The unavailability_group of this PersonalPatternUnavailability.  # noqa: E501
        :type: str
        """

        self._unavailability_group = unavailability_group

    @property
    def unavailability_reason(self):
        """Gets the unavailability_reason of this PersonalPatternUnavailability.  # noqa: E501


        :return: The unavailability_reason of this PersonalPatternUnavailability.  # noqa: E501
        :rtype: str
        """
        return self._unavailability_reason

    @unavailability_reason.setter
    def unavailability_reason(self, unavailability_reason):
        """Sets the unavailability_reason of this PersonalPatternUnavailability.


        :param unavailability_reason: The unavailability_reason of this PersonalPatternUnavailability.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and unavailability_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `unavailability_reason`, must not be `None`")  # noqa: E501

        self._unavailability_reason = unavailability_reason

    @property
    def work(self):
        """Gets the work of this PersonalPatternUnavailability.  # noqa: E501


        :return: The work of this PersonalPatternUnavailability.  # noqa: E501
        :rtype: str
        """
        return self._work

    @work.setter
    def work(self, work):
        """Sets the work of this PersonalPatternUnavailability.


        :param work: The work of this PersonalPatternUnavailability.  # noqa: E501
        :type: str
        """

        self._work = work

    @property
    def start(self):
        """Gets the start of this PersonalPatternUnavailability.  # noqa: E501


        :return: The start of this PersonalPatternUnavailability.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PersonalPatternUnavailability.


        :param start: The start of this PersonalPatternUnavailability.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and start is None:  # noqa: E501
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this PersonalPatternUnavailability.  # noqa: E501


        :return: The end of this PersonalPatternUnavailability.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PersonalPatternUnavailability.


        :param end: The end of this PersonalPatternUnavailability.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and end is None:  # noqa: E501
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def external_unavailability_identifier(self):
        """Gets the external_unavailability_identifier of this PersonalPatternUnavailability.  # noqa: E501


        :return: The external_unavailability_identifier of this PersonalPatternUnavailability.  # noqa: E501
        :rtype: str
        """
        return self._external_unavailability_identifier

    @external_unavailability_identifier.setter
    def external_unavailability_identifier(self, external_unavailability_identifier):
        """Sets the external_unavailability_identifier of this PersonalPatternUnavailability.


        :param external_unavailability_identifier: The external_unavailability_identifier of this PersonalPatternUnavailability.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and external_unavailability_identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `external_unavailability_identifier`, must not be `None`")  # noqa: E501

        self._external_unavailability_identifier = external_unavailability_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalPatternUnavailability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersonalPatternUnavailability):
            return True

        return self.to_dict() != other.to_dict()

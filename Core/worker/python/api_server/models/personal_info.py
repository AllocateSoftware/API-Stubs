# coding: utf-8

"""
    Workers

    ## Workers and events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class PersonalInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'maiden_name': 'str',
        'marital_status': 'str',
        'additional_id': 'str',
        'place_of_birth': 'str',
        'nationality': 'str',
        'ethnic_origin': 'str',
        'visa_required': 'str',
        'disabled_no': 'str',
        'disability': 'str'
    }

    attribute_map = {
        'maiden_name': 'maidenName',
        'marital_status': 'maritalStatus',
        'additional_id': 'additionalID',
        'place_of_birth': 'placeOfBirth',
        'nationality': 'nationality',
        'ethnic_origin': 'ethnicOrigin',
        'visa_required': 'visaRequired',
        'disabled_no': 'disabledNo',
        'disability': 'disability'
    }

    def __init__(self, maiden_name=None, marital_status=None, additional_id=None, place_of_birth=None, nationality=None, ethnic_origin=None, visa_required=None, disabled_no=None, disability=None, local_vars_configuration=None):  # noqa: E501
        """PersonalInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._maiden_name = None
        self._marital_status = None
        self._additional_id = None
        self._place_of_birth = None
        self._nationality = None
        self._ethnic_origin = None
        self._visa_required = None
        self._disabled_no = None
        self._disability = None
        self.discriminator = None

        if maiden_name is not None:
            self.maiden_name = maiden_name
        if marital_status is not None:
            self.marital_status = marital_status
        if additional_id is not None:
            self.additional_id = additional_id
        if place_of_birth is not None:
            self.place_of_birth = place_of_birth
        if nationality is not None:
            self.nationality = nationality
        if ethnic_origin is not None:
            self.ethnic_origin = ethnic_origin
        if visa_required is not None:
            self.visa_required = visa_required
        if disabled_no is not None:
            self.disabled_no = disabled_no
        if disability is not None:
            self.disability = disability

    @property
    def maiden_name(self):
        """Gets the maiden_name of this PersonalInfo.  # noqa: E501


        :return: The maiden_name of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._maiden_name

    @maiden_name.setter
    def maiden_name(self, maiden_name):
        """Sets the maiden_name of this PersonalInfo.


        :param maiden_name: The maiden_name of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._maiden_name = maiden_name

    @property
    def marital_status(self):
        """Gets the marital_status of this PersonalInfo.  # noqa: E501


        :return: The marital_status of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this PersonalInfo.


        :param marital_status: The marital_status of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    @property
    def additional_id(self):
        """Gets the additional_id of this PersonalInfo.  # noqa: E501


        :return: The additional_id of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._additional_id

    @additional_id.setter
    def additional_id(self, additional_id):
        """Sets the additional_id of this PersonalInfo.


        :param additional_id: The additional_id of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._additional_id = additional_id

    @property
    def place_of_birth(self):
        """Gets the place_of_birth of this PersonalInfo.  # noqa: E501


        :return: The place_of_birth of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._place_of_birth

    @place_of_birth.setter
    def place_of_birth(self, place_of_birth):
        """Sets the place_of_birth of this PersonalInfo.


        :param place_of_birth: The place_of_birth of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._place_of_birth = place_of_birth

    @property
    def nationality(self):
        """Gets the nationality of this PersonalInfo.  # noqa: E501


        :return: The nationality of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this PersonalInfo.


        :param nationality: The nationality of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def ethnic_origin(self):
        """Gets the ethnic_origin of this PersonalInfo.  # noqa: E501


        :return: The ethnic_origin of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._ethnic_origin

    @ethnic_origin.setter
    def ethnic_origin(self, ethnic_origin):
        """Sets the ethnic_origin of this PersonalInfo.


        :param ethnic_origin: The ethnic_origin of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._ethnic_origin = ethnic_origin

    @property
    def visa_required(self):
        """Gets the visa_required of this PersonalInfo.  # noqa: E501


        :return: The visa_required of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._visa_required

    @visa_required.setter
    def visa_required(self, visa_required):
        """Sets the visa_required of this PersonalInfo.


        :param visa_required: The visa_required of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._visa_required = visa_required

    @property
    def disabled_no(self):
        """Gets the disabled_no of this PersonalInfo.  # noqa: E501


        :return: The disabled_no of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._disabled_no

    @disabled_no.setter
    def disabled_no(self, disabled_no):
        """Sets the disabled_no of this PersonalInfo.


        :param disabled_no: The disabled_no of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._disabled_no = disabled_no

    @property
    def disability(self):
        """Gets the disability of this PersonalInfo.  # noqa: E501


        :return: The disability of this PersonalInfo.  # noqa: E501
        :rtype: str
        """
        return self._disability

    @disability.setter
    def disability(self, disability):
        """Sets the disability of this PersonalInfo.


        :param disability: The disability of this PersonalInfo.  # noqa: E501
        :type: str
        """

        self._disability = disability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersonalInfo):
            return True

        return self.to_dict() != other.to_dict()

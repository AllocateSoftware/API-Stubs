# coding: utf-8

"""
    Workers

    ## Workers and events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class WorkerPerformanceEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'worker': 'WorkerPerformanceEventWorker',
        'duty_details': 'WorkerPerformanceEventDutyDetails',
        'evaluation': 'WorkerPerformanceEventEvaluation'
    }

    attribute_map = {
        'worker': 'worker',
        'duty_details': 'dutyDetails',
        'evaluation': 'evaluation'
    }

    def __init__(self, worker=None, duty_details=None, evaluation=None, local_vars_configuration=None):  # noqa: E501
        """WorkerPerformanceEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._worker = None
        self._duty_details = None
        self._evaluation = None
        self.discriminator = None

        if worker is not None:
            self.worker = worker
        if duty_details is not None:
            self.duty_details = duty_details
        if evaluation is not None:
            self.evaluation = evaluation

    @property
    def worker(self):
        """Gets the worker of this WorkerPerformanceEvent.  # noqa: E501


        :return: The worker of this WorkerPerformanceEvent.  # noqa: E501
        :rtype: WorkerPerformanceEventWorker
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this WorkerPerformanceEvent.


        :param worker: The worker of this WorkerPerformanceEvent.  # noqa: E501
        :type: WorkerPerformanceEventWorker
        """

        self._worker = worker

    @property
    def duty_details(self):
        """Gets the duty_details of this WorkerPerformanceEvent.  # noqa: E501


        :return: The duty_details of this WorkerPerformanceEvent.  # noqa: E501
        :rtype: WorkerPerformanceEventDutyDetails
        """
        return self._duty_details

    @duty_details.setter
    def duty_details(self, duty_details):
        """Sets the duty_details of this WorkerPerformanceEvent.


        :param duty_details: The duty_details of this WorkerPerformanceEvent.  # noqa: E501
        :type: WorkerPerformanceEventDutyDetails
        """

        self._duty_details = duty_details

    @property
    def evaluation(self):
        """Gets the evaluation of this WorkerPerformanceEvent.  # noqa: E501


        :return: The evaluation of this WorkerPerformanceEvent.  # noqa: E501
        :rtype: WorkerPerformanceEventEvaluation
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this WorkerPerformanceEvent.


        :param evaluation: The evaluation of this WorkerPerformanceEvent.  # noqa: E501
        :type: WorkerPerformanceEventEvaluation
        """

        self._evaluation = evaluation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerPerformanceEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkerPerformanceEvent):
            return True

        return self.to_dict() != other.to_dict()

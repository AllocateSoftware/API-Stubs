# coding: utf-8

"""
    Workers

    ## Workers and events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class WorkingRestrictionRestrictions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'effective_from': 'str',
        'days_per_week': 'str',
        'max_days_per_week': 'str',
        'max_shifts_per_week': 'str',
        'max_consecutive_days': 'str',
        'max_consecutive_days_requested': 'str',
        'max_work_time_per_day': 'str',
        'max_duration_per_shift': 'str',
        'additional_hours_per_week': 'str',
        'max_overtime_per_day': 'str',
        'max_overtime_per_week': 'str',
        'max_overtime_per_calendar_month': 'str',
        'wtd_day_start': 'str',
        'wtd_week_day_start': 'str',
        'wtd_week_time_start': 'str',
        'min_break_between_shifts': 'float',
        'notes': 'str'
    }

    attribute_map = {
        'effective_from': 'effectiveFrom',
        'days_per_week': 'daysPerWeek',
        'max_days_per_week': 'maxDaysPerWeek',
        'max_shifts_per_week': 'maxShiftsPerWeek',
        'max_consecutive_days': 'maxConsecutiveDays',
        'max_consecutive_days_requested': 'maxConsecutiveDaysRequested',
        'max_work_time_per_day': 'maxWorkTimePerDay',
        'max_duration_per_shift': 'maxDurationPerShift',
        'additional_hours_per_week': 'additionalHoursPerWeek',
        'max_overtime_per_day': 'maxOvertimePerDay',
        'max_overtime_per_week': 'maxOvertimePerWeek',
        'max_overtime_per_calendar_month': 'maxOvertimePerCalendarMonth',
        'wtd_day_start': 'wtdDayStart',
        'wtd_week_day_start': 'wtdWeekDayStart',
        'wtd_week_time_start': 'wtdWeekTimeStart',
        'min_break_between_shifts': 'minBreakBetweenShifts',
        'notes': 'notes'
    }

    def __init__(self, effective_from=None, days_per_week=None, max_days_per_week=None, max_shifts_per_week=None, max_consecutive_days=None, max_consecutive_days_requested=None, max_work_time_per_day=None, max_duration_per_shift=None, additional_hours_per_week=None, max_overtime_per_day=None, max_overtime_per_week=None, max_overtime_per_calendar_month=None, wtd_day_start=None, wtd_week_day_start=None, wtd_week_time_start=None, min_break_between_shifts=None, notes=None, local_vars_configuration=None):  # noqa: E501
        """WorkingRestrictionRestrictions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._effective_from = None
        self._days_per_week = None
        self._max_days_per_week = None
        self._max_shifts_per_week = None
        self._max_consecutive_days = None
        self._max_consecutive_days_requested = None
        self._max_work_time_per_day = None
        self._max_duration_per_shift = None
        self._additional_hours_per_week = None
        self._max_overtime_per_day = None
        self._max_overtime_per_week = None
        self._max_overtime_per_calendar_month = None
        self._wtd_day_start = None
        self._wtd_week_day_start = None
        self._wtd_week_time_start = None
        self._min_break_between_shifts = None
        self._notes = None
        self.discriminator = None

        if effective_from is not None:
            self.effective_from = effective_from
        if days_per_week is not None:
            self.days_per_week = days_per_week
        if max_days_per_week is not None:
            self.max_days_per_week = max_days_per_week
        if max_shifts_per_week is not None:
            self.max_shifts_per_week = max_shifts_per_week
        if max_consecutive_days is not None:
            self.max_consecutive_days = max_consecutive_days
        if max_consecutive_days_requested is not None:
            self.max_consecutive_days_requested = max_consecutive_days_requested
        if max_work_time_per_day is not None:
            self.max_work_time_per_day = max_work_time_per_day
        if max_duration_per_shift is not None:
            self.max_duration_per_shift = max_duration_per_shift
        if additional_hours_per_week is not None:
            self.additional_hours_per_week = additional_hours_per_week
        if max_overtime_per_day is not None:
            self.max_overtime_per_day = max_overtime_per_day
        if max_overtime_per_week is not None:
            self.max_overtime_per_week = max_overtime_per_week
        if max_overtime_per_calendar_month is not None:
            self.max_overtime_per_calendar_month = max_overtime_per_calendar_month
        if wtd_day_start is not None:
            self.wtd_day_start = wtd_day_start
        if wtd_week_day_start is not None:
            self.wtd_week_day_start = wtd_week_day_start
        if wtd_week_time_start is not None:
            self.wtd_week_time_start = wtd_week_time_start
        if min_break_between_shifts is not None:
            self.min_break_between_shifts = min_break_between_shifts
        if notes is not None:
            self.notes = notes

    @property
    def effective_from(self):
        """Gets the effective_from of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The effective_from of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._effective_from

    @effective_from.setter
    def effective_from(self, effective_from):
        """Sets the effective_from of this WorkingRestrictionRestrictions.


        :param effective_from: The effective_from of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._effective_from = effective_from

    @property
    def days_per_week(self):
        """Gets the days_per_week of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The days_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._days_per_week

    @days_per_week.setter
    def days_per_week(self, days_per_week):
        """Sets the days_per_week of this WorkingRestrictionRestrictions.


        :param days_per_week: The days_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._days_per_week = days_per_week

    @property
    def max_days_per_week(self):
        """Gets the max_days_per_week of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_days_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_days_per_week

    @max_days_per_week.setter
    def max_days_per_week(self, max_days_per_week):
        """Sets the max_days_per_week of this WorkingRestrictionRestrictions.


        :param max_days_per_week: The max_days_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_days_per_week = max_days_per_week

    @property
    def max_shifts_per_week(self):
        """Gets the max_shifts_per_week of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_shifts_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_shifts_per_week

    @max_shifts_per_week.setter
    def max_shifts_per_week(self, max_shifts_per_week):
        """Sets the max_shifts_per_week of this WorkingRestrictionRestrictions.


        :param max_shifts_per_week: The max_shifts_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_shifts_per_week = max_shifts_per_week

    @property
    def max_consecutive_days(self):
        """Gets the max_consecutive_days of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_consecutive_days of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_consecutive_days

    @max_consecutive_days.setter
    def max_consecutive_days(self, max_consecutive_days):
        """Sets the max_consecutive_days of this WorkingRestrictionRestrictions.


        :param max_consecutive_days: The max_consecutive_days of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_consecutive_days = max_consecutive_days

    @property
    def max_consecutive_days_requested(self):
        """Gets the max_consecutive_days_requested of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_consecutive_days_requested of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_consecutive_days_requested

    @max_consecutive_days_requested.setter
    def max_consecutive_days_requested(self, max_consecutive_days_requested):
        """Sets the max_consecutive_days_requested of this WorkingRestrictionRestrictions.


        :param max_consecutive_days_requested: The max_consecutive_days_requested of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_consecutive_days_requested = max_consecutive_days_requested

    @property
    def max_work_time_per_day(self):
        """Gets the max_work_time_per_day of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_work_time_per_day of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_work_time_per_day

    @max_work_time_per_day.setter
    def max_work_time_per_day(self, max_work_time_per_day):
        """Sets the max_work_time_per_day of this WorkingRestrictionRestrictions.


        :param max_work_time_per_day: The max_work_time_per_day of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_work_time_per_day = max_work_time_per_day

    @property
    def max_duration_per_shift(self):
        """Gets the max_duration_per_shift of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_duration_per_shift of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_duration_per_shift

    @max_duration_per_shift.setter
    def max_duration_per_shift(self, max_duration_per_shift):
        """Sets the max_duration_per_shift of this WorkingRestrictionRestrictions.


        :param max_duration_per_shift: The max_duration_per_shift of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_duration_per_shift = max_duration_per_shift

    @property
    def additional_hours_per_week(self):
        """Gets the additional_hours_per_week of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The additional_hours_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._additional_hours_per_week

    @additional_hours_per_week.setter
    def additional_hours_per_week(self, additional_hours_per_week):
        """Sets the additional_hours_per_week of this WorkingRestrictionRestrictions.


        :param additional_hours_per_week: The additional_hours_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._additional_hours_per_week = additional_hours_per_week

    @property
    def max_overtime_per_day(self):
        """Gets the max_overtime_per_day of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_overtime_per_day of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_overtime_per_day

    @max_overtime_per_day.setter
    def max_overtime_per_day(self, max_overtime_per_day):
        """Sets the max_overtime_per_day of this WorkingRestrictionRestrictions.


        :param max_overtime_per_day: The max_overtime_per_day of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_overtime_per_day = max_overtime_per_day

    @property
    def max_overtime_per_week(self):
        """Gets the max_overtime_per_week of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_overtime_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_overtime_per_week

    @max_overtime_per_week.setter
    def max_overtime_per_week(self, max_overtime_per_week):
        """Sets the max_overtime_per_week of this WorkingRestrictionRestrictions.


        :param max_overtime_per_week: The max_overtime_per_week of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_overtime_per_week = max_overtime_per_week

    @property
    def max_overtime_per_calendar_month(self):
        """Gets the max_overtime_per_calendar_month of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The max_overtime_per_calendar_month of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._max_overtime_per_calendar_month

    @max_overtime_per_calendar_month.setter
    def max_overtime_per_calendar_month(self, max_overtime_per_calendar_month):
        """Sets the max_overtime_per_calendar_month of this WorkingRestrictionRestrictions.


        :param max_overtime_per_calendar_month: The max_overtime_per_calendar_month of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._max_overtime_per_calendar_month = max_overtime_per_calendar_month

    @property
    def wtd_day_start(self):
        """Gets the wtd_day_start of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The wtd_day_start of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._wtd_day_start

    @wtd_day_start.setter
    def wtd_day_start(self, wtd_day_start):
        """Sets the wtd_day_start of this WorkingRestrictionRestrictions.


        :param wtd_day_start: The wtd_day_start of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._wtd_day_start = wtd_day_start

    @property
    def wtd_week_day_start(self):
        """Gets the wtd_week_day_start of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The wtd_week_day_start of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._wtd_week_day_start

    @wtd_week_day_start.setter
    def wtd_week_day_start(self, wtd_week_day_start):
        """Sets the wtd_week_day_start of this WorkingRestrictionRestrictions.


        :param wtd_week_day_start: The wtd_week_day_start of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._wtd_week_day_start = wtd_week_day_start

    @property
    def wtd_week_time_start(self):
        """Gets the wtd_week_time_start of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The wtd_week_time_start of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._wtd_week_time_start

    @wtd_week_time_start.setter
    def wtd_week_time_start(self, wtd_week_time_start):
        """Sets the wtd_week_time_start of this WorkingRestrictionRestrictions.


        :param wtd_week_time_start: The wtd_week_time_start of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._wtd_week_time_start = wtd_week_time_start

    @property
    def min_break_between_shifts(self):
        """Gets the min_break_between_shifts of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The min_break_between_shifts of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: float
        """
        return self._min_break_between_shifts

    @min_break_between_shifts.setter
    def min_break_between_shifts(self, min_break_between_shifts):
        """Sets the min_break_between_shifts of this WorkingRestrictionRestrictions.


        :param min_break_between_shifts: The min_break_between_shifts of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: float
        """

        self._min_break_between_shifts = min_break_between_shifts

    @property
    def notes(self):
        """Gets the notes of this WorkingRestrictionRestrictions.  # noqa: E501


        :return: The notes of this WorkingRestrictionRestrictions.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this WorkingRestrictionRestrictions.


        :param notes: The notes of this WorkingRestrictionRestrictions.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkingRestrictionRestrictions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkingRestrictionRestrictions):
            return True

        return self.to_dict() != other.to_dict()

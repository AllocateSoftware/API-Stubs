# coding: utf-8

"""
    Workers

    ## Workers and events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class ContactLogInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'when': 'datetime',
        'who': 'dict(str, Identifier)',
        'details': 'ContactLogInformationDetails'
    }

    attribute_map = {
        'type': 'type',
        'when': 'when',
        'who': 'who',
        'details': 'details'
    }

    def __init__(self, type=None, when=None, who=None, details=None, local_vars_configuration=None):  # noqa: E501
        """ContactLogInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._when = None
        self._who = None
        self._details = None
        self.discriminator = None

        self.type = type
        if when is not None:
            self.when = when
        if who is not None:
            self.who = who
        if details is not None:
            self.details = details

    @property
    def type(self):
        """Gets the type of this ContactLogInformation.  # noqa: E501


        :return: The type of this ContactLogInformation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactLogInformation.


        :param type: The type of this ContactLogInformation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["telephone", "email", "IM", "faceToFace"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def when(self):
        """Gets the when of this ContactLogInformation.  # noqa: E501


        :return: The when of this ContactLogInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this ContactLogInformation.


        :param when: The when of this ContactLogInformation.  # noqa: E501
        :type: datetime
        """

        self._when = when

    @property
    def who(self):
        """Gets the who of this ContactLogInformation.  # noqa: E501


        :return: The who of this ContactLogInformation.  # noqa: E501
        :rtype: dict(str, Identifier)
        """
        return self._who

    @who.setter
    def who(self, who):
        """Sets the who of this ContactLogInformation.


        :param who: The who of this ContactLogInformation.  # noqa: E501
        :type: dict(str, Identifier)
        """

        self._who = who

    @property
    def details(self):
        """Gets the details of this ContactLogInformation.  # noqa: E501


        :return: The details of this ContactLogInformation.  # noqa: E501
        :rtype: ContactLogInformationDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ContactLogInformation.


        :param details: The details of this ContactLogInformation.  # noqa: E501
        :type: ContactLogInformationDetails
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactLogInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactLogInformation):
            return True

        return self.to_dict() != other.to_dict()

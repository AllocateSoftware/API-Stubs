# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class ErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, code=None, description=None, items=None):  # noqa: E501
        """ErrorResponse - a model defined in OpenAPI

        :param id: The id of this ErrorResponse.  # noqa: E501
        :type id: str
        :param code: The code of this ErrorResponse.  # noqa: E501
        :type code: str
        :param description: The description of this ErrorResponse.  # noqa: E501
        :type description: str
        :param items: The items of this ErrorResponse.  # noqa: E501
        :type items: List[ErrorResponse]
        """
        self.openapi_types = {
            'id': str,
            'code': str,
            'description': str,
            'items': List[ErrorResponse]
        }

        self.attribute_map = {
            'id': 'id',
            'code': 'code',
            'description': 'description',
            'items': 'items'
        }

        self._id = id
        self._code = code
        self._description = description
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorResponse of this ErrorResponse.  # noqa: E501
        :rtype: ErrorResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ErrorResponse.

        Optional identifier for this reponse (for correlation with logging)  # noqa: E501

        :return: The id of this ErrorResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorResponse.

        Optional identifier for this reponse (for correlation with logging)  # noqa: E501

        :param id: The id of this ErrorResponse.
        :type id: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this ErrorResponse.

        Optional error code identifying this particular error  # noqa: E501

        :return: The code of this ErrorResponse.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorResponse.

        Optional error code identifying this particular error  # noqa: E501

        :param code: The code of this ErrorResponse.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this ErrorResponse.

        Description of this error.  # noqa: E501

        :return: The description of this ErrorResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ErrorResponse.

        Description of this error.  # noqa: E501

        :param description: The description of this ErrorResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def items(self):
        """Gets the items of this ErrorResponse.

        List of child errors  # noqa: E501

        :return: The items of this ErrorResponse.
        :rtype: List[ErrorResponse]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ErrorResponse.

        List of child errors  # noqa: E501

        :param items: The items of this ErrorResponse.
        :type items: List[ErrorResponse]
        """

        self._items = items

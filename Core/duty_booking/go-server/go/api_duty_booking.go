/*
 * Duty Booking API and Events
 *
 * ## Duty Booking API and events and Events 
 *
 * API version: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DutyBookingApiController binds http requests to an api service and writes the service results to the http response
type DutyBookingApiController struct {
	service DutyBookingApiServicer
}

// NewDutyBookingApiController creates a default api controller
func NewDutyBookingApiController(s DutyBookingApiServicer) Router {
	return &DutyBookingApiController{ service: s }
}

// Routes returns all of the api route for the DutyBookingApiController
func (c *DutyBookingApiController) Routes() Routes {
	return Routes{ 
		{
			"CancelProposal",
			strings.ToUpper("Delete"),
			"/api/booking/v1/proposals/{id}",
			c.CancelProposal,
		},
		{
			"CreateProposal",
			strings.ToUpper("Post"),
			"/api/booking/v1/vacancy/{vacancyId}/proposals",
			c.CreateProposal,
		},
		{
			"UpdateProposal",
			strings.ToUpper("Put"),
			"/api/booking/v1/proposals/{id}",
			c.UpdateProposal,
		},
	}
}

// CancelProposal - 
func (c *DutyBookingApiController) CancelProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.CancelProposal(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// CreateProposal - 
func (c *DutyBookingApiController) CreateProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	vacancyId := params["vacancyId"]
	proposalDetails := &ProposalDetails{}
	if err := json.NewDecoder(r.Body).Decode(&proposalDetails); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.CreateProposal(vacancyId, *proposalDetails)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UpdateProposal - 
func (c *DutyBookingApiController) UpdateProposal(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	proposalDetails := &ProposalDetails{}
	if err := json.NewDecoder(r.Body).Decode(&proposalDetails); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UpdateProposal(id, *proposalDetails)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

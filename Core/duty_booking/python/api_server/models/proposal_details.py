# coding: utf-8

"""
    Duty Booking API and Events

    ## Duty Booking API and events and Events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class ProposalDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'person_id': 'str',
        'engagement_route': 'str',
        'agency_id': 'object',
        'cost': 'float',
        'cancellation_costs': 'list[CancellationCost]',
        'options': 'list[list[str]]'
    }

    attribute_map = {
        'person_id': 'personId',
        'engagement_route': 'engagementRoute',
        'agency_id': 'agencyId',
        'cost': 'cost',
        'cancellation_costs': 'cancellationCosts',
        'options': 'options'
    }

    def __init__(self, person_id=None, engagement_route=None, agency_id=None, cost=None, cancellation_costs=None, options=None, local_vars_configuration=None):  # noqa: E501
        """ProposalDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._person_id = None
        self._engagement_route = None
        self._agency_id = None
        self._cost = None
        self._cancellation_costs = None
        self._options = None
        self.discriminator = None

        self.person_id = person_id
        self.engagement_route = engagement_route
        if agency_id is not None:
            self.agency_id = agency_id
        self.cost = cost
        self.cancellation_costs = cancellation_costs
        if options is not None:
            self.options = options

    @property
    def person_id(self):
        """Gets the person_id of this ProposalDetails.  # noqa: E501

        The ASWid of the worker being offered for this duty  # noqa: E501

        :return: The person_id of this ProposalDetails.  # noqa: E501
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this ProposalDetails.

        The ASWid of the worker being offered for this duty  # noqa: E501

        :param person_id: The person_id of this ProposalDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and person_id is None:  # noqa: E501
            raise ValueError("Invalid value for `person_id`, must not be `None`")  # noqa: E501

        self._person_id = person_id

    @property
    def engagement_route(self):
        """Gets the engagement_route of this ProposalDetails.  # noqa: E501

        The engagement route for this worker  # noqa: E501

        :return: The engagement_route of this ProposalDetails.  # noqa: E501
        :rtype: str
        """
        return self._engagement_route

    @engagement_route.setter
    def engagement_route(self, engagement_route):
        """Sets the engagement_route of this ProposalDetails.

        The engagement route for this worker  # noqa: E501

        :param engagement_route: The engagement_route of this ProposalDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and engagement_route is None:  # noqa: E501
            raise ValueError("Invalid value for `engagement_route`, must not be `None`")  # noqa: E501
        allowed_values = ["substantive", "bank", "agency", "other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and engagement_route not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `engagement_route` ({0}), must be one of {1}"  # noqa: E501
                .format(engagement_route, allowed_values)
            )

        self._engagement_route = engagement_route

    @property
    def agency_id(self):
        """Gets the agency_id of this ProposalDetails.  # noqa: E501

        The ASWid of the agency, if this worker is being provided through an agency engagement  # noqa: E501

        :return: The agency_id of this ProposalDetails.  # noqa: E501
        :rtype: object
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this ProposalDetails.

        The ASWid of the agency, if this worker is being provided through an agency engagement  # noqa: E501

        :param agency_id: The agency_id of this ProposalDetails.  # noqa: E501
        :type: object
        """

        self._agency_id = agency_id

    @property
    def cost(self):
        """Gets the cost of this ProposalDetails.  # noqa: E501

        Cost for this worker  # noqa: E501

        :return: The cost of this ProposalDetails.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ProposalDetails.

        Cost for this worker  # noqa: E501

        :param cost: The cost of this ProposalDetails.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and cost is None:  # noqa: E501
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def cancellation_costs(self):
        """Gets the cancellation_costs of this ProposalDetails.  # noqa: E501


        :return: The cancellation_costs of this ProposalDetails.  # noqa: E501
        :rtype: list[CancellationCost]
        """
        return self._cancellation_costs

    @cancellation_costs.setter
    def cancellation_costs(self, cancellation_costs):
        """Sets the cancellation_costs of this ProposalDetails.


        :param cancellation_costs: The cancellation_costs of this ProposalDetails.  # noqa: E501
        :type: list[CancellationCost]
        """
        if self.local_vars_configuration.client_side_validation and cancellation_costs is None:  # noqa: E501
            raise ValueError("Invalid value for `cancellation_costs`, must not be `None`")  # noqa: E501

        self._cancellation_costs = cancellation_costs

    @property
    def options(self):
        """Gets the options of this ProposalDetails.  # noqa: E501

        Any options being passed for this worker  # noqa: E501

        :return: The options of this ProposalDetails.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ProposalDetails.

        Any options being passed for this worker  # noqa: E501

        :param options: The options of this ProposalDetails.  # noqa: E501
        :type: list[list[str]]
        """
        allowed_values = [directBook]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(options).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `options` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(options) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProposalDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProposalDetails):
            return True

        return self.to_dict() != other.to_dict()

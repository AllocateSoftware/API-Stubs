# coding: utf-8

"""
    Duty Booking API and Events

    ## Duty Booking API and events and Events   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@allocatesoftware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class DutyWhen(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'planned': 'DutyTimes',
        'actual': 'DutyTimes',
        'shift_type': 'str'
    }

    attribute_map = {
        'planned': 'planned',
        'actual': 'actual',
        'shift_type': 'shiftType'
    }

    def __init__(self, planned=None, actual=None, shift_type=None, local_vars_configuration=None):  # noqa: E501
        """DutyWhen - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._planned = None
        self._actual = None
        self._shift_type = None
        self.discriminator = None

        if planned is not None:
            self.planned = planned
        if actual is not None:
            self.actual = actual
        if shift_type is not None:
            self.shift_type = shift_type

    @property
    def planned(self):
        """Gets the planned of this DutyWhen.  # noqa: E501


        :return: The planned of this DutyWhen.  # noqa: E501
        :rtype: DutyTimes
        """
        return self._planned

    @planned.setter
    def planned(self, planned):
        """Sets the planned of this DutyWhen.


        :param planned: The planned of this DutyWhen.  # noqa: E501
        :type: DutyTimes
        """

        self._planned = planned

    @property
    def actual(self):
        """Gets the actual of this DutyWhen.  # noqa: E501


        :return: The actual of this DutyWhen.  # noqa: E501
        :rtype: DutyTimes
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this DutyWhen.


        :param actual: The actual of this DutyWhen.  # noqa: E501
        :type: DutyTimes
        """

        self._actual = actual

    @property
    def shift_type(self):
        """Gets the shift_type of this DutyWhen.  # noqa: E501

        Night, Day, etc  # noqa: E501

        :return: The shift_type of this DutyWhen.  # noqa: E501
        :rtype: str
        """
        return self._shift_type

    @shift_type.setter
    def shift_type(self, shift_type):
        """Sets the shift_type of this DutyWhen.

        Night, Day, etc  # noqa: E501

        :param shift_type: The shift_type of this DutyWhen.  # noqa: E501
        :type: str
        """

        self._shift_type = shift_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DutyWhen):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DutyWhen):
            return True

        return self.to_dict() != other.to_dict()

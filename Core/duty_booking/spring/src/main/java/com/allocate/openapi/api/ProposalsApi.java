/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.openapi.api;

import com.allocate.openapi.model.AsyncResponse;
import com.allocate.openapi.model.ProposalDetails;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:36:20.724158Z[Europe/London]")

@Validated
@Api(value = "proposals", description = "the proposals API")
public interface ProposalsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "cancelProposal", notes = "Cancel the proposal (and the booking, if it has been accepted)", tags={ "Duty Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Cancelled successfully"),
        @ApiResponse(code = 404, message = "The proposal was not found"),
        @ApiResponse(code = 202, message = "The request was accepted and will be processed asynchronously", response = AsyncResponse.class) })
    @RequestMapping(value = "/proposals/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> cancelProposal(@ApiParam(value = "ID of the proposal",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "updateProposal", notes = "", tags={ "Duty Booking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Duty costing successfully"),
        @ApiResponse(code = 404, message = "The proposal was not found"),
        @ApiResponse(code = 202, message = "The request was accepted and will be processed asynchronously", response = AsyncResponse.class) })
    @RequestMapping(value = "/proposals/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateProposal(@ApiParam(value = "ID of the proposal",required=true) @PathVariable("id") String id,@ApiParam(value = "Details of the proposal for filling the duty (worker)" ,required=true )  @Valid @RequestBody ProposalDetails proposalDetails) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

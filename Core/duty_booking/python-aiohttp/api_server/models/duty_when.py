# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server.models.duty_times import DutyTimes
from api_server import util


class DutyWhen(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, planned: DutyTimes=None, actual: DutyTimes=None, shift_type: str=None):
        """DutyWhen - a model defined in OpenAPI

        :param planned: The planned of this DutyWhen.
        :param actual: The actual of this DutyWhen.
        :param shift_type: The shift_type of this DutyWhen.
        """
        self.openapi_types = {
            'planned': DutyTimes,
            'actual': DutyTimes,
            'shift_type': str
        }

        self.attribute_map = {
            'planned': 'planned',
            'actual': 'actual',
            'shift_type': 'shiftType'
        }

        self._planned = planned
        self._actual = actual
        self._shift_type = shift_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DutyWhen':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Duty_when of this DutyWhen.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def planned(self):
        """Gets the planned of this DutyWhen.


        :return: The planned of this DutyWhen.
        :rtype: DutyTimes
        """
        return self._planned

    @planned.setter
    def planned(self, planned):
        """Sets the planned of this DutyWhen.


        :param planned: The planned of this DutyWhen.
        :type planned: DutyTimes
        """

        self._planned = planned

    @property
    def actual(self):
        """Gets the actual of this DutyWhen.


        :return: The actual of this DutyWhen.
        :rtype: DutyTimes
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this DutyWhen.


        :param actual: The actual of this DutyWhen.
        :type actual: DutyTimes
        """

        self._actual = actual

    @property
    def shift_type(self):
        """Gets the shift_type of this DutyWhen.

        Night, Day, etc

        :return: The shift_type of this DutyWhen.
        :rtype: str
        """
        return self._shift_type

    @shift_type.setter
    def shift_type(self, shift_type):
        """Sets the shift_type of this DutyWhen.

        Night, Day, etc

        :param shift_type: The shift_type of this DutyWhen.
        :type shift_type: str
        """

        self._shift_type = shift_type

# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server.models.duty_requirements import DutyRequirements
from api_server.models.duty_when import DutyWhen
from api_server.models.duty_where import DutyWhere
from api_server import util


class Duty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, when: DutyWhen=None, where: DutyWhere=None, reason: str=None, requirements: DutyRequirements=None):
        """Duty - a model defined in OpenAPI

        :param id: The id of this Duty.
        :param when: The when of this Duty.
        :param where: The where of this Duty.
        :param reason: The reason of this Duty.
        :param requirements: The requirements of this Duty.
        """
        self.openapi_types = {
            'id': str,
            'when': DutyWhen,
            'where': DutyWhere,
            'reason': str,
            'requirements': DutyRequirements
        }

        self.attribute_map = {
            'id': 'id',
            'when': 'when',
            'where': 'where',
            'reason': 'reason',
            'requirements': 'requirements'
        }

        self._id = id
        self._when = when
        self._where = where
        self._reason = reason
        self._requirements = requirements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Duty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Duty of this Duty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Duty.

        Identifier for this duty

        :return: The id of this Duty.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Duty.

        Identifier for this duty

        :param id: The id of this Duty.
        :type id: str
        """

        self._id = id

    @property
    def when(self):
        """Gets the when of this Duty.


        :return: The when of this Duty.
        :rtype: DutyWhen
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this Duty.


        :param when: The when of this Duty.
        :type when: DutyWhen
        """

        self._when = when

    @property
    def where(self):
        """Gets the where of this Duty.


        :return: The where of this Duty.
        :rtype: DutyWhere
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this Duty.


        :param where: The where of this Duty.
        :type where: DutyWhere
        """

        self._where = where

    @property
    def reason(self):
        """Gets the reason of this Duty.

        reason for requestBody

        :return: The reason of this Duty.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Duty.

        reason for requestBody

        :param reason: The reason of this Duty.
        :type reason: str
        """

        self._reason = reason

    @property
    def requirements(self):
        """Gets the requirements of this Duty.


        :return: The requirements of this Duty.
        :rtype: DutyRequirements
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this Duty.


        :param requirements: The requirements of this Duty.
        :type requirements: DutyRequirements
        """

        self._requirements = requirements

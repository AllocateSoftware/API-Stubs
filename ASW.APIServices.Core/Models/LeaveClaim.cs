/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LeaveClaim : IEquatable<LeaveClaim>
    { 
        /// <summary>
        /// Gets or Sets When
        /// </summary>
        [DataMember(Name="when", EmitDefaultValue=false)]
        public LeaveClaimWhen When { get; set; }

        /// <summary>
        /// The reason for the leave claim
        /// </summary>
        /// <value>The reason for the leave claim</value>
        [TypeConverter(typeof(CustomEnumConverter<ReasonEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReasonEnum
        {
            
            /// <summary>
            /// Enum AnnualLeaveEnum for annualLeave
            /// </summary>
            [EnumMember(Value = "annualLeave")]
            AnnualLeaveEnum = 1
        }

        /// <summary>
        /// The reason for the leave claim
        /// </summary>
        /// <value>The reason for the leave claim</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaveClaim {\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LeaveClaim)obj);
        }

        /// <summary>
        /// Returns true if LeaveClaim instances are equal
        /// </summary>
        /// <param name="other">Instance of LeaveClaim to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaveClaim other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    When == other.When ||
                    When != null &&
                    When.Equals(other.When)
                ) && 
                (
                    Reason == other.Reason ||
                    
                    Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (When != null)
                    hashCode = hashCode * 59 + When.GetHashCode();
                    
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LeaveClaim left, LeaveClaim right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LeaveClaim left, LeaveClaim right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

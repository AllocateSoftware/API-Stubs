/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EmploymentDetails : IEquatable<EmploymentDetails>
    { 
        /// <summary>
        /// Gets or Sets EmploymentStatus
        /// </summary>
        [DataMember(Name="employmentStatus", EmitDefaultValue=false)]
        public string EmploymentStatus { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeType
        /// </summary>
        [DataMember(Name="employeeType", EmitDefaultValue=false)]
        public string EmployeeType { get; set; }

        /// <summary>
        /// Gets or Sets HireDetails
        /// </summary>
        [Required]
        [DataMember(Name="hireDetails", EmitDefaultValue=false)]
        public string HireDetails { get; set; }

        /// <summary>
        /// Gets or Sets DateJoinedNHS
        /// </summary>
        [DataMember(Name="dateJoinedNHS", EmitDefaultValue=false)]
        public DateTime DateJoinedNHS { get; set; }

        /// <summary>
        /// Gets or Sets AlAccrualPlan
        /// </summary>
        [DataMember(Name="alAccrualPlan", EmitDefaultValue=false)]
        public string AlAccrualPlan { get; set; }

        /// <summary>
        /// Gets or Sets PrevEmployer
        /// </summary>
        [DataMember(Name="prevEmployer", EmitDefaultValue=false)]
        public string PrevEmployer { get; set; }

        /// <summary>
        /// Gets or Sets Agencies
        /// </summary>
        [DataMember(Name="agencies", EmitDefaultValue=false)]
        public string Agencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmploymentDetails {\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  EmployeeType: ").Append(EmployeeType).Append("\n");
            sb.Append("  HireDetails: ").Append(HireDetails).Append("\n");
            sb.Append("  DateJoinedNHS: ").Append(DateJoinedNHS).Append("\n");
            sb.Append("  AlAccrualPlan: ").Append(AlAccrualPlan).Append("\n");
            sb.Append("  PrevEmployer: ").Append(PrevEmployer).Append("\n");
            sb.Append("  Agencies: ").Append(Agencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmploymentDetails)obj);
        }

        /// <summary>
        /// Returns true if EmploymentDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of EmploymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmploymentDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmploymentStatus == other.EmploymentStatus ||
                    EmploymentStatus != null &&
                    EmploymentStatus.Equals(other.EmploymentStatus)
                ) && 
                (
                    EmployeeType == other.EmployeeType ||
                    EmployeeType != null &&
                    EmployeeType.Equals(other.EmployeeType)
                ) && 
                (
                    HireDetails == other.HireDetails ||
                    HireDetails != null &&
                    HireDetails.Equals(other.HireDetails)
                ) && 
                (
                    DateJoinedNHS == other.DateJoinedNHS ||
                    DateJoinedNHS != null &&
                    DateJoinedNHS.Equals(other.DateJoinedNHS)
                ) && 
                (
                    AlAccrualPlan == other.AlAccrualPlan ||
                    AlAccrualPlan != null &&
                    AlAccrualPlan.Equals(other.AlAccrualPlan)
                ) && 
                (
                    PrevEmployer == other.PrevEmployer ||
                    PrevEmployer != null &&
                    PrevEmployer.Equals(other.PrevEmployer)
                ) && 
                (
                    Agencies == other.Agencies ||
                    Agencies != null &&
                    Agencies.Equals(other.Agencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmploymentStatus != null)
                    hashCode = hashCode * 59 + EmploymentStatus.GetHashCode();
                    if (EmployeeType != null)
                    hashCode = hashCode * 59 + EmployeeType.GetHashCode();
                    if (HireDetails != null)
                    hashCode = hashCode * 59 + HireDetails.GetHashCode();
                    if (DateJoinedNHS != null)
                    hashCode = hashCode * 59 + DateJoinedNHS.GetHashCode();
                    if (AlAccrualPlan != null)
                    hashCode = hashCode * 59 + AlAccrualPlan.GetHashCode();
                    if (PrevEmployer != null)
                    hashCode = hashCode * 59 + PrevEmployer.GetHashCode();
                    if (Agencies != null)
                    hashCode = hashCode * 59 + Agencies.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmploymentDetails left, EmploymentDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmploymentDetails left, EmploymentDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

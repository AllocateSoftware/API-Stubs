/*
 * Duties and Events
 *
 * ## Duties and Events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DutyTempStaffingNoteCreatedEvent : Event, IEquatable<DutyTempStaffingNoteCreatedEvent>
    { 
        /// <summary>
        /// Gets or Sets DutyId
        /// </summary>
        [DataMember(Name="dutyId", EmitDefaultValue=false)]
        public string DutyId { get; set; }

        /// <summary>
        /// Identifier for the note
        /// </summary>
        /// <value>Identifier for the note</value>
        [DataMember(Name="noteId", EmitDefaultValue=false)]
        public string NoteId { get; set; }

        /// <summary>
        /// Content for the note
        /// </summary>
        /// <value>Content for the note</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DutyTempStaffingNoteCreatedEvent {\n");
            sb.Append("  DutyId: ").Append(DutyId).Append("\n");
            sb.Append("  NoteId: ").Append(NoteId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DutyTempStaffingNoteCreatedEvent)obj);
        }

        /// <summary>
        /// Returns true if DutyTempStaffingNoteCreatedEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of DutyTempStaffingNoteCreatedEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DutyTempStaffingNoteCreatedEvent other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DutyId == other.DutyId ||
                    DutyId != null &&
                    DutyId.Equals(other.DutyId)
                ) && 
                (
                    NoteId == other.NoteId ||
                    NoteId != null &&
                    NoteId.Equals(other.NoteId)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DutyId != null)
                    hashCode = hashCode * 59 + DutyId.GetHashCode();
                    if (NoteId != null)
                    hashCode = hashCode * 59 + NoteId.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DutyTempStaffingNoteCreatedEvent left, DutyTempStaffingNoteCreatedEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DutyTempStaffingNoteCreatedEvent left, DutyTempStaffingNoteCreatedEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

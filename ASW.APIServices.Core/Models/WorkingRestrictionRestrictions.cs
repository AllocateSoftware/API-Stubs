/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkingRestrictionRestrictions : IEquatable<WorkingRestrictionRestrictions>
    { 
        /// <summary>
        /// Gets or Sets EffectiveFrom
        /// </summary>
        [DataMember(Name="effectiveFrom", EmitDefaultValue=false)]
        public string EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or Sets DaysPerWeek
        /// </summary>
        [DataMember(Name="daysPerWeek", EmitDefaultValue=false)]
        public string DaysPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxDaysPerWeek
        /// </summary>
        [DataMember(Name="maxDaysPerWeek", EmitDefaultValue=false)]
        public string MaxDaysPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxShiftsPerWeek
        /// </summary>
        [DataMember(Name="maxShiftsPerWeek", EmitDefaultValue=false)]
        public string MaxShiftsPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxConsecutiveDays
        /// </summary>
        [DataMember(Name="maxConsecutiveDays", EmitDefaultValue=false)]
        public string MaxConsecutiveDays { get; set; }

        /// <summary>
        /// Gets or Sets MaxConsecutiveDaysRequested
        /// </summary>
        [DataMember(Name="maxConsecutiveDaysRequested", EmitDefaultValue=false)]
        public string MaxConsecutiveDaysRequested { get; set; }

        /// <summary>
        /// Gets or Sets MaxWorkTimePerDay
        /// </summary>
        [DataMember(Name="maxWorkTimePerDay", EmitDefaultValue=false)]
        public string MaxWorkTimePerDay { get; set; }

        /// <summary>
        /// Gets or Sets MaxDurationPerShift
        /// </summary>
        [DataMember(Name="maxDurationPerShift", EmitDefaultValue=false)]
        public string MaxDurationPerShift { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalHoursPerWeek
        /// </summary>
        [DataMember(Name="additionalHoursPerWeek", EmitDefaultValue=false)]
        public string AdditionalHoursPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxOvertimePerDay
        /// </summary>
        [DataMember(Name="maxOvertimePerDay", EmitDefaultValue=false)]
        public string MaxOvertimePerDay { get; set; }

        /// <summary>
        /// Gets or Sets MaxOvertimePerWeek
        /// </summary>
        [DataMember(Name="maxOvertimePerWeek", EmitDefaultValue=false)]
        public string MaxOvertimePerWeek { get; set; }

        /// <summary>
        /// Gets or Sets MaxOvertimePerCalendarMonth
        /// </summary>
        [DataMember(Name="maxOvertimePerCalendarMonth", EmitDefaultValue=false)]
        public string MaxOvertimePerCalendarMonth { get; set; }

        /// <summary>
        /// Gets or Sets WtdDayStart
        /// </summary>
        [DataMember(Name="wtdDayStart", EmitDefaultValue=false)]
        public string WtdDayStart { get; set; }

        /// <summary>
        /// Gets or Sets WtdWeekDayStart
        /// </summary>
        [DataMember(Name="wtdWeekDayStart", EmitDefaultValue=false)]
        public string WtdWeekDayStart { get; set; }

        /// <summary>
        /// Gets or Sets WtdWeekTimeStart
        /// </summary>
        [DataMember(Name="wtdWeekTimeStart", EmitDefaultValue=false)]
        public string WtdWeekTimeStart { get; set; }

        /// <summary>
        /// Gets or Sets MinBreakBetweenShifts
        /// </summary>
        [DataMember(Name="minBreakBetweenShifts", EmitDefaultValue=false)]
        public decimal MinBreakBetweenShifts { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkingRestrictionRestrictions {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  DaysPerWeek: ").Append(DaysPerWeek).Append("\n");
            sb.Append("  MaxDaysPerWeek: ").Append(MaxDaysPerWeek).Append("\n");
            sb.Append("  MaxShiftsPerWeek: ").Append(MaxShiftsPerWeek).Append("\n");
            sb.Append("  MaxConsecutiveDays: ").Append(MaxConsecutiveDays).Append("\n");
            sb.Append("  MaxConsecutiveDaysRequested: ").Append(MaxConsecutiveDaysRequested).Append("\n");
            sb.Append("  MaxWorkTimePerDay: ").Append(MaxWorkTimePerDay).Append("\n");
            sb.Append("  MaxDurationPerShift: ").Append(MaxDurationPerShift).Append("\n");
            sb.Append("  AdditionalHoursPerWeek: ").Append(AdditionalHoursPerWeek).Append("\n");
            sb.Append("  MaxOvertimePerDay: ").Append(MaxOvertimePerDay).Append("\n");
            sb.Append("  MaxOvertimePerWeek: ").Append(MaxOvertimePerWeek).Append("\n");
            sb.Append("  MaxOvertimePerCalendarMonth: ").Append(MaxOvertimePerCalendarMonth).Append("\n");
            sb.Append("  WtdDayStart: ").Append(WtdDayStart).Append("\n");
            sb.Append("  WtdWeekDayStart: ").Append(WtdWeekDayStart).Append("\n");
            sb.Append("  WtdWeekTimeStart: ").Append(WtdWeekTimeStart).Append("\n");
            sb.Append("  MinBreakBetweenShifts: ").Append(MinBreakBetweenShifts).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkingRestrictionRestrictions)obj);
        }

        /// <summary>
        /// Returns true if WorkingRestrictionRestrictions instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkingRestrictionRestrictions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkingRestrictionRestrictions other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EffectiveFrom == other.EffectiveFrom ||
                    EffectiveFrom != null &&
                    EffectiveFrom.Equals(other.EffectiveFrom)
                ) && 
                (
                    DaysPerWeek == other.DaysPerWeek ||
                    DaysPerWeek != null &&
                    DaysPerWeek.Equals(other.DaysPerWeek)
                ) && 
                (
                    MaxDaysPerWeek == other.MaxDaysPerWeek ||
                    MaxDaysPerWeek != null &&
                    MaxDaysPerWeek.Equals(other.MaxDaysPerWeek)
                ) && 
                (
                    MaxShiftsPerWeek == other.MaxShiftsPerWeek ||
                    MaxShiftsPerWeek != null &&
                    MaxShiftsPerWeek.Equals(other.MaxShiftsPerWeek)
                ) && 
                (
                    MaxConsecutiveDays == other.MaxConsecutiveDays ||
                    MaxConsecutiveDays != null &&
                    MaxConsecutiveDays.Equals(other.MaxConsecutiveDays)
                ) && 
                (
                    MaxConsecutiveDaysRequested == other.MaxConsecutiveDaysRequested ||
                    MaxConsecutiveDaysRequested != null &&
                    MaxConsecutiveDaysRequested.Equals(other.MaxConsecutiveDaysRequested)
                ) && 
                (
                    MaxWorkTimePerDay == other.MaxWorkTimePerDay ||
                    MaxWorkTimePerDay != null &&
                    MaxWorkTimePerDay.Equals(other.MaxWorkTimePerDay)
                ) && 
                (
                    MaxDurationPerShift == other.MaxDurationPerShift ||
                    MaxDurationPerShift != null &&
                    MaxDurationPerShift.Equals(other.MaxDurationPerShift)
                ) && 
                (
                    AdditionalHoursPerWeek == other.AdditionalHoursPerWeek ||
                    AdditionalHoursPerWeek != null &&
                    AdditionalHoursPerWeek.Equals(other.AdditionalHoursPerWeek)
                ) && 
                (
                    MaxOvertimePerDay == other.MaxOvertimePerDay ||
                    MaxOvertimePerDay != null &&
                    MaxOvertimePerDay.Equals(other.MaxOvertimePerDay)
                ) && 
                (
                    MaxOvertimePerWeek == other.MaxOvertimePerWeek ||
                    MaxOvertimePerWeek != null &&
                    MaxOvertimePerWeek.Equals(other.MaxOvertimePerWeek)
                ) && 
                (
                    MaxOvertimePerCalendarMonth == other.MaxOvertimePerCalendarMonth ||
                    MaxOvertimePerCalendarMonth != null &&
                    MaxOvertimePerCalendarMonth.Equals(other.MaxOvertimePerCalendarMonth)
                ) && 
                (
                    WtdDayStart == other.WtdDayStart ||
                    WtdDayStart != null &&
                    WtdDayStart.Equals(other.WtdDayStart)
                ) && 
                (
                    WtdWeekDayStart == other.WtdWeekDayStart ||
                    WtdWeekDayStart != null &&
                    WtdWeekDayStart.Equals(other.WtdWeekDayStart)
                ) && 
                (
                    WtdWeekTimeStart == other.WtdWeekTimeStart ||
                    WtdWeekTimeStart != null &&
                    WtdWeekTimeStart.Equals(other.WtdWeekTimeStart)
                ) && 
                (
                    MinBreakBetweenShifts == other.MinBreakBetweenShifts ||
                    
                    MinBreakBetweenShifts.Equals(other.MinBreakBetweenShifts)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EffectiveFrom != null)
                    hashCode = hashCode * 59 + EffectiveFrom.GetHashCode();
                    if (DaysPerWeek != null)
                    hashCode = hashCode * 59 + DaysPerWeek.GetHashCode();
                    if (MaxDaysPerWeek != null)
                    hashCode = hashCode * 59 + MaxDaysPerWeek.GetHashCode();
                    if (MaxShiftsPerWeek != null)
                    hashCode = hashCode * 59 + MaxShiftsPerWeek.GetHashCode();
                    if (MaxConsecutiveDays != null)
                    hashCode = hashCode * 59 + MaxConsecutiveDays.GetHashCode();
                    if (MaxConsecutiveDaysRequested != null)
                    hashCode = hashCode * 59 + MaxConsecutiveDaysRequested.GetHashCode();
                    if (MaxWorkTimePerDay != null)
                    hashCode = hashCode * 59 + MaxWorkTimePerDay.GetHashCode();
                    if (MaxDurationPerShift != null)
                    hashCode = hashCode * 59 + MaxDurationPerShift.GetHashCode();
                    if (AdditionalHoursPerWeek != null)
                    hashCode = hashCode * 59 + AdditionalHoursPerWeek.GetHashCode();
                    if (MaxOvertimePerDay != null)
                    hashCode = hashCode * 59 + MaxOvertimePerDay.GetHashCode();
                    if (MaxOvertimePerWeek != null)
                    hashCode = hashCode * 59 + MaxOvertimePerWeek.GetHashCode();
                    if (MaxOvertimePerCalendarMonth != null)
                    hashCode = hashCode * 59 + MaxOvertimePerCalendarMonth.GetHashCode();
                    if (WtdDayStart != null)
                    hashCode = hashCode * 59 + WtdDayStart.GetHashCode();
                    if (WtdWeekDayStart != null)
                    hashCode = hashCode * 59 + WtdWeekDayStart.GetHashCode();
                    if (WtdWeekTimeStart != null)
                    hashCode = hashCode * 59 + WtdWeekTimeStart.GetHashCode();
                    
                    hashCode = hashCode * 59 + MinBreakBetweenShifts.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkingRestrictionRestrictions left, WorkingRestrictionRestrictions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkingRestrictionRestrictions left, WorkingRestrictionRestrictions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

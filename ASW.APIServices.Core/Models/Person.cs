/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Person : IEquatable<Person>
    { 
        /// <summary>
        /// Gets or Sets Identification
        /// </summary>
        [DataMember(Name="identification", EmitDefaultValue=false)]
        public Identification Identification { get; set; }

        /// <summary>
        /// Gets or Sets PersonalInfo
        /// </summary>
        [DataMember(Name="personalInfo", EmitDefaultValue=false)]
        public PersonalInfo PersonalInfo { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentDetails
        /// </summary>
        [DataMember(Name="employmentDetails", EmitDefaultValue=false)]
        public EmploymentDetails EmploymentDetails { get; set; }

        /// <summary>
        /// Gets or Sets WorkLocations
        /// </summary>
        [DataMember(Name="workLocations", EmitDefaultValue=false)]
        public WorkLocations WorkLocations { get; set; }

        /// <summary>
        /// Gets or Sets Postings
        /// </summary>
        [DataMember(Name="postings", EmitDefaultValue=false)]
        public List<Posting> Postings { get; set; }

        /// <summary>
        /// Gets or Sets Contracts
        /// </summary>
        [DataMember(Name="contracts", EmitDefaultValue=false)]
        public List<Contract> Contracts { get; set; }

        /// <summary>
        /// Gets or Sets Skills
        /// </summary>
        [DataMember(Name="skills", EmitDefaultValue=false)]
        public List<Skill> Skills { get; set; }

        /// <summary>
        /// Gets or Sets Specialties
        /// </summary>
        [DataMember(Name="specialties", EmitDefaultValue=false)]
        public List<Specialty> Specialties { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<Attribute> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Visas
        /// </summary>
        [DataMember(Name="visas", EmitDefaultValue=false)]
        public List<Visa> Visas { get; set; }

        /// <summary>
        /// Gets or Sets WorkingRestrictions
        /// </summary>
        [DataMember(Name="workingRestrictions", EmitDefaultValue=false)]
        public List<WorkingRestriction> WorkingRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets Availabilities
        /// </summary>
        [DataMember(Name="availabilities", EmitDefaultValue=false)]
        public Availabilities Availabilities { get; set; }

        /// <summary>
        /// Gets or Sets PersonalPattern
        /// </summary>
        [DataMember(Name="personalPattern", EmitDefaultValue=false)]
        public PersonalPattern PersonalPattern { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  PersonalInfo: ").Append(PersonalInfo).Append("\n");
            sb.Append("  EmploymentDetails: ").Append(EmploymentDetails).Append("\n");
            sb.Append("  WorkLocations: ").Append(WorkLocations).Append("\n");
            sb.Append("  Postings: ").Append(Postings).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("  Skills: ").Append(Skills).Append("\n");
            sb.Append("  Specialties: ").Append(Specialties).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Visas: ").Append(Visas).Append("\n");
            sb.Append("  WorkingRestrictions: ").Append(WorkingRestrictions).Append("\n");
            sb.Append("  Availabilities: ").Append(Availabilities).Append("\n");
            sb.Append("  PersonalPattern: ").Append(PersonalPattern).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Person)obj);
        }

        /// <summary>
        /// Returns true if Person instances are equal
        /// </summary>
        /// <param name="other">Instance of Person to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Person other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.Equals(other.Identification)
                ) && 
                (
                    PersonalInfo == other.PersonalInfo ||
                    PersonalInfo != null &&
                    PersonalInfo.Equals(other.PersonalInfo)
                ) && 
                (
                    EmploymentDetails == other.EmploymentDetails ||
                    EmploymentDetails != null &&
                    EmploymentDetails.Equals(other.EmploymentDetails)
                ) && 
                (
                    WorkLocations == other.WorkLocations ||
                    WorkLocations != null &&
                    WorkLocations.Equals(other.WorkLocations)
                ) && 
                (
                    Postings == other.Postings ||
                    Postings != null &&
                    other.Postings != null &&
                    Postings.SequenceEqual(other.Postings)
                ) && 
                (
                    Contracts == other.Contracts ||
                    Contracts != null &&
                    other.Contracts != null &&
                    Contracts.SequenceEqual(other.Contracts)
                ) && 
                (
                    Skills == other.Skills ||
                    Skills != null &&
                    other.Skills != null &&
                    Skills.SequenceEqual(other.Skills)
                ) && 
                (
                    Specialties == other.Specialties ||
                    Specialties != null &&
                    other.Specialties != null &&
                    Specialties.SequenceEqual(other.Specialties)
                ) && 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    other.Attributes != null &&
                    Attributes.SequenceEqual(other.Attributes)
                ) && 
                (
                    Visas == other.Visas ||
                    Visas != null &&
                    other.Visas != null &&
                    Visas.SequenceEqual(other.Visas)
                ) && 
                (
                    WorkingRestrictions == other.WorkingRestrictions ||
                    WorkingRestrictions != null &&
                    other.WorkingRestrictions != null &&
                    WorkingRestrictions.SequenceEqual(other.WorkingRestrictions)
                ) && 
                (
                    Availabilities == other.Availabilities ||
                    Availabilities != null &&
                    Availabilities.Equals(other.Availabilities)
                ) && 
                (
                    PersonalPattern == other.PersonalPattern ||
                    PersonalPattern != null &&
                    PersonalPattern.Equals(other.PersonalPattern)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (PersonalInfo != null)
                    hashCode = hashCode * 59 + PersonalInfo.GetHashCode();
                    if (EmploymentDetails != null)
                    hashCode = hashCode * 59 + EmploymentDetails.GetHashCode();
                    if (WorkLocations != null)
                    hashCode = hashCode * 59 + WorkLocations.GetHashCode();
                    if (Postings != null)
                    hashCode = hashCode * 59 + Postings.GetHashCode();
                    if (Contracts != null)
                    hashCode = hashCode * 59 + Contracts.GetHashCode();
                    if (Skills != null)
                    hashCode = hashCode * 59 + Skills.GetHashCode();
                    if (Specialties != null)
                    hashCode = hashCode * 59 + Specialties.GetHashCode();
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                    if (Visas != null)
                    hashCode = hashCode * 59 + Visas.GetHashCode();
                    if (WorkingRestrictions != null)
                    hashCode = hashCode * 59 + WorkingRestrictions.GetHashCode();
                    if (Availabilities != null)
                    hashCode = hashCode * 59 + Availabilities.GetHashCode();
                    if (PersonalPattern != null)
                    hashCode = hashCode * 59 + PersonalPattern.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Person left, Person right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Person left, Person right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

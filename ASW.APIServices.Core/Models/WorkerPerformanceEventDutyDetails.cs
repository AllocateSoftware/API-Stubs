/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkerPerformanceEventDutyDetails : IEquatable<WorkerPerformanceEventDutyDetails>
    { 
        /// <summary>
        /// ID of the duty within the allocate system
        /// </summary>
        /// <value>ID of the duty within the allocate system</value>
        [DataMember(Name="dutyId", EmitDefaultValue=false)]
        public string DutyId { get; set; }

        /// <summary>
        /// When the duty started
        /// </summary>
        /// <value>When the duty started</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public DateTime From { get; set; }

        /// <summary>
        /// When the duty ended
        /// </summary>
        /// <value>When the duty ended</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public DateTime To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkerPerformanceEventDutyDetails {\n");
            sb.Append("  DutyId: ").Append(DutyId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkerPerformanceEventDutyDetails)obj);
        }

        /// <summary>
        /// Returns true if WorkerPerformanceEventDutyDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkerPerformanceEventDutyDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkerPerformanceEventDutyDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DutyId == other.DutyId ||
                    DutyId != null &&
                    DutyId.Equals(other.DutyId)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    From.Equals(other.From)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DutyId != null)
                    hashCode = hashCode * 59 + DutyId.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkerPerformanceEventDutyDetails left, WorkerPerformanceEventDutyDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkerPerformanceEventDutyDetails left, WorkerPerformanceEventDutyDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

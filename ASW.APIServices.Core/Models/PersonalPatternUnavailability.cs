/*
 * Workers
 *
 * ## Workers and events 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@allocatesoftware.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Core.Converters;

namespace ASW.APIServices.Core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonalPatternUnavailability : IEquatable<PersonalPatternUnavailability>
    { 
        /// <summary>
        /// Gets or Sets UnavailabilityGroup
        /// </summary>
        [DataMember(Name="unavailabilityGroup", EmitDefaultValue=false)]
        public string UnavailabilityGroup { get; set; }

        /// <summary>
        /// Gets or Sets UnavailabilityReason
        /// </summary>
        [Required]
        [DataMember(Name="unavailabilityReason", EmitDefaultValue=false)]
        public string UnavailabilityReason { get; set; }

        /// <summary>
        /// Gets or Sets Work
        /// </summary>
        [DataMember(Name="work", EmitDefaultValue=false)]
        public string Work { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [Required]
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [Required]
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }

        /// <summary>
        /// Gets or Sets ExternalUnavailabilityIdentifier
        /// </summary>
        [Required]
        [DataMember(Name="externalUnavailabilityIdentifier", EmitDefaultValue=false)]
        public string ExternalUnavailabilityIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalPatternUnavailability {\n");
            sb.Append("  UnavailabilityGroup: ").Append(UnavailabilityGroup).Append("\n");
            sb.Append("  UnavailabilityReason: ").Append(UnavailabilityReason).Append("\n");
            sb.Append("  Work: ").Append(Work).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ExternalUnavailabilityIdentifier: ").Append(ExternalUnavailabilityIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalPatternUnavailability)obj);
        }

        /// <summary>
        /// Returns true if PersonalPatternUnavailability instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalPatternUnavailability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalPatternUnavailability other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UnavailabilityGroup == other.UnavailabilityGroup ||
                    UnavailabilityGroup != null &&
                    UnavailabilityGroup.Equals(other.UnavailabilityGroup)
                ) && 
                (
                    UnavailabilityReason == other.UnavailabilityReason ||
                    UnavailabilityReason != null &&
                    UnavailabilityReason.Equals(other.UnavailabilityReason)
                ) && 
                (
                    Work == other.Work ||
                    Work != null &&
                    Work.Equals(other.Work)
                ) && 
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                ) && 
                (
                    ExternalUnavailabilityIdentifier == other.ExternalUnavailabilityIdentifier ||
                    ExternalUnavailabilityIdentifier != null &&
                    ExternalUnavailabilityIdentifier.Equals(other.ExternalUnavailabilityIdentifier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UnavailabilityGroup != null)
                    hashCode = hashCode * 59 + UnavailabilityGroup.GetHashCode();
                    if (UnavailabilityReason != null)
                    hashCode = hashCode * 59 + UnavailabilityReason.GetHashCode();
                    if (Work != null)
                    hashCode = hashCode * 59 + Work.GetHashCode();
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                    if (ExternalUnavailabilityIdentifier != null)
                    hashCode = hashCode * 59 + ExternalUnavailabilityIdentifier.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalPatternUnavailability left, PersonalPatternUnavailability right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalPatternUnavailability left, PersonalPatternUnavailability right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

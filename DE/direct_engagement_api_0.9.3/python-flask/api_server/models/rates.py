# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api_server.models.base_model_ import Model
from api_server import util


class Rates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reference=None, rate=None):  # noqa: E501
        """Rates - a model defined in OpenAPI

        :param reference: The reference of this Rates.  # noqa: E501
        :type reference: str
        :param rate: The rate of this Rates.  # noqa: E501
        :type rate: float
        """
        self.openapi_types = {
            'reference': str,
            'rate': float
        }

        self.attribute_map = {
            'reference': 'reference',
            'rate': 'rate'
        }

        self._reference = reference
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt) -> 'Rates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rates of this Rates.  # noqa: E501
        :rtype: Rates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reference(self):
        """Gets the reference of this Rates.


        :return: The reference of this Rates.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Rates.


        :param reference: The reference of this Rates.
        :type reference: str
        """
        allowed_values = ["basic_worker_pay", "basic_commission", "basic_ni", "enhanced_worker_pay", "enhanced_commission", "enhanced_ni", "fixed_worker_pay", "fixed_commission", "fixed_ni", "enhanced_night_worker_pay", "enhanced_night_commission", "enhanced_night_ni", "enhanced_saturday_worker_pay", "enhanced_saturday_commission", "enhanced_saturday_ni", "enhanced_sunday_worker_pay", "enhanced_sunday_commission", "enhanced_sunday_ni", "enhanced_holiday_worker_pay", "enhanced_holiday_commission", "enhanced_holiday_ni"]  # noqa: E501
        if reference not in allowed_values:
            raise ValueError(
                "Invalid value for `reference` ({0}), must be one of {1}"
                .format(reference, allowed_values)
            )

        self._reference = reference

    @property
    def rate(self):
        """Gets the rate of this Rates.


        :return: The rate of this Rates.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Rates.


        :param rate: The rate of this Rates.
        :type rate: float
        """

        self._rate = rate

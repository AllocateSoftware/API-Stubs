/*
 * DE Provider Direct Engagement API
 *
 * description
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DutyApiController binds http requests to an api service and writes the service results to the http response
type DutyApiController struct {
	service DutyApiServicer
}

// NewDutyApiController creates a default api controller
func NewDutyApiController(s DutyApiServicer) Router {
	return &DutyApiController{ service: s }
}

// Routes returns all of the api route for the DutyApiController
func (c *DutyApiController) Routes() Routes {
	return Routes{ 
		{
			"CancelDuty",
			strings.ToUpper("Post"),
			"/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel",
			c.CancelDuty,
		},
		{
			"FillDuty",
			strings.ToUpper("Post"),
			"/{version}/trustcode/{trustCode}/duty/{dutyId}/booking",
			c.FillDuty,
		},
		{
			"GetDutyDetails",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/duty/",
			c.GetDutyDetails,
		},
		{
			"GetSingleDutyDetails",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/duty/{dutyId}",
			c.GetSingleDutyDetails,
		},
		{
			"UpdateContractStatus",
			strings.ToUpper("Put"),
			"/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}",
			c.UpdateContractStatus,
		},
		{
			"UpdateTimesheets",
			strings.ToUpper("Put"),
			"/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet",
			c.UpdateTimesheets,
		},
	}
}

// CancelDuty - Cancel a duty
func (c *DutyApiController) CancelDuty(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	version := params["version"]
	trustCode := params["trustCode"]
	dutyId := params["dutyId"]
	result, err := c.service.CancelDuty(version, trustCode, dutyId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// FillDuty - Creates booking for duty
func (c *DutyApiController) FillDuty(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	version := params["version"]
	trustCode := params["trustCode"]
	dutyId := params["dutyId"]
	bookingInfo := &BookingInfo{}
	if err := json.NewDecoder(r.Body).Decode(&bookingInfo); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.FillDuty(version, trustCode, dutyId, *bookingInfo)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetDutyDetails - Returns details about a duties.
func (c *DutyApiController) GetDutyDetails(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	id := strings.Split(query.Get("id"), ",")
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetDutyDetails(version, trustCode, id, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetSingleDutyDetails - Returns details about a duties.
func (c *DutyApiController) GetSingleDutyDetails(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	dutyId := params["dutyId"]
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetSingleDutyDetails(version, trustCode, dutyId, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UpdateContractStatus - Updates DE Contract status
func (c *DutyApiController) UpdateContractStatus(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	version := params["version"]
	trustCode := params["trustCode"]
	dutyId := params["dutyId"]
	contractId := params["contractId"]
	statusId := params["statusId"]
	result, err := c.service.UpdateContractStatus(version, trustCode, dutyId, contractId, statusId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UpdateTimesheets - Updates timesheet for duty
func (c *DutyApiController) UpdateTimesheets(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	version := params["version"]
	trustCode := params["trustCode"]
	dutyId := params["dutyId"]
	inlineObject := &InlineObject{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UpdateTimesheets(version, trustCode, dutyId, *inlineObject)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

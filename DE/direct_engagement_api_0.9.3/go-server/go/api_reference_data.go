/*
 * DE Provider Direct Engagement API
 *
 * description
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package allocateApi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ReferenceDataApiController binds http requests to an api service and writes the service results to the http response
type ReferenceDataApiController struct {
	service ReferenceDataApiServicer
}

// NewReferenceDataApiController creates a default api controller
func NewReferenceDataApiController(s ReferenceDataApiServicer) Router {
	return &ReferenceDataApiController{ service: s }
}

// Routes returns all of the api route for the ReferenceDataApiController
func (c *ReferenceDataApiController) Routes() Routes {
	return Routes{ 
		{
			"GetAgenciesByIds",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/agency/",
			c.GetAgenciesByIds,
		},
		{
			"GetAllAgencies",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/agency",
			c.GetAllAgencies,
		},
		{
			"GetAllContractStatuses",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/contractStatus",
			c.GetAllContractStatuses,
		},
		{
			"GetAllGrades",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/grade",
			c.GetAllGrades,
		},
		{
			"GetAllReasonsForVacancy",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy",
			c.GetAllReasonsForVacancy,
		},
		{
			"GetAllStaffGroups",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/staffGroup",
			c.GetAllStaffGroups,
		},
		{
			"GetAllUnits",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/unit",
			c.GetAllUnits,
		},
		{
			"GetContractStatusesByIds",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/contractStatus/",
			c.GetContractStatusesByIds,
		},
		{
			"GetGradesByIds",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/grade/",
			c.GetGradesByIds,
		},
		{
			"GetReasonsForVacancyByIds",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy/",
			c.GetReasonsForVacancyByIds,
		},
		{
			"GetStaffGroupsByIds",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/staffGroup/",
			c.GetStaffGroupsByIds,
		},
		{
			"GetUnitsByIds",
			strings.ToUpper("Get"),
			"/{version}/trustcode/{trustCode}/referenceData/unit/",
			c.GetUnitsByIds,
		},
	}
}

// GetAgenciesByIds - Get agencies
func (c *ReferenceDataApiController) GetAgenciesByIds(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	id := strings.Split(query.Get("id"), ",")
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetAgenciesByIds(version, trustCode, id, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetAllAgencies - Get all agencies
func (c *ReferenceDataApiController) GetAllAgencies(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetAllAgencies(version, trustCode, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetAllContractStatuses - Get all contract statuses
func (c *ReferenceDataApiController) GetAllContractStatuses(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetAllContractStatuses(version, trustCode, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetAllGrades - Get all grades
func (c *ReferenceDataApiController) GetAllGrades(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetAllGrades(version, trustCode, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetAllReasonsForVacancy - Get all reasons for vacancy
func (c *ReferenceDataApiController) GetAllReasonsForVacancy(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetAllReasonsForVacancy(version, trustCode, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetAllStaffGroups - Get all staff groups
func (c *ReferenceDataApiController) GetAllStaffGroups(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetAllStaffGroups(version, trustCode, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetAllUnits - Get all units
func (c *ReferenceDataApiController) GetAllUnits(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetAllUnits(version, trustCode, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetContractStatusesByIds - Get contract statuses
func (c *ReferenceDataApiController) GetContractStatusesByIds(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	id := strings.Split(query.Get("id"), ",")
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetContractStatusesByIds(version, trustCode, id, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetGradesByIds - Get grades
func (c *ReferenceDataApiController) GetGradesByIds(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	id := strings.Split(query.Get("id"), ",")
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetGradesByIds(version, trustCode, id, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetReasonsForVacancyByIds - Get reasons for vacancy
func (c *ReferenceDataApiController) GetReasonsForVacancyByIds(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	id := strings.Split(query.Get("id"), ",")
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetReasonsForVacancyByIds(version, trustCode, id, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetStaffGroupsByIds - Get staff groups
func (c *ReferenceDataApiController) GetStaffGroupsByIds(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	id := strings.Split(query.Get("id"), ",")
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetStaffGroupsByIds(version, trustCode, id, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetUnitsByIds - Get units
func (c *ReferenceDataApiController) GetUnitsByIds(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	version := params["version"]
	trustCode := params["trustCode"]
	id := strings.Split(query.Get("id"), ",")
	page := query.Get("page")
	pageSize := query.Get("pageSize")
	result, err := c.service.GetUnitsByIds(version, trustCode, id, page, pageSize)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

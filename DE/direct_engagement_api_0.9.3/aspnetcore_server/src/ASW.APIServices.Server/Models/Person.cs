/*
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Server.Converters;

namespace ASW.APIServices.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Person : IEquatable<Person>
    { 
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        /// <value>Date of birth</value>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets PersonGender
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<PersonGender>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PersonGender
        {
            
            /// <summary>
            /// Enum MaleEnum for male
            /// </summary>
            [EnumMember(Value = "male")]
            MaleEnum = 1,
            
            /// <summary>
            /// Enum FemaleEnum for female
            /// </summary>
            [EnumMember(Value = "female")]
            FemaleEnum = 2
        }

        /// <summary>
        /// Gets or Sets PersonGender
        /// </summary>
        [DataMember(Name="personGender", EmitDefaultValue=false)]
        public PersonGender PersonGender { get; set; }

        /// <summary>
        /// NINumber.e-mail 
        /// </summary>
        /// <value>NINumber.e-mail </value>
        [DataMember(Name="matchId", EmitDefaultValue=false)]
        public string MatchId { get; set; }

        /// <summary>
        /// Business Key
        /// </summary>
        /// <value>Business Key</value>
        [DataMember(Name="allocatePersonId", EmitDefaultValue=false)]
        public string AllocatePersonId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets TelephoneNumber
        /// </summary>
        [DataMember(Name="telephoneNumber", EmitDefaultValue=false)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExtSystemId
        /// </summary>
        [DataMember(Name="extSystemId", EmitDefaultValue=false)]
        public string ExtSystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  PersonGender: ").Append(PersonGender).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  AllocatePersonId: ").Append(AllocatePersonId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  ExtSystemId: ").Append(ExtSystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Person)obj);
        }

        /// <summary>
        /// Returns true if Person instances are equal
        /// </summary>
        /// <param name="other">Instance of Person to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Person other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    Surname == other.Surname ||
                    Surname != null &&
                    Surname.Equals(other.Surname)
                ) && 
                (
                    DateOfBirth == other.DateOfBirth ||
                    DateOfBirth != null &&
                    DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    PersonGender == other.PersonGender ||
                    
                    PersonGender.Equals(other.PersonGender)
                ) && 
                (
                    MatchId == other.MatchId ||
                    MatchId != null &&
                    MatchId.Equals(other.MatchId)
                ) && 
                (
                    AllocatePersonId == other.AllocatePersonId ||
                    AllocatePersonId != null &&
                    AllocatePersonId.Equals(other.AllocatePersonId)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    TelephoneNumber == other.TelephoneNumber ||
                    TelephoneNumber != null &&
                    TelephoneNumber.Equals(other.TelephoneNumber)
                ) && 
                (
                    ExtSystemId == other.ExtSystemId ||
                    ExtSystemId != null &&
                    ExtSystemId.Equals(other.ExtSystemId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (Surname != null)
                    hashCode = hashCode * 59 + Surname.GetHashCode();
                    if (DateOfBirth != null)
                    hashCode = hashCode * 59 + DateOfBirth.GetHashCode();
                    
                    hashCode = hashCode * 59 + PersonGender.GetHashCode();
                    if (MatchId != null)
                    hashCode = hashCode * 59 + MatchId.GetHashCode();
                    if (AllocatePersonId != null)
                    hashCode = hashCode * 59 + AllocatePersonId.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (TelephoneNumber != null)
                    hashCode = hashCode * 59 + TelephoneNumber.GetHashCode();
                    if (ExtSystemId != null)
                    hashCode = hashCode * 59 + ExtSystemId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Person left, Person right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Person left, Person right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

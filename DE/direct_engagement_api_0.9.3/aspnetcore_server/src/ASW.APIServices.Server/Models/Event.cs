/*
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Server.Converters;

namespace ASW.APIServices.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Event : IEquatable<Event>
    { 
        /// <summary>
        /// Type of change that is done to the entity
        /// </summary>
        /// <value>Type of change that is done to the entity</value>
        [TypeConverter(typeof(CustomEnumConverter<EventTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EventTypeEnum
        {
            
            /// <summary>
            /// Enum CREATEEnum for CREATE
            /// </summary>
            [EnumMember(Value = "CREATE")]
            CREATEEnum = 1,
            
            /// <summary>
            /// Enum DELETEEnum for DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETEEnum = 2,
            
            /// <summary>
            /// Enum UPDATEEnum for UPDATE
            /// </summary>
            [EnumMember(Value = "UPDATE")]
            UPDATEEnum = 3
        }

        /// <summary>
        /// Type of change that is done to the entity
        /// </summary>
        /// <value>Type of change that is done to the entity</value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public EventTypeEnum EventType { get; set; }

        /// <summary>
        /// Entity that is changed.
        /// </summary>
        /// <value>Entity that is changed.</value>
        [TypeConverter(typeof(CustomEnumConverter<EntityTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EntityTypeEnum
        {
            
            /// <summary>
            /// Enum DutyEnum for duty
            /// </summary>
            [EnumMember(Value = "duty")]
            DutyEnum = 1,
            
            /// <summary>
            /// Enum TimesheetEnum for timesheet
            /// </summary>
            [EnumMember(Value = "timesheet")]
            TimesheetEnum = 2,
            
            /// <summary>
            /// Enum BookingEnum for booking
            /// </summary>
            [EnumMember(Value = "booking")]
            BookingEnum = 3,
            
            /// <summary>
            /// Enum GradeEnum for grade
            /// </summary>
            [EnumMember(Value = "grade")]
            GradeEnum = 4,
            
            /// <summary>
            /// Enum AgencyEnum for agency
            /// </summary>
            [EnumMember(Value = "agency")]
            AgencyEnum = 5,
            
            /// <summary>
            /// Enum ReasonForVacancyEnum for reason_for_vacancy
            /// </summary>
            [EnumMember(Value = "reason_for_vacancy")]
            ReasonForVacancyEnum = 6,
            
            /// <summary>
            /// Enum ContractStatusEnum for contract_status
            /// </summary>
            [EnumMember(Value = "contract_status")]
            ContractStatusEnum = 7,
            
            /// <summary>
            /// Enum StaffGroupEnum for staff_group
            /// </summary>
            [EnumMember(Value = "staff_group")]
            StaffGroupEnum = 8,
            
            /// <summary>
            /// Enum UnitEnum for unit
            /// </summary>
            [EnumMember(Value = "unit")]
            UnitEnum = 9
        }

        /// <summary>
        /// Entity that is changed.
        /// </summary>
        /// <value>Entity that is changed.</value>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public EntityTypeEnum EntityType { get; set; }

        /// <summary>
        /// Trust identifier of the changed entity
        /// </summary>
        /// <value>Trust identifier of the changed entity</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Timestamp of the event
        /// </summary>
        /// <value>Timestamp of the event</value>
        [DataMember(Name="timeStamp", EmitDefaultValue=false)]
        public DateTime TimeStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Event)obj);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="other">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EventType == other.EventType ||
                    
                    EventType.Equals(other.EventType)
                ) && 
                (
                    EntityType == other.EntityType ||
                    
                    EntityType.Equals(other.EntityType)
                ) && 
                (
                    EntityId == other.EntityId ||
                    EntityId != null &&
                    EntityId.Equals(other.EntityId)
                ) && 
                (
                    TimeStamp == other.TimeStamp ||
                    TimeStamp != null &&
                    TimeStamp.Equals(other.TimeStamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + EventType.GetHashCode();
                    
                    hashCode = hashCode * 59 + EntityType.GetHashCode();
                    if (EntityId != null)
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                    if (TimeStamp != null)
                    hashCode = hashCode * 59 + TimeStamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Event left, Event right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Event left, Event right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Server.Converters;

namespace ASW.APIServices.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Rates : IEquatable<Rates>
    { 
        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ReferenceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReferenceEnum
        {
            
            /// <summary>
            /// Enum BasicWorkerPayEnum for basic_worker_pay
            /// </summary>
            [EnumMember(Value = "basic_worker_pay")]
            BasicWorkerPayEnum = 1,
            
            /// <summary>
            /// Enum BasicCommissionEnum for basic_commission
            /// </summary>
            [EnumMember(Value = "basic_commission")]
            BasicCommissionEnum = 2,
            
            /// <summary>
            /// Enum BasicNiEnum for basic_ni
            /// </summary>
            [EnumMember(Value = "basic_ni")]
            BasicNiEnum = 3,
            
            /// <summary>
            /// Enum EnhancedWorkerPayEnum for enhanced_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_worker_pay")]
            EnhancedWorkerPayEnum = 4,
            
            /// <summary>
            /// Enum EnhancedCommissionEnum for enhanced_commission
            /// </summary>
            [EnumMember(Value = "enhanced_commission")]
            EnhancedCommissionEnum = 5,
            
            /// <summary>
            /// Enum EnhancedNiEnum for enhanced_ni
            /// </summary>
            [EnumMember(Value = "enhanced_ni")]
            EnhancedNiEnum = 6,
            
            /// <summary>
            /// Enum FixedWorkerPayEnum for fixed_worker_pay
            /// </summary>
            [EnumMember(Value = "fixed_worker_pay")]
            FixedWorkerPayEnum = 7,
            
            /// <summary>
            /// Enum FixedCommissionEnum for fixed_commission
            /// </summary>
            [EnumMember(Value = "fixed_commission")]
            FixedCommissionEnum = 8,
            
            /// <summary>
            /// Enum FixedNiEnum for fixed_ni
            /// </summary>
            [EnumMember(Value = "fixed_ni")]
            FixedNiEnum = 9,
            
            /// <summary>
            /// Enum EnhancedNightWorkerPayEnum for enhanced_night_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_night_worker_pay")]
            EnhancedNightWorkerPayEnum = 10,
            
            /// <summary>
            /// Enum EnhancedNightCommissionEnum for enhanced_night_commission
            /// </summary>
            [EnumMember(Value = "enhanced_night_commission")]
            EnhancedNightCommissionEnum = 11,
            
            /// <summary>
            /// Enum EnhancedNightNiEnum for enhanced_night_ni
            /// </summary>
            [EnumMember(Value = "enhanced_night_ni")]
            EnhancedNightNiEnum = 12,
            
            /// <summary>
            /// Enum EnhancedSaturdayWorkerPayEnum for enhanced_saturday_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_saturday_worker_pay")]
            EnhancedSaturdayWorkerPayEnum = 13,
            
            /// <summary>
            /// Enum EnhancedSaturdayCommissionEnum for enhanced_saturday_commission
            /// </summary>
            [EnumMember(Value = "enhanced_saturday_commission")]
            EnhancedSaturdayCommissionEnum = 14,
            
            /// <summary>
            /// Enum EnhancedSaturdayNiEnum for enhanced_saturday_ni
            /// </summary>
            [EnumMember(Value = "enhanced_saturday_ni")]
            EnhancedSaturdayNiEnum = 15,
            
            /// <summary>
            /// Enum EnhancedSundayWorkerPayEnum for enhanced_sunday_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_sunday_worker_pay")]
            EnhancedSundayWorkerPayEnum = 16,
            
            /// <summary>
            /// Enum EnhancedSundayCommissionEnum for enhanced_sunday_commission
            /// </summary>
            [EnumMember(Value = "enhanced_sunday_commission")]
            EnhancedSundayCommissionEnum = 17,
            
            /// <summary>
            /// Enum EnhancedSundayNiEnum for enhanced_sunday_ni
            /// </summary>
            [EnumMember(Value = "enhanced_sunday_ni")]
            EnhancedSundayNiEnum = 18,
            
            /// <summary>
            /// Enum EnhancedHolidayWorkerPayEnum for enhanced_holiday_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_holiday_worker_pay")]
            EnhancedHolidayWorkerPayEnum = 19,
            
            /// <summary>
            /// Enum EnhancedHolidayCommissionEnum for enhanced_holiday_commission
            /// </summary>
            [EnumMember(Value = "enhanced_holiday_commission")]
            EnhancedHolidayCommissionEnum = 20,
            
            /// <summary>
            /// Enum EnhancedHolidayNiEnum for enhanced_holiday_ni
            /// </summary>
            [EnumMember(Value = "enhanced_holiday_ni")]
            EnhancedHolidayNiEnum = 21
        }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public ReferenceEnum Reference { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rates {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Rates)obj);
        }

        /// <summary>
        /// Returns true if Rates instances are equal
        /// </summary>
        /// <param name="other">Instance of Rates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rates other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Reference == other.Reference ||
                    
                    Reference.Equals(other.Reference)
                ) && 
                (
                    Rate == other.Rate ||
                    
                    Rate.Equals(other.Rate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                    
                    hashCode = hashCode * 59 + Rate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Rates left, Rates right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Rates left, Rates right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

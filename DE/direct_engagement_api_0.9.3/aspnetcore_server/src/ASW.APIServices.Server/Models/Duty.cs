/*
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Server.Converters;

namespace ASW.APIServices.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Duty : IEquatable<Duty>
    { 
        /// <summary>
        /// Trust identifier of the duty
        /// </summary>
        /// <value>Trust identifier of the duty</value>
        [DataMember(Name="dutyId", EmitDefaultValue=false)]
        public string DutyId { get; set; }

        /// <summary>
        /// Identifier of the slave duty if duty is part of consolidated duties
        /// </summary>
        /// <value>Identifier of the slave duty if duty is part of consolidated duties</value>
        [DataMember(Name="slaveDutyId", EmitDefaultValue=false)]
        public string SlaveDutyId { get; set; }

        /// <summary>
        /// Identifier of block duties if duty is part of the block
        /// </summary>
        /// <value>Identifier of block duties if duty is part of the block</value>
        [DataMember(Name="blockId", EmitDefaultValue=false)]
        public string BlockId { get; set; }

        /// <summary>
        /// BankStaff ward trust identifier
        /// </summary>
        /// <value>BankStaff ward trust identifier</value>
        [DataMember(Name="clientDeptId", EmitDefaultValue=false)]
        public string ClientDeptId { get; set; }

        /// <summary>
        /// Staff group trust identifier
        /// </summary>
        /// <value>Staff group trust identifier</value>
        [DataMember(Name="subDiscipline", EmitDefaultValue=false)]
        public string SubDiscipline { get; set; }

        /// <summary>
        /// Gets or Sets RequestGender
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<RequestGender>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RequestGender
        {
            
            /// <summary>
            /// Enum MaleEnum for male
            /// </summary>
            [EnumMember(Value = "male")]
            MaleEnum = 1,
            
            /// <summary>
            /// Enum FemaleEnum for female
            /// </summary>
            [EnumMember(Value = "female")]
            FemaleEnum = 2
        }

        /// <summary>
        /// Gets or Sets RequestGender
        /// </summary>
        [DataMember(Name="requestGender", EmitDefaultValue=false)]
        public RequestGender RequestGender { get; set; }

        /// <summary>
        /// Grade trust identifier of the request
        /// </summary>
        /// <value>Grade trust identifier of the request</value>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or Sets FallbackGrade
        /// </summary>
        [DataMember(Name="fallbackGrade", EmitDefaultValue=false)]
        public string FallbackGrade { get; set; }

        /// <summary>
        /// Gets or Sets VacancyReason
        /// </summary>
        [DataMember(Name="vacancyReason", EmitDefaultValue=false)]
        public string VacancyReason { get; set; }

        /// <summary>
        /// Date of the duty
        /// </summary>
        /// <value>Date of the duty</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Start time of the shift
        /// </summary>
        /// <value>Start time of the shift</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// End time of the shift
        /// </summary>
        /// <value>End time of the shift</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Duration of break in minutes
        /// </summary>
        /// <value>Duration of break in minutes</value>
        [DataMember(Name="breakDuration", EmitDefaultValue=false)]
        public int BreakDuration { get; set; }

        /// <summary>
        /// Need to understand if needed from Trust/Agency
        /// </summary>
        /// <value>Need to understand if needed from Trust/Agency</value>
        [DataMember(Name="poNumber", EmitDefaultValue=false)]
        public int PoNumber { get; set; }

        /// <summary>
        /// BRN / Unique number
        /// </summary>
        /// <value>BRN / Unique number</value>
        [DataMember(Name="uniqueNumber", EmitDefaultValue=false)]
        public int UniqueNumber { get; set; }

        /// <summary>
        /// Supplying agency trust identifier
        /// </summary>
        /// <value>Supplying agency trust identifier</value>
        [DataMember(Name="agency", EmitDefaultValue=false)]
        public string Agency { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="skill", EmitDefaultValue=false)]
        public string Skill { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="specialty", EmitDefaultValue=false)]
        public string Specialty { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="fallbackSkill", EmitDefaultValue=false)]
        public string FallbackSkill { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="fallbackSpeciality", EmitDefaultValue=false)]
        public string FallbackSpeciality { get; set; }

        /// <summary>
        /// Will need to understand if duty is no longer required and cancel on DE Provider
        /// </summary>
        /// <value>Will need to understand if duty is no longer required and cancel on DE Provider</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ActiveEnum for active
            /// </summary>
            [EnumMember(Value = "active")]
            ActiveEnum = 1,
            
            /// <summary>
            /// Enum CancelledEnum for cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            CancelledEnum = 2
        }

        /// <summary>
        /// Will need to understand if duty is no longer required and cancel on DE Provider
        /// </summary>
        /// <value>Will need to understand if duty is no longer required and cancel on DE Provider</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency
        /// </summary>
        /// <value>Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency</value>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public List<Rates> Rates { get; set; }

        /// <summary>
        /// Array of rates and intervals for which the rate is applied
        /// </summary>
        /// <value>Array of rates and intervals for which the rate is applied</value>
        [DataMember(Name="timeIntervalRates", EmitDefaultValue=false)]
        public List<TimeIntervalRates> TimeIntervalRates { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public Person Person { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Duty {\n");
            sb.Append("  DutyId: ").Append(DutyId).Append("\n");
            sb.Append("  SlaveDutyId: ").Append(SlaveDutyId).Append("\n");
            sb.Append("  BlockId: ").Append(BlockId).Append("\n");
            sb.Append("  ClientDeptId: ").Append(ClientDeptId).Append("\n");
            sb.Append("  SubDiscipline: ").Append(SubDiscipline).Append("\n");
            sb.Append("  RequestGender: ").Append(RequestGender).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  FallbackGrade: ").Append(FallbackGrade).Append("\n");
            sb.Append("  VacancyReason: ").Append(VacancyReason).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  BreakDuration: ").Append(BreakDuration).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  UniqueNumber: ").Append(UniqueNumber).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  Skill: ").Append(Skill).Append("\n");
            sb.Append("  Specialty: ").Append(Specialty).Append("\n");
            sb.Append("  FallbackSkill: ").Append(FallbackSkill).Append("\n");
            sb.Append("  FallbackSpeciality: ").Append(FallbackSpeciality).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  TimeIntervalRates: ").Append(TimeIntervalRates).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Duty)obj);
        }

        /// <summary>
        /// Returns true if Duty instances are equal
        /// </summary>
        /// <param name="other">Instance of Duty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Duty other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DutyId == other.DutyId ||
                    DutyId != null &&
                    DutyId.Equals(other.DutyId)
                ) && 
                (
                    SlaveDutyId == other.SlaveDutyId ||
                    SlaveDutyId != null &&
                    SlaveDutyId.Equals(other.SlaveDutyId)
                ) && 
                (
                    BlockId == other.BlockId ||
                    BlockId != null &&
                    BlockId.Equals(other.BlockId)
                ) && 
                (
                    ClientDeptId == other.ClientDeptId ||
                    ClientDeptId != null &&
                    ClientDeptId.Equals(other.ClientDeptId)
                ) && 
                (
                    SubDiscipline == other.SubDiscipline ||
                    SubDiscipline != null &&
                    SubDiscipline.Equals(other.SubDiscipline)
                ) && 
                (
                    RequestGender == other.RequestGender ||
                    
                    RequestGender.Equals(other.RequestGender)
                ) && 
                (
                    Grade == other.Grade ||
                    Grade != null &&
                    Grade.Equals(other.Grade)
                ) && 
                (
                    FallbackGrade == other.FallbackGrade ||
                    FallbackGrade != null &&
                    FallbackGrade.Equals(other.FallbackGrade)
                ) && 
                (
                    VacancyReason == other.VacancyReason ||
                    VacancyReason != null &&
                    VacancyReason.Equals(other.VacancyReason)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    BreakDuration == other.BreakDuration ||
                    
                    BreakDuration.Equals(other.BreakDuration)
                ) && 
                (
                    PoNumber == other.PoNumber ||
                    
                    PoNumber.Equals(other.PoNumber)
                ) && 
                (
                    UniqueNumber == other.UniqueNumber ||
                    
                    UniqueNumber.Equals(other.UniqueNumber)
                ) && 
                (
                    Agency == other.Agency ||
                    Agency != null &&
                    Agency.Equals(other.Agency)
                ) && 
                (
                    Skill == other.Skill ||
                    Skill != null &&
                    Skill.Equals(other.Skill)
                ) && 
                (
                    Specialty == other.Specialty ||
                    Specialty != null &&
                    Specialty.Equals(other.Specialty)
                ) && 
                (
                    FallbackSkill == other.FallbackSkill ||
                    FallbackSkill != null &&
                    FallbackSkill.Equals(other.FallbackSkill)
                ) && 
                (
                    FallbackSpeciality == other.FallbackSpeciality ||
                    FallbackSpeciality != null &&
                    FallbackSpeciality.Equals(other.FallbackSpeciality)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Rates == other.Rates ||
                    Rates != null &&
                    other.Rates != null &&
                    Rates.SequenceEqual(other.Rates)
                ) && 
                (
                    TimeIntervalRates == other.TimeIntervalRates ||
                    TimeIntervalRates != null &&
                    other.TimeIntervalRates != null &&
                    TimeIntervalRates.SequenceEqual(other.TimeIntervalRates)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.Equals(other.Person)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DutyId != null)
                    hashCode = hashCode * 59 + DutyId.GetHashCode();
                    if (SlaveDutyId != null)
                    hashCode = hashCode * 59 + SlaveDutyId.GetHashCode();
                    if (BlockId != null)
                    hashCode = hashCode * 59 + BlockId.GetHashCode();
                    if (ClientDeptId != null)
                    hashCode = hashCode * 59 + ClientDeptId.GetHashCode();
                    if (SubDiscipline != null)
                    hashCode = hashCode * 59 + SubDiscipline.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequestGender.GetHashCode();
                    if (Grade != null)
                    hashCode = hashCode * 59 + Grade.GetHashCode();
                    if (FallbackGrade != null)
                    hashCode = hashCode * 59 + FallbackGrade.GetHashCode();
                    if (VacancyReason != null)
                    hashCode = hashCode * 59 + VacancyReason.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + BreakDuration.GetHashCode();
                    
                    hashCode = hashCode * 59 + PoNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + UniqueNumber.GetHashCode();
                    if (Agency != null)
                    hashCode = hashCode * 59 + Agency.GetHashCode();
                    if (Skill != null)
                    hashCode = hashCode * 59 + Skill.GetHashCode();
                    if (Specialty != null)
                    hashCode = hashCode * 59 + Specialty.GetHashCode();
                    if (FallbackSkill != null)
                    hashCode = hashCode * 59 + FallbackSkill.GetHashCode();
                    if (FallbackSpeciality != null)
                    hashCode = hashCode * 59 + FallbackSpeciality.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Rates != null)
                    hashCode = hashCode * 59 + Rates.GetHashCode();
                    if (TimeIntervalRates != null)
                    hashCode = hashCode * 59 + TimeIntervalRates.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Duty left, Duty right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Duty left, Duty right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

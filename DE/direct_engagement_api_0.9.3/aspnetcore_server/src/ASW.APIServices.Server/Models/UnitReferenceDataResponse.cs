/*
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ASW.APIServices.Server.Converters;

namespace ASW.APIServices.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UnitReferenceDataResponse : IEquatable<UnitReferenceDataResponse>
    { 
        /// <summary>
        /// Reference data trust identifier from BankStaff
        /// </summary>
        /// <value>Reference data trust identifier from BankStaff</value>
        [DataMember(Name="refId", EmitDefaultValue=false)]
        public string RefId { get; set; }

        /// <summary>
        /// Reference data description from BankStaff
        /// </summary>
        /// <value>Reference data description from BankStaff</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Location of the unit from BankStaff
        /// </summary>
        /// <value>Location of the unit from BankStaff</value>
        [DataMember(Name="unitSite", EmitDefaultValue=false)]
        public string UnitSite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnitReferenceDataResponse {\n");
            sb.Append("  RefId: ").Append(RefId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  UnitSite: ").Append(UnitSite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UnitReferenceDataResponse)obj);
        }

        /// <summary>
        /// Returns true if UnitReferenceDataResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of UnitReferenceDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnitReferenceDataResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RefId == other.RefId ||
                    RefId != null &&
                    RefId.Equals(other.RefId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    UnitSite == other.UnitSite ||
                    UnitSite != null &&
                    UnitSite.Equals(other.UnitSite)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RefId != null)
                    hashCode = hashCode * 59 + RefId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (UnitSite != null)
                    hashCode = hashCode * 59 + UnitSite.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UnitReferenceDataResponse left, UnitReferenceDataResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UnitReferenceDataResponse left, UnitReferenceDataResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

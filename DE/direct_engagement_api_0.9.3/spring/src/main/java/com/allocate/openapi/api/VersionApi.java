/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.allocate.openapi.api;

import com.allocate.openapi.model.BookingInfo;
import com.allocate.openapi.model.BookingResponse;
import com.allocate.openapi.model.ContractStatus;
import com.allocate.openapi.model.Duty;
import com.allocate.openapi.model.InlineObject;
import java.time.OffsetDateTime;
import com.allocate.openapi.model.ReferenceDataResponse;
import com.allocate.openapi.model.UnitReferenceDataResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-01-09T13:37:09.334042Z[Europe/London]")

@Validated
@Api(value = "{version}", description = "the {version} API")
public interface VersionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Cancel a duty", nickname = "cancelDuty", notes = "Service that cancels certain duty.", tags={ "duty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust/Duty not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel",
        produces = { "text/plain" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Void> cancelDuty(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "ID of the duty associated with the DE contract",required=true) @PathVariable("dutyId") Integer dutyId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Creates booking for duty", nickname = "fillDuty", notes = "Service that will create new booking on HR side with data sent by DE Provider.", response = BookingResponse.class, tags={ "duty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = BookingResponse.class),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust/Duty not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/duty/{dutyId}/booking",
        produces = { "application/json", "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<BookingResponse> fillDuty(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "ID of the duty associated with the DE contract",required=true) @PathVariable("dutyId") Integer dutyId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody BookingInfo bookingInfo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allocatePersonId\" : \"TrustA.1126\", \"dutyId\" : \"TrustA.11667\", \"masterDutyId\" : \"TrustA.11668\", \"bookingId\" : \"TrustA.33532\", \"slaveDutyId\" : \"TrustA.11667\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get agencies", nickname = "getAgenciesByIds", notes = "Returns an array of agencies", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/agency/",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getAgenciesByIds(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "Array of reference data IDs to return", required = true) @Valid @RequestParam(value = "id", required = true) List<Integer> id,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all agencies", nickname = "getAllAgencies", notes = "Returns an array of agencies", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/agency",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getAllAgencies(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all contract statuses", nickname = "getAllContractStatuses", notes = "Returns an array of contract statuses.", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/contractStatus",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getAllContractStatuses(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all grades", nickname = "getAllGrades", notes = "Returns an array of grades", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/grade",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getAllGrades(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all reasons for vacancy", nickname = "getAllReasonsForVacancy", notes = "Returns an array of reasons for vacancy", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getAllReasonsForVacancy(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all staff groups", nickname = "getAllStaffGroups", notes = "Returns an array of staff groups", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/staffGroup",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getAllStaffGroups(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all units", nickname = "getAllUnits", notes = "Returns an array of units", response = UnitReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UnitReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/unit",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UnitReferenceDataResponse>> getAllUnits(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitSite\" : \"Unit site\", \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get contract statuses", nickname = "getContractStatusesByIds", notes = "Returns an array of contract statuses", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/contractStatus/",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getContractStatusesByIds(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "Array of reference data IDs to return", required = true) @Valid @RequestParam(value = "id", required = true) List<String> id,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Returns details about a duties.", nickname = "getDutyDetails", notes = "Returns details about a duties.", response = Duty.class, tags={ "duty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Duty.class),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/duty/",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Duty> getDutyDetails(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "IDs of the duties to return", required = true) @Valid @RequestParam(value = "id", required = true) List<Integer> id,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"specialty\" : \"Speciality\", \"timeIntervalRates\" : [ { \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"clientDeptId\" : \"TrustA.667899\", \"agency\" : \"TrustA.2209\", \"requestGender\" : \"male\", \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"fallbackGrade\" : \"TrustA.9989\", \"fallbackSkill\" : \"Fallback skill\", \"vacancyReason\" : \"TrustA.12\", \"blockId\" : \"TrustA.77569\", \"fallbackSpeciality\" : \"Fallback speciality\", \"subDiscipline\" : \"TrustA.1323\", \"person\" : { \"allocatePersonId\" : \"TrustA.1123\", \"firstName\" : \"Doe\", \"telephoneNumber\" : \"+223504938839\", \"surname\" : \"John\", \"extSystemId\" : \"123e4567-e89b-12d3-a456-426655440000\", \"personGender\" : \"male\", \"dateOfBirth\" : \"2000-01-23\", \"matchId\" : \"E124RT562.john.doe@mail.com\", \"email\" : \"john.doe@mail.com\" }, \"grade\" : \"TrustA.77889\", \"skill\" : \"Skill\", \"breakDuration\" : 30, \"dutyId\" : \"TrustA.11667\", \"startTime\" : \"22:00\", \"endTime\" : \"01:25\", \"uniqueNumber\" : 112233, \"poNumber\" : 0, \"slaveDutyId\" : \"TrustA.77569\", \"status\" : \"active\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get all events older than input timestamp", nickname = "getEvents", notes = "Returns an array of events", response = Duty.class, tags={ "event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Duty.class),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/event",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Duty> getEvents(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "Timestamp", required = true) @Valid @RequestParam(value = "dateTimeFrom", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateTimeFrom,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"specialty\" : \"Speciality\", \"timeIntervalRates\" : [ { \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"clientDeptId\" : \"TrustA.667899\", \"agency\" : \"TrustA.2209\", \"requestGender\" : \"male\", \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"fallbackGrade\" : \"TrustA.9989\", \"fallbackSkill\" : \"Fallback skill\", \"vacancyReason\" : \"TrustA.12\", \"blockId\" : \"TrustA.77569\", \"fallbackSpeciality\" : \"Fallback speciality\", \"subDiscipline\" : \"TrustA.1323\", \"person\" : { \"allocatePersonId\" : \"TrustA.1123\", \"firstName\" : \"Doe\", \"telephoneNumber\" : \"+223504938839\", \"surname\" : \"John\", \"extSystemId\" : \"123e4567-e89b-12d3-a456-426655440000\", \"personGender\" : \"male\", \"dateOfBirth\" : \"2000-01-23\", \"matchId\" : \"E124RT562.john.doe@mail.com\", \"email\" : \"john.doe@mail.com\" }, \"grade\" : \"TrustA.77889\", \"skill\" : \"Skill\", \"breakDuration\" : 30, \"dutyId\" : \"TrustA.11667\", \"startTime\" : \"22:00\", \"endTime\" : \"01:25\", \"uniqueNumber\" : 112233, \"poNumber\" : 0, \"slaveDutyId\" : \"TrustA.77569\", \"status\" : \"active\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get grades", nickname = "getGradesByIds", notes = "Returns an array of grades", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/grade/",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getGradesByIds(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "Array of reference data IDs to return", required = true) @Valid @RequestParam(value = "id", required = true) List<Integer> id,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get reasons for vacancy", nickname = "getReasonsForVacancyByIds", notes = "Returns an array of reasons for vacancy", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy/",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getReasonsForVacancyByIds(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "Array of reference data IDs to return", required = true) @Valid @RequestParam(value = "id", required = true) List<Integer> id,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Returns details about a duties.", nickname = "getSingleDutyDetails", notes = "Returns details about a duties.", response = Duty.class, tags={ "duty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Duty.class),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/duty/{dutyId}",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Duty> getSingleDutyDetails(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "ID of a duty to return",required=true) @PathVariable("dutyId") Integer dutyId,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2000-01-23\", \"specialty\" : \"Speciality\", \"timeIntervalRates\" : [ { \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"startTime\" : \"2000-01-23T04:56:07.000+00:00\", \"endTime\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"clientDeptId\" : \"TrustA.667899\", \"agency\" : \"TrustA.2209\", \"requestGender\" : \"male\", \"rates\" : [ { \"reference\" : \"basic_commission\", \"rate\" : 50.00 }, { \"reference\" : \"basic_commission\", \"rate\" : 50.00 } ], \"fallbackGrade\" : \"TrustA.9989\", \"fallbackSkill\" : \"Fallback skill\", \"vacancyReason\" : \"TrustA.12\", \"blockId\" : \"TrustA.77569\", \"fallbackSpeciality\" : \"Fallback speciality\", \"subDiscipline\" : \"TrustA.1323\", \"person\" : { \"allocatePersonId\" : \"TrustA.1123\", \"firstName\" : \"Doe\", \"telephoneNumber\" : \"+223504938839\", \"surname\" : \"John\", \"extSystemId\" : \"123e4567-e89b-12d3-a456-426655440000\", \"personGender\" : \"male\", \"dateOfBirth\" : \"2000-01-23\", \"matchId\" : \"E124RT562.john.doe@mail.com\", \"email\" : \"john.doe@mail.com\" }, \"grade\" : \"TrustA.77889\", \"skill\" : \"Skill\", \"breakDuration\" : 30, \"dutyId\" : \"TrustA.11667\", \"startTime\" : \"22:00\", \"endTime\" : \"01:25\", \"uniqueNumber\" : 112233, \"poNumber\" : 0, \"slaveDutyId\" : \"TrustA.77569\", \"status\" : \"active\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get staff groups", nickname = "getStaffGroupsByIds", notes = "Returns an array of staff groups", response = ReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/staffGroup/",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ReferenceDataResponse>> getStaffGroupsByIds(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "Array of reference data IDs to return", required = true) @Valid @RequestParam(value = "id", required = true) List<Integer> id,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get units", nickname = "getUnitsByIds", notes = "Returns an array of units", response = UnitReferenceDataResponse.class, responseContainer = "List", tags={ "referenceData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UnitReferenceDataResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/referenceData/unit/",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<UnitReferenceDataResponse>> getUnitsByIds(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@NotNull @ApiParam(value = "Array of reference data IDs to return", required = true) @Valid @RequestParam(value = "id", required = true) List<Integer> id,@ApiParam(value = "Result page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Count of records per page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"unitSite\" : \"Unit site\", \"description\" : \"Description\", \"refId\" : \"TrustA.12\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Updates DE Contract status", nickname = "updateContractStatus", notes = "Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.", tags={ "duty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust/Duty not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}",
        produces = { "text/plain" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateContractStatus(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "ID of the duty associated with the DE contract",required=true) @PathVariable("dutyId") Integer dutyId,@ApiParam(value = "ID of the contract from DE Provider's system",required=true) @PathVariable("contractId") String contractId,@ApiParam(value = "",required=true, allowableValues = "\"not_initiated\", \"in_progress\", \"pending\", \"active\", \"nonactive\"") @PathVariable("statusId") ContractStatus statusId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Updates timesheet for duty", nickname = "updateTimesheets", notes = "Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.", tags={ "duty", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad request errors", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Trust/Duty not found") })
    @RequestMapping(value = "/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateTimesheets(@ApiParam(value = "API version",required=true) @PathVariable("version") String version,@ApiParam(value = "Trust code from BankStaff",required=true) @PathVariable("trustCode") String trustCode,@ApiParam(value = "ID of the duty associated with the DE contract",required=true) @PathVariable("dutyId") Integer dutyId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject inlineObject) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

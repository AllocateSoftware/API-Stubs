/*
 * DE Provider Direct Engagement API
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.ReferenceDataResponse;
import com.allocate.openapi.model.UnitReferenceDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReferenceDataApi {
    private ApiClient localVarApiClient;

    public ReferenceDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReferenceDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAgenciesByIds
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAgenciesByIdsCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/agency/"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAgenciesByIdsValidateBeforeCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getAgenciesByIds(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getAgenciesByIds(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAgenciesByIds(Async)");
        }
        

        okhttp3.Call localVarCall = getAgenciesByIdsCall(version, trustCode, id, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get agencies
     * Returns an array of agencies
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getAgenciesByIds(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getAgenciesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get agencies
     * Returns an array of agencies
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getAgenciesByIdsWithHttpInfo(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAgenciesByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get agencies (asynchronously)
     * Returns an array of agencies
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAgenciesByIdsAsync(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAgenciesByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAgencies
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAgenciesCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/agency"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAgenciesValidateBeforeCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getAllAgencies(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getAllAgencies(Async)");
        }
        

        okhttp3.Call localVarCall = getAllAgenciesCall(version, trustCode, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get all agencies
     * Returns an array of agencies
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getAllAgencies(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getAllAgenciesWithHttpInfo(version, trustCode, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all agencies
     * Returns an array of agencies
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getAllAgenciesWithHttpInfo(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllAgenciesValidateBeforeCall(version, trustCode, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all agencies (asynchronously)
     * Returns an array of agencies
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAgenciesAsync(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAgenciesValidateBeforeCall(version, trustCode, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllContractStatuses
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllContractStatusesCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/contractStatus"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllContractStatusesValidateBeforeCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getAllContractStatuses(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getAllContractStatuses(Async)");
        }
        

        okhttp3.Call localVarCall = getAllContractStatusesCall(version, trustCode, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get all contract statuses
     * Returns an array of contract statuses.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getAllContractStatuses(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getAllContractStatusesWithHttpInfo(version, trustCode, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all contract statuses
     * Returns an array of contract statuses.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getAllContractStatusesWithHttpInfo(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllContractStatusesValidateBeforeCall(version, trustCode, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all contract statuses (asynchronously)
     * Returns an array of contract statuses.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllContractStatusesAsync(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllContractStatusesValidateBeforeCall(version, trustCode, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllGrades
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGradesCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/grade"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGradesValidateBeforeCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getAllGrades(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getAllGrades(Async)");
        }
        

        okhttp3.Call localVarCall = getAllGradesCall(version, trustCode, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get all grades
     * Returns an array of grades
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getAllGrades(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getAllGradesWithHttpInfo(version, trustCode, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all grades
     * Returns an array of grades
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getAllGradesWithHttpInfo(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllGradesValidateBeforeCall(version, trustCode, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all grades (asynchronously)
     * Returns an array of grades
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllGradesAsync(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGradesValidateBeforeCall(version, trustCode, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllReasonsForVacancy
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllReasonsForVacancyCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllReasonsForVacancyValidateBeforeCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getAllReasonsForVacancy(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getAllReasonsForVacancy(Async)");
        }
        

        okhttp3.Call localVarCall = getAllReasonsForVacancyCall(version, trustCode, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get all reasons for vacancy
     * Returns an array of reasons for vacancy
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getAllReasonsForVacancy(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getAllReasonsForVacancyWithHttpInfo(version, trustCode, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all reasons for vacancy
     * Returns an array of reasons for vacancy
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getAllReasonsForVacancyWithHttpInfo(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllReasonsForVacancyValidateBeforeCall(version, trustCode, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all reasons for vacancy (asynchronously)
     * Returns an array of reasons for vacancy
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllReasonsForVacancyAsync(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllReasonsForVacancyValidateBeforeCall(version, trustCode, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllStaffGroups
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllStaffGroupsCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/staffGroup"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllStaffGroupsValidateBeforeCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getAllStaffGroups(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getAllStaffGroups(Async)");
        }
        

        okhttp3.Call localVarCall = getAllStaffGroupsCall(version, trustCode, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get all staff groups
     * Returns an array of staff groups
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getAllStaffGroups(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getAllStaffGroupsWithHttpInfo(version, trustCode, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all staff groups
     * Returns an array of staff groups
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getAllStaffGroupsWithHttpInfo(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllStaffGroupsValidateBeforeCall(version, trustCode, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all staff groups (asynchronously)
     * Returns an array of staff groups
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllStaffGroupsAsync(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllStaffGroupsValidateBeforeCall(version, trustCode, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllUnits
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUnitsCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/unit"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUnitsValidateBeforeCall(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getAllUnits(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getAllUnits(Async)");
        }
        

        okhttp3.Call localVarCall = getAllUnitsCall(version, trustCode, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get all units
     * Returns an array of units
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;UnitReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<UnitReferenceDataResponse> getAllUnits(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<UnitReferenceDataResponse>> localVarResp = getAllUnitsWithHttpInfo(version, trustCode, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all units
     * Returns an array of units
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;UnitReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UnitReferenceDataResponse>> getAllUnitsWithHttpInfo(String version, String trustCode, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllUnitsValidateBeforeCall(version, trustCode, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<UnitReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all units (asynchronously)
     * Returns an array of units
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUnitsAsync(String version, String trustCode, Integer page, Integer pageSize, final ApiCallback<List<UnitReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUnitsValidateBeforeCall(version, trustCode, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<UnitReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractStatusesByIds
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractStatusesByIdsCall(String version, String trustCode, List<String> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/contractStatus/"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractStatusesByIdsValidateBeforeCall(String version, String trustCode, List<String> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getContractStatusesByIds(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getContractStatusesByIds(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContractStatusesByIds(Async)");
        }
        

        okhttp3.Call localVarCall = getContractStatusesByIdsCall(version, trustCode, id, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get contract statuses
     * Returns an array of contract statuses
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getContractStatusesByIds(String version, String trustCode, List<String> id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getContractStatusesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get contract statuses
     * Returns an array of contract statuses
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getContractStatusesByIdsWithHttpInfo(String version, String trustCode, List<String> id, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getContractStatusesByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contract statuses (asynchronously)
     * Returns an array of contract statuses
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractStatusesByIdsAsync(String version, String trustCode, List<String> id, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractStatusesByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGradesByIds
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGradesByIdsCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/grade/"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGradesByIdsValidateBeforeCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getGradesByIds(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getGradesByIds(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGradesByIds(Async)");
        }
        

        okhttp3.Call localVarCall = getGradesByIdsCall(version, trustCode, id, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get grades
     * Returns an array of grades
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getGradesByIds(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getGradesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get grades
     * Returns an array of grades
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getGradesByIdsWithHttpInfo(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getGradesByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get grades (asynchronously)
     * Returns an array of grades
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGradesByIdsAsync(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGradesByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReasonsForVacancyByIds
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsForVacancyByIdsCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy/"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReasonsForVacancyByIdsValidateBeforeCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getReasonsForVacancyByIds(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getReasonsForVacancyByIds(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getReasonsForVacancyByIds(Async)");
        }
        

        okhttp3.Call localVarCall = getReasonsForVacancyByIdsCall(version, trustCode, id, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get reasons for vacancy
     * Returns an array of reasons for vacancy
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getReasonsForVacancyByIds(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getReasonsForVacancyByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get reasons for vacancy
     * Returns an array of reasons for vacancy
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getReasonsForVacancyByIdsWithHttpInfo(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getReasonsForVacancyByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get reasons for vacancy (asynchronously)
     * Returns an array of reasons for vacancy
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReasonsForVacancyByIdsAsync(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReasonsForVacancyByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStaffGroupsByIds
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStaffGroupsByIdsCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/staffGroup/"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStaffGroupsByIdsValidateBeforeCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getStaffGroupsByIds(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getStaffGroupsByIds(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStaffGroupsByIds(Async)");
        }
        

        okhttp3.Call localVarCall = getStaffGroupsByIdsCall(version, trustCode, id, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get staff groups
     * Returns an array of staff groups
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;ReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ReferenceDataResponse> getStaffGroupsByIds(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<ReferenceDataResponse>> localVarResp = getStaffGroupsByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get staff groups
     * Returns an array of staff groups
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;ReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReferenceDataResponse>> getStaffGroupsByIdsWithHttpInfo(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getStaffGroupsByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get staff groups (asynchronously)
     * Returns an array of staff groups
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStaffGroupsByIdsAsync(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback<List<ReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStaffGroupsByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<ReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUnitsByIds
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnitsByIdsCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/referenceData/unit/"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnitsByIdsValidateBeforeCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getUnitsByIds(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getUnitsByIds(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUnitsByIds(Async)");
        }
        

        okhttp3.Call localVarCall = getUnitsByIdsCall(version, trustCode, id, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get units
     * Returns an array of units
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return List&lt;UnitReferenceDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public List<UnitReferenceDataResponse> getUnitsByIds(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<UnitReferenceDataResponse>> localVarResp = getUnitsByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get units
     * Returns an array of units
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;List&lt;UnitReferenceDataResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UnitReferenceDataResponse>> getUnitsByIdsWithHttpInfo(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getUnitsByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<UnitReferenceDataResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get units (asynchronously)
     * Returns an array of units
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id Array of reference data IDs to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUnitsByIdsAsync(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback<List<UnitReferenceDataResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnitsByIdsValidateBeforeCall(version, trustCode, id, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<UnitReferenceDataResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

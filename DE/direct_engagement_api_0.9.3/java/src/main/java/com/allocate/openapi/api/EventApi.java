/*
 * DE Provider Direct Engagement API
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.Duty;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventApi {
    private ApiClient localVarApiClient;

    public EventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getEvents
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dateTimeFrom Timestamp (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsCall(String version, String trustCode, OffsetDateTime dateTimeFrom, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/event"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dateTimeFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeFrom", dateTimeFrom));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsValidateBeforeCall(String version, String trustCode, OffsetDateTime dateTimeFrom, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getEvents(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getEvents(Async)");
        }
        
        // verify the required parameter 'dateTimeFrom' is set
        if (dateTimeFrom == null) {
            throw new ApiException("Missing the required parameter 'dateTimeFrom' when calling getEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getEventsCall(version, trustCode, dateTimeFrom, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get all events older than input timestamp
     * Returns an array of events
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dateTimeFrom Timestamp (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return Duty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public Duty getEvents(String version, String trustCode, OffsetDateTime dateTimeFrom, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Duty> localVarResp = getEventsWithHttpInfo(version, trustCode, dateTimeFrom, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get all events older than input timestamp
     * Returns an array of events
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dateTimeFrom Timestamp (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;Duty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Duty> getEventsWithHttpInfo(String version, String trustCode, OffsetDateTime dateTimeFrom, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getEventsValidateBeforeCall(version, trustCode, dateTimeFrom, page, pageSize, null);
        Type localVarReturnType = new TypeToken<Duty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all events older than input timestamp (asynchronously)
     * Returns an array of events
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dateTimeFrom Timestamp (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsAsync(String version, String trustCode, OffsetDateTime dateTimeFrom, Integer page, Integer pageSize, final ApiCallback<Duty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsValidateBeforeCall(version, trustCode, dateTimeFrom, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Duty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

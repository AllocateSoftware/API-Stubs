/*
 * DE Provider Direct Engagement API
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.allocate.openapi.api;

import com.allocate.openapi.ApiCallback;
import com.allocate.openapi.ApiClient;
import com.allocate.openapi.ApiException;
import com.allocate.openapi.ApiResponse;
import com.allocate.openapi.Configuration;
import com.allocate.openapi.Pair;
import com.allocate.openapi.ProgressRequestBody;
import com.allocate.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.allocate.openapi.model.BookingInfo;
import com.allocate.openapi.model.BookingResponse;
import com.allocate.openapi.model.ContractStatus;
import com.allocate.openapi.model.Duty;
import com.allocate.openapi.model.InlineObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DutyApi {
    private ApiClient localVarApiClient;

    public DutyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DutyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelDuty
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDutyCall(String version, String trustCode, Integer dutyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()))
            .replaceAll("\\{" + "dutyId" + "\\}", localVarApiClient.escapeString(dutyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDutyValidateBeforeCall(String version, String trustCode, Integer dutyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling cancelDuty(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling cancelDuty(Async)");
        }
        
        // verify the required parameter 'dutyId' is set
        if (dutyId == null) {
            throw new ApiException("Missing the required parameter 'dutyId' when calling cancelDuty(Async)");
        }
        

        okhttp3.Call localVarCall = cancelDutyCall(version, trustCode, dutyId, _callback);
        return localVarCall;

    }

    /**
     * Cancel a duty
     * Service that cancels certain duty.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public void cancelDuty(String version, String trustCode, Integer dutyId) throws ApiException {
        cancelDutyWithHttpInfo(version, trustCode, dutyId);
    }

    /**
     * Cancel a duty
     * Service that cancels certain duty.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelDutyWithHttpInfo(String version, String trustCode, Integer dutyId) throws ApiException {
        okhttp3.Call localVarCall = cancelDutyValidateBeforeCall(version, trustCode, dutyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel a duty (asynchronously)
     * Service that cancels certain duty.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDutyAsync(String version, String trustCode, Integer dutyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDutyValidateBeforeCall(version, trustCode, dutyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fillDuty
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param bookingInfo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fillDutyCall(String version, String trustCode, Integer dutyId, BookingInfo bookingInfo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bookingInfo;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/booking"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()))
            .replaceAll("\\{" + "dutyId" + "\\}", localVarApiClient.escapeString(dutyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fillDutyValidateBeforeCall(String version, String trustCode, Integer dutyId, BookingInfo bookingInfo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling fillDuty(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling fillDuty(Async)");
        }
        
        // verify the required parameter 'dutyId' is set
        if (dutyId == null) {
            throw new ApiException("Missing the required parameter 'dutyId' when calling fillDuty(Async)");
        }
        
        // verify the required parameter 'bookingInfo' is set
        if (bookingInfo == null) {
            throw new ApiException("Missing the required parameter 'bookingInfo' when calling fillDuty(Async)");
        }
        

        okhttp3.Call localVarCall = fillDutyCall(version, trustCode, dutyId, bookingInfo, _callback);
        return localVarCall;

    }

    /**
     * Creates booking for duty
     * Service that will create new booking on HR side with data sent by DE Provider.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param bookingInfo  (required)
     * @return BookingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public BookingResponse fillDuty(String version, String trustCode, Integer dutyId, BookingInfo bookingInfo) throws ApiException {
        ApiResponse<BookingResponse> localVarResp = fillDutyWithHttpInfo(version, trustCode, dutyId, bookingInfo);
        return localVarResp.getData();
    }

    /**
     * Creates booking for duty
     * Service that will create new booking on HR side with data sent by DE Provider.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param bookingInfo  (required)
     * @return ApiResponse&lt;BookingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BookingResponse> fillDutyWithHttpInfo(String version, String trustCode, Integer dutyId, BookingInfo bookingInfo) throws ApiException {
        okhttp3.Call localVarCall = fillDutyValidateBeforeCall(version, trustCode, dutyId, bookingInfo, null);
        Type localVarReturnType = new TypeToken<BookingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates booking for duty (asynchronously)
     * Service that will create new booking on HR side with data sent by DE Provider.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param bookingInfo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Pagination -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fillDutyAsync(String version, String trustCode, Integer dutyId, BookingInfo bookingInfo, final ApiCallback<BookingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fillDutyValidateBeforeCall(version, trustCode, dutyId, bookingInfo, _callback);
        Type localVarReturnType = new TypeToken<BookingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDutyDetails
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id IDs of the duties to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDutyDetailsCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/duty/"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDutyDetailsValidateBeforeCall(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getDutyDetails(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getDutyDetails(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDutyDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getDutyDetailsCall(version, trustCode, id, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Returns details about a duties.
     * Returns details about a duties.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id IDs of the duties to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return Duty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public Duty getDutyDetails(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Duty> localVarResp = getDutyDetailsWithHttpInfo(version, trustCode, id, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Returns details about a duties.
     * Returns details about a duties.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id IDs of the duties to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;Duty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Duty> getDutyDetailsWithHttpInfo(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getDutyDetailsValidateBeforeCall(version, trustCode, id, page, pageSize, null);
        Type localVarReturnType = new TypeToken<Duty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns details about a duties. (asynchronously)
     * Returns details about a duties.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param id IDs of the duties to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDutyDetailsAsync(String version, String trustCode, List<Integer> id, Integer page, Integer pageSize, final ApiCallback<Duty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDutyDetailsValidateBeforeCall(version, trustCode, id, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Duty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSingleDutyDetails
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of a duty to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleDutyDetailsCall(String version, String trustCode, Integer dutyId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()))
            .replaceAll("\\{" + "dutyId" + "\\}", localVarApiClient.escapeString(dutyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleDutyDetailsValidateBeforeCall(String version, String trustCode, Integer dutyId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getSingleDutyDetails(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling getSingleDutyDetails(Async)");
        }
        
        // verify the required parameter 'dutyId' is set
        if (dutyId == null) {
            throw new ApiException("Missing the required parameter 'dutyId' when calling getSingleDutyDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getSingleDutyDetailsCall(version, trustCode, dutyId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Returns details about a duties.
     * Returns details about a duties.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of a duty to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return Duty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public Duty getSingleDutyDetails(String version, String trustCode, Integer dutyId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<Duty> localVarResp = getSingleDutyDetailsWithHttpInfo(version, trustCode, dutyId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Returns details about a duties.
     * Returns details about a duties.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of a duty to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @return ApiResponse&lt;Duty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Duty> getSingleDutyDetailsWithHttpInfo(String version, String trustCode, Integer dutyId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getSingleDutyDetailsValidateBeforeCall(version, trustCode, dutyId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<Duty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns details about a duties. (asynchronously)
     * Returns details about a duties.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of a duty to return (required)
     * @param page Result page (optional)
     * @param pageSize Count of records per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleDutyDetailsAsync(String version, String trustCode, Integer dutyId, Integer page, Integer pageSize, final ApiCallback<Duty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleDutyDetailsValidateBeforeCall(version, trustCode, dutyId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Duty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContractStatus
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param contractId ID of the contract from DE Provider&#39;s system (required)
     * @param statusId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContractStatusCall(String version, String trustCode, Integer dutyId, String contractId, ContractStatus statusId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()))
            .replaceAll("\\{" + "dutyId" + "\\}", localVarApiClient.escapeString(dutyId.toString()))
            .replaceAll("\\{" + "contractId" + "\\}", localVarApiClient.escapeString(contractId.toString()))
            .replaceAll("\\{" + "statusId" + "\\}", localVarApiClient.escapeString(statusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContractStatusValidateBeforeCall(String version, String trustCode, Integer dutyId, String contractId, ContractStatus statusId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateContractStatus(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling updateContractStatus(Async)");
        }
        
        // verify the required parameter 'dutyId' is set
        if (dutyId == null) {
            throw new ApiException("Missing the required parameter 'dutyId' when calling updateContractStatus(Async)");
        }
        
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling updateContractStatus(Async)");
        }
        
        // verify the required parameter 'statusId' is set
        if (statusId == null) {
            throw new ApiException("Missing the required parameter 'statusId' when calling updateContractStatus(Async)");
        }
        

        okhttp3.Call localVarCall = updateContractStatusCall(version, trustCode, dutyId, contractId, statusId, _callback);
        return localVarCall;

    }

    /**
     * Updates DE Contract status
     * Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param contractId ID of the contract from DE Provider&#39;s system (required)
     * @param statusId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateContractStatus(String version, String trustCode, Integer dutyId, String contractId, ContractStatus statusId) throws ApiException {
        updateContractStatusWithHttpInfo(version, trustCode, dutyId, contractId, statusId);
    }

    /**
     * Updates DE Contract status
     * Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param contractId ID of the contract from DE Provider&#39;s system (required)
     * @param statusId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateContractStatusWithHttpInfo(String version, String trustCode, Integer dutyId, String contractId, ContractStatus statusId) throws ApiException {
        okhttp3.Call localVarCall = updateContractStatusValidateBeforeCall(version, trustCode, dutyId, contractId, statusId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates DE Contract status (asynchronously)
     * Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param contractId ID of the contract from DE Provider&#39;s system (required)
     * @param statusId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContractStatusAsync(String version, String trustCode, Integer dutyId, String contractId, ContractStatus statusId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContractStatusValidateBeforeCall(version, trustCode, dutyId, contractId, statusId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTimesheets
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimesheetsCall(String version, String trustCode, Integer dutyId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet"
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()))
            .replaceAll("\\{" + "trustCode" + "\\}", localVarApiClient.escapeString(trustCode.toString()))
            .replaceAll("\\{" + "dutyId" + "\\}", localVarApiClient.escapeString(dutyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimesheetsValidateBeforeCall(String version, String trustCode, Integer dutyId, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateTimesheets(Async)");
        }
        
        // verify the required parameter 'trustCode' is set
        if (trustCode == null) {
            throw new ApiException("Missing the required parameter 'trustCode' when calling updateTimesheets(Async)");
        }
        
        // verify the required parameter 'dutyId' is set
        if (dutyId == null) {
            throw new ApiException("Missing the required parameter 'dutyId' when calling updateTimesheets(Async)");
        }
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling updateTimesheets(Async)");
        }
        

        okhttp3.Call localVarCall = updateTimesheetsCall(version, trustCode, dutyId, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Updates timesheet for duty
     * Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param inlineObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateTimesheets(String version, String trustCode, Integer dutyId, InlineObject inlineObject) throws ApiException {
        updateTimesheetsWithHttpInfo(version, trustCode, dutyId, inlineObject);
    }

    /**
     * Updates timesheet for duty
     * Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param inlineObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTimesheetsWithHttpInfo(String version, String trustCode, Integer dutyId, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = updateTimesheetsValidateBeforeCall(version, trustCode, dutyId, inlineObject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates timesheet for duty (asynchronously)
     * Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
     * @param version API version (required)
     * @param trustCode Trust code from BankStaff (required)
     * @param dutyId ID of the duty associated with the DE contract (required)
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trust/Duty not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTimesheetsAsync(String version, String trustCode, Integer dutyId, InlineObject inlineObject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimesheetsValidateBeforeCall(version, trustCode, dutyId, inlineObject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}

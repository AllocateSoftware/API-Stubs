/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// ReferenceDataResponse
    /// </summary>
    [DataContract]
    public partial class ReferenceDataResponse :  IEquatable<ReferenceDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataResponse" /> class.
        /// </summary>
        /// <param name="refId">Reference data trust identifier from BankStaff.</param>
        /// <param name="description">Reference data description from BankStaff.</param>
        public ReferenceDataResponse(string refId = default(string), string description = default(string))
        {
            this.RefId = refId;
            this.Description = description;
        }
        
        /// <summary>
        /// Reference data trust identifier from BankStaff
        /// </summary>
        /// <value>Reference data trust identifier from BankStaff</value>
        [DataMember(Name="refId", EmitDefaultValue=false)]
        public string RefId { get; set; }

        /// <summary>
        /// Reference data description from BankStaff
        /// </summary>
        /// <value>Reference data description from BankStaff</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceDataResponse {\n");
            sb.Append("  RefId: ").Append(RefId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceDataResponse);
        }

        /// <summary>
        /// Returns true if ReferenceDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceDataResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RefId == input.RefId ||
                    (this.RefId != null &&
                    this.RefId.Equals(input.RefId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefId != null)
                    hashCode = hashCode * 59 + this.RefId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

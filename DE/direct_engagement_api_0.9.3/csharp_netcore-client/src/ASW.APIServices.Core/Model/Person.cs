/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Person
    /// </summary>
    [DataContract]
    public partial class Person :  IEquatable<Person>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PersonGender
        /// </summary>
        [DataMember(Name="personGender", EmitDefaultValue=false)]
        public PersonGender? PersonGender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Person" /> class.
        /// </summary>
        /// <param name="firstName">firstName.</param>
        /// <param name="surname">surname.</param>
        /// <param name="dateOfBirth">Date of birth.</param>
        /// <param name="personGender">personGender.</param>
        /// <param name="matchId">NINumber.e-mail .</param>
        /// <param name="allocatePersonId">Business Key.</param>
        /// <param name="email">email.</param>
        /// <param name="telephoneNumber">telephoneNumber.</param>
        /// <param name="extSystemId">extSystemId.</param>
        public Person(string firstName = default(string), string surname = default(string), DateTime dateOfBirth = default(DateTime), PersonGender personGender = default(PersonGender), string matchId = default(string), string allocatePersonId = default(string), string email = default(string), string telephoneNumber = default(string), string extSystemId = default(string))
        {
            this.FirstName = firstName;
            this.Surname = surname;
            this.DateOfBirth = dateOfBirth;
            this.PersonGender = personGender;
            this.MatchId = matchId;
            this.AllocatePersonId = allocatePersonId;
            this.Email = email;
            this.TelephoneNumber = telephoneNumber;
            this.ExtSystemId = extSystemId;
        }
        
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        /// <value>Date of birth</value>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateOfBirth { get; set; }

        /// <summary>
        /// NINumber.e-mail 
        /// </summary>
        /// <value>NINumber.e-mail </value>
        [DataMember(Name="matchId", EmitDefaultValue=false)]
        public string MatchId { get; set; }

        /// <summary>
        /// Business Key
        /// </summary>
        /// <value>Business Key</value>
        [DataMember(Name="allocatePersonId", EmitDefaultValue=false)]
        public string AllocatePersonId { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets TelephoneNumber
        /// </summary>
        [DataMember(Name="telephoneNumber", EmitDefaultValue=false)]
        public string TelephoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExtSystemId
        /// </summary>
        [DataMember(Name="extSystemId", EmitDefaultValue=false)]
        public string ExtSystemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Person {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  PersonGender: ").Append(PersonGender).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  AllocatePersonId: ").Append(AllocatePersonId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  ExtSystemId: ").Append(ExtSystemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Person);
        }

        /// <summary>
        /// Returns true if Person instances are equal
        /// </summary>
        /// <param name="input">Instance of Person to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Person input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.PersonGender == input.PersonGender ||
                    this.PersonGender.Equals(input.PersonGender)
                ) && 
                (
                    this.MatchId == input.MatchId ||
                    (this.MatchId != null &&
                    this.MatchId.Equals(input.MatchId))
                ) && 
                (
                    this.AllocatePersonId == input.AllocatePersonId ||
                    (this.AllocatePersonId != null &&
                    this.AllocatePersonId.Equals(input.AllocatePersonId))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.TelephoneNumber == input.TelephoneNumber ||
                    (this.TelephoneNumber != null &&
                    this.TelephoneNumber.Equals(input.TelephoneNumber))
                ) && 
                (
                    this.ExtSystemId == input.ExtSystemId ||
                    (this.ExtSystemId != null &&
                    this.ExtSystemId.Equals(input.ExtSystemId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                hashCode = hashCode * 59 + this.PersonGender.GetHashCode();
                if (this.MatchId != null)
                    hashCode = hashCode * 59 + this.MatchId.GetHashCode();
                if (this.AllocatePersonId != null)
                    hashCode = hashCode * 59 + this.AllocatePersonId.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.TelephoneNumber != null)
                    hashCode = hashCode * 59 + this.TelephoneNumber.GetHashCode();
                if (this.ExtSystemId != null)
                    hashCode = hashCode * 59 + this.ExtSystemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

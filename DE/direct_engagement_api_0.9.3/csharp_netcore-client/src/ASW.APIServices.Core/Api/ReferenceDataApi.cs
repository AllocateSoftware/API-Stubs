/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAgenciesByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAgenciesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllAgencies (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllAgenciesWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllContractStatuses (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllContractStatusesWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllGrades (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllGradesWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllReasonsForVacancy (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllReasonsForVacancyWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllStaffGroups (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllStaffGroupsWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        List<UnitReferenceDataResponse> GetAllUnits (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        ApiResponse<List<UnitReferenceDataResponse>> GetAllUnitsWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetContractStatusesByIds (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetContractStatusesByIdsWithHttpInfo (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetGradesByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetGradesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetReasonsForVacancyByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetReasonsForVacancyByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetStaffGroupsByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetStaffGroupsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        List<UnitReferenceDataResponse> GetUnitsByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        ApiResponse<List<UnitReferenceDataResponse>> GetUnitsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAgenciesByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAgenciesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllAgenciesAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllAgenciesAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllContractStatusesAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllContractStatusesAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllGradesAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllGradesAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllReasonsForVacancyAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllReasonsForVacancyAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllStaffGroupsAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllStaffGroupsAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetAllUnitsAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UnitReferenceDataResponse>>> GetAllUnitsAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetContractStatusesByIdsAsync (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetContractStatusesByIdsAsyncWithHttpInfo (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetGradesByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetGradesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetReasonsForVacancyByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetReasonsForVacancyByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetStaffGroupsByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetStaffGroupsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetUnitsByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UnitReferenceDataResponse>>> GetUnitsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApi : IReferenceDataApiSync, IReferenceDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferenceDataApi : IReferenceDataApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi(String basePath)
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                new ASW.APIServices.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferenceDataApi(ASW.APIServices.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReferenceDataApi(ASW.APIServices.Core.Client.ISynchronousClient client,ASW.APIServices.Core.Client.IAsynchronousClient asyncClient, ASW.APIServices.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAgenciesByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAgenciesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetAgenciesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAgenciesByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAgenciesByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetAgenciesByIds");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/agency/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgenciesByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAgenciesByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAgenciesByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetAgenciesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAgenciesByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAgenciesByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetAgenciesByIds");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/agency/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgenciesByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllAgencies (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllAgenciesWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetAllAgenciesWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllAgencies");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllAgencies");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/agency", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAgencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllAgenciesAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllAgenciesAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetAllAgenciesAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllAgencies");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllAgencies");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/agency", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAgencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllContractStatuses (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllContractStatusesWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetAllContractStatusesWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllContractStatuses");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllContractStatuses");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/contractStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllContractStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllContractStatusesAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllContractStatusesAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetAllContractStatusesAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllContractStatuses");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllContractStatuses");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/contractStatus", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllContractStatuses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllGrades (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllGradesWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetAllGradesWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllGrades");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllGrades");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/grade", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllGradesAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllGradesAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetAllGradesAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllGrades");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllGrades");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/grade", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllGrades", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllReasonsForVacancy (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllReasonsForVacancyWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetAllReasonsForVacancyWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllReasonsForVacancy");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllReasonsForVacancy");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReasonsForVacancy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllReasonsForVacancyAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllReasonsForVacancyAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetAllReasonsForVacancyAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllReasonsForVacancy");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllReasonsForVacancy");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllReasonsForVacancy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllStaffGroups (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllStaffGroupsWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetAllStaffGroupsWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllStaffGroups");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllStaffGroups");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/staffGroup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllStaffGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllStaffGroupsAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllStaffGroupsAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetAllStaffGroupsAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllStaffGroups");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllStaffGroups");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/staffGroup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllStaffGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        public List<UnitReferenceDataResponse> GetAllUnits (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = GetAllUnitsWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<UnitReferenceDataResponse> > GetAllUnitsWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllUnits");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllUnits");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<UnitReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/unit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUnits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetAllUnitsAsync (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = await GetAllUnitsAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<UnitReferenceDataResponse>>> GetAllUnitsAsyncWithHttpInfo (string version, string trustCode, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllUnits");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllUnits");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnitReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/unit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUnits", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetContractStatusesByIds (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetContractStatusesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetContractStatusesByIdsWithHttpInfo (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetContractStatusesByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetContractStatusesByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetContractStatusesByIds");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/contractStatus/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractStatusesByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetContractStatusesByIdsAsync (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetContractStatusesByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetContractStatusesByIdsAsyncWithHttpInfo (string version, string trustCode, List<string> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetContractStatusesByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetContractStatusesByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetContractStatusesByIds");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/contractStatus/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractStatusesByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetGradesByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetGradesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetGradesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetGradesByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetGradesByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetGradesByIds");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/grade/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGradesByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetGradesByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetGradesByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetGradesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetGradesByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetGradesByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetGradesByIds");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/grade/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGradesByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetReasonsForVacancyByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetReasonsForVacancyByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetReasonsForVacancyByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetReasonsForVacancyByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetReasonsForVacancyByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetReasonsForVacancyByIds");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReasonsForVacancyByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetReasonsForVacancyByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetReasonsForVacancyByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetReasonsForVacancyByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetReasonsForVacancyByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetReasonsForVacancyByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetReasonsForVacancyByIds");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReasonsForVacancyByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetStaffGroupsByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetStaffGroupsByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<ReferenceDataResponse> > GetStaffGroupsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetStaffGroupsByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetStaffGroupsByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetStaffGroupsByIds");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/staffGroup/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffGroupsByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetStaffGroupsByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetStaffGroupsByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<ReferenceDataResponse>>> GetStaffGroupsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetStaffGroupsByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetStaffGroupsByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetStaffGroupsByIds");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/staffGroup/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStaffGroupsByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        public List<UnitReferenceDataResponse> GetUnitsByIds (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = GetUnitsByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        public ASW.APIServices.Core.Client.ApiResponse< List<UnitReferenceDataResponse> > GetUnitsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetUnitsByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetUnitsByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetUnitsByIds");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<UnitReferenceDataResponse> >("/{version}/trustcode/{trustCode}/referenceData/unit/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnitsByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetUnitsByIdsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = await GetUnitsByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<List<UnitReferenceDataResponse>>> GetUnitsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetUnitsByIds");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetUnitsByIds");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetUnitsByIds");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UnitReferenceDataResponse>>("/{version}/trustcode/{trustCode}/referenceData/unit/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnitsByIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDutyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns></returns>
        void CancelDuty (string version, string trustCode, int dutyId);

        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelDutyWithHttpInfo (string version, string trustCode, int dutyId);
        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>BookingResponse</returns>
        BookingResponse FillDuty (string version, string trustCode, int dutyId, BookingInfo bookingInfo);

        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>ApiResponse of BookingResponse</returns>
        ApiResponse<BookingResponse> FillDutyWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo);
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        Duty GetDutyDetails (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        ApiResponse<Duty> GetDutyDetailsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        Duty GetSingleDutyDetails (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        ApiResponse<Duty> GetSingleDutyDetailsWithHttpInfo (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns></returns>
        void UpdateContractStatus (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);

        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateContractStatusWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);
        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        void UpdateTimesheets (string version, string trustCode, int dutyId, InlineObject inlineObject);

        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTimesheetsWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDutyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelDutyAsync (string version, string trustCode, int dutyId);

        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId);
        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of BookingResponse</returns>
        System.Threading.Tasks.Task<BookingResponse> FillDutyAsync (string version, string trustCode, int dutyId, BookingInfo bookingInfo);

        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of ApiResponse (BookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookingResponse>> FillDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo);
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        System.Threading.Tasks.Task<Duty> GetDutyDetailsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Duty>> GetDutyDetailsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        System.Threading.Tasks.Task<Duty> GetSingleDutyDetailsAsync (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Duty>> GetSingleDutyDetailsAsyncWithHttpInfo (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?));
        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateContractStatusAsync (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);

        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContractStatusAsyncWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);
        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTimesheetsAsync (string version, string trustCode, int dutyId, InlineObject inlineObject);

        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTimesheetsAsyncWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDutyApi : IDutyApiSync, IDutyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DutyApi : IDutyApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DutyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DutyApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DutyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DutyApi(String basePath)
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                new ASW.APIServices.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DutyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DutyApi(ASW.APIServices.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ASW.APIServices.Core.Client.Configuration.MergeConfigurations(
                ASW.APIServices.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ASW.APIServices.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DutyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DutyApi(ASW.APIServices.Core.Client.ISynchronousClient client,ASW.APIServices.Core.Client.IAsynchronousClient asyncClient, ASW.APIServices.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ASW.APIServices.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns></returns>
        public void CancelDuty (string version, string trustCode, int dutyId)
        {
             CancelDutyWithHttpInfo(version, trustCode, dutyId);
        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.Core.Client.ApiResponse<Object> CancelDutyWithHttpInfo (string version, string trustCode, int dutyId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->CancelDuty");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->CancelDuty");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->CancelDuty");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDuty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelDutyAsync (string version, string trustCode, int dutyId)
        {
             await CancelDutyAsyncWithHttpInfo(version, trustCode, dutyId);

        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Object>> CancelDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->CancelDuty");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->CancelDuty");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->CancelDuty");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDuty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>BookingResponse</returns>
        public BookingResponse FillDuty (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
             ASW.APIServices.Core.Client.ApiResponse<BookingResponse> localVarResponse = FillDutyWithHttpInfo(version, trustCode, dutyId, bookingInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>ApiResponse of BookingResponse</returns>
        public ASW.APIServices.Core.Client.ApiResponse< BookingResponse > FillDutyWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->FillDuty");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->FillDuty");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->FillDuty");

            // verify the required parameter 'bookingInfo' is set
            if (bookingInfo == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'bookingInfo' when calling DutyApi->FillDuty");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            localVarRequestOptions.Data = bookingInfo;


            // make the HTTP request
            var localVarResponse = this.Client.Post< BookingResponse >("/{version}/trustcode/{trustCode}/duty/{dutyId}/booking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FillDuty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of BookingResponse</returns>
        public async System.Threading.Tasks.Task<BookingResponse> FillDutyAsync (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
             ASW.APIServices.Core.Client.ApiResponse<BookingResponse> localVarResponse = await FillDutyAsyncWithHttpInfo(version, trustCode, dutyId, bookingInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of ApiResponse (BookingResponse)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<BookingResponse>> FillDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->FillDuty");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->FillDuty");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->FillDuty");

            // verify the required parameter 'bookingInfo' is set
            if (bookingInfo == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'bookingInfo' when calling DutyApi->FillDuty");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            localVarRequestOptions.Data = bookingInfo;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BookingResponse>("/{version}/trustcode/{trustCode}/duty/{dutyId}/booking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FillDuty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        public Duty GetDutyDetails (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<Duty> localVarResponse = GetDutyDetailsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        public ASW.APIServices.Core.Client.ApiResponse< Duty > GetDutyDetailsWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetDutyDetails");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetDutyDetails");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DutyApi->GetDutyDetails");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< Duty >("/{version}/trustcode/{trustCode}/duty/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDutyDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        public async System.Threading.Tasks.Task<Duty> GetDutyDetailsAsync (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<Duty> localVarResponse = await GetDutyDetailsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Duty>> GetDutyDetailsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetDutyDetails");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetDutyDetails");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DutyApi->GetDutyDetails");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (id != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("multi", "id", id))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Duty>("/{version}/trustcode/{trustCode}/duty/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDutyDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        public Duty GetSingleDutyDetails (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<Duty> localVarResponse = GetSingleDutyDetailsWithHttpInfo(version, trustCode, dutyId, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        public ASW.APIServices.Core.Client.ApiResponse< Duty > GetSingleDutyDetailsWithHttpInfo (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetSingleDutyDetails");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetSingleDutyDetails");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->GetSingleDutyDetails");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< Duty >("/{version}/trustcode/{trustCode}/duty/{dutyId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleDutyDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        public async System.Threading.Tasks.Task<Duty> GetSingleDutyDetailsAsync (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?))
        {
             ASW.APIServices.Core.Client.ApiResponse<Duty> localVarResponse = await GetSingleDutyDetailsAsyncWithHttpInfo(version, trustCode, dutyId, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Duty>> GetSingleDutyDetailsAsyncWithHttpInfo (string version, string trustCode, int dutyId, int? page = default(int?), int? pageSize = default(int?))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetSingleDutyDetails");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetSingleDutyDetails");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->GetSingleDutyDetails");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            if (page != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (pageSize != null)
            {
                foreach (var _kvp in ASW.APIServices.Core.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Duty>("/{version}/trustcode/{trustCode}/duty/{dutyId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleDutyDetails", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns></returns>
        public void UpdateContractStatus (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
             UpdateContractStatusWithHttpInfo(version, trustCode, dutyId, contractId, statusId);
        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.Core.Client.ApiResponse<Object> UpdateContractStatusWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'contractId' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'statusId' when calling DutyApi->UpdateContractStatus");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            if (contractId != null)
                localVarRequestOptions.PathParameters.Add("contractId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (statusId != null)
                localVarRequestOptions.PathParameters.Add("statusId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(statusId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContractStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateContractStatusAsync (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
             await UpdateContractStatusAsyncWithHttpInfo(version, trustCode, dutyId, contractId, statusId);

        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Object>> UpdateContractStatusAsyncWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'contractId' when calling DutyApi->UpdateContractStatus");

            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'statusId' when calling DutyApi->UpdateContractStatus");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            if (contractId != null)
                localVarRequestOptions.PathParameters.Add("contractId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(contractId)); // path parameter
            if (statusId != null)
                localVarRequestOptions.PathParameters.Add("statusId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(statusId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContractStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        public void UpdateTimesheets (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
             UpdateTimesheetsWithHttpInfo(version, trustCode, dutyId, inlineObject);
        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ASW.APIServices.Core.Client.ApiResponse<Object> UpdateTimesheetsWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateTimesheets");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateTimesheets");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateTimesheets");

            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling DutyApi->UpdateTimesheets");

            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };

            var localVarContentType = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ASW.APIServices.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            localVarRequestOptions.Data = inlineObject;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTimesheets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTimesheetsAsync (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
             await UpdateTimesheetsAsyncWithHttpInfo(version, trustCode, dutyId, inlineObject);

        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ASW.APIServices.Core.Client.ApiResponse<Object>> UpdateTimesheetsAsyncWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateTimesheets");

            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateTimesheets");

            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateTimesheets");

            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ASW.APIServices.Core.Client.ApiException(400, "Missing required parameter 'inlineObject' when calling DutyApi->UpdateTimesheets");


            ASW.APIServices.Core.Client.RequestOptions localVarRequestOptions = new ASW.APIServices.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (version != null)
                localVarRequestOptions.PathParameters.Add("version", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (trustCode != null)
                localVarRequestOptions.PathParameters.Add("trustCode", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(trustCode)); // path parameter
            if (dutyId != null)
                localVarRequestOptions.PathParameters.Add("dutyId", ASW.APIServices.Core.Client.ClientUtils.ParameterToString(dutyId)); // path parameter
            localVarRequestOptions.Data = inlineObject;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTimesheets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

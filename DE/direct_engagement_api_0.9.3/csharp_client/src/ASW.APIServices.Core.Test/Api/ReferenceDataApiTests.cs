/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Api;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Test
{
    /// <summary>
    ///  Class for testing ReferenceDataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReferenceDataApiTests
    {
        private ReferenceDataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ReferenceDataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ReferenceDataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ReferenceDataApi
            //Assert.IsInstanceOf(typeof(ReferenceDataApi), instance);
        }

        
        /// <summary>
        /// Test GetAgenciesByIds
        /// </summary>
        [Test]
        public void GetAgenciesByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //List<int> id = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetAgenciesByIds(version, trustCode, id, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetAllAgencies
        /// </summary>
        [Test]
        public void GetAllAgenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetAllAgencies(version, trustCode, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetAllContractStatuses
        /// </summary>
        [Test]
        public void GetAllContractStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetAllContractStatuses(version, trustCode, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetAllGrades
        /// </summary>
        [Test]
        public void GetAllGradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetAllGrades(version, trustCode, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetAllReasonsForVacancy
        /// </summary>
        [Test]
        public void GetAllReasonsForVacancyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetAllReasonsForVacancy(version, trustCode, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetAllStaffGroups
        /// </summary>
        [Test]
        public void GetAllStaffGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetAllStaffGroups(version, trustCode, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetAllUnits
        /// </summary>
        [Test]
        public void GetAllUnitsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetAllUnits(version, trustCode, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<UnitReferenceDataResponse>), response, "response is List<UnitReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetContractStatusesByIds
        /// </summary>
        [Test]
        public void GetContractStatusesByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //List<string> id = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetContractStatusesByIds(version, trustCode, id, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetGradesByIds
        /// </summary>
        [Test]
        public void GetGradesByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //List<int> id = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetGradesByIds(version, trustCode, id, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetReasonsForVacancyByIds
        /// </summary>
        [Test]
        public void GetReasonsForVacancyByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //List<int> id = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetReasonsForVacancyByIds(version, trustCode, id, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetStaffGroupsByIds
        /// </summary>
        [Test]
        public void GetStaffGroupsByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //List<int> id = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetStaffGroupsByIds(version, trustCode, id, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<ReferenceDataResponse>), response, "response is List<ReferenceDataResponse>");
        }
        
        /// <summary>
        /// Test GetUnitsByIds
        /// </summary>
        [Test]
        public void GetUnitsByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string trustCode = null;
            //List<int> id = null;
            //int page = null;
            //int pageSize = null;
            //var response = instance.GetUnitsByIds(version, trustCode, id, page, pageSize);
            //Assert.IsInstanceOf(typeof(List<UnitReferenceDataResponse>), response, "response is List<UnitReferenceDataResponse>");
        }
        
    }

}

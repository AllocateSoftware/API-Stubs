/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDutyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns></returns>
        void CancelDuty (string version, string trustCode, int dutyId);

        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelDutyWithHttpInfo (string version, string trustCode, int dutyId);
        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>BookingResponse</returns>
        BookingResponse FillDuty (string version, string trustCode, int dutyId, BookingInfo bookingInfo);

        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>ApiResponse of BookingResponse</returns>
        ApiResponse<BookingResponse> FillDutyWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo);
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        Duty GetDutyDetails (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        ApiResponse<Duty> GetDutyDetailsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        Duty GetSingleDutyDetails (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        ApiResponse<Duty> GetSingleDutyDetailsWithHttpInfo (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns></returns>
        void UpdateContractStatus (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);

        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateContractStatusWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);
        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        void UpdateTimesheets (string version, string trustCode, int dutyId, InlineObject inlineObject);

        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTimesheetsWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelDutyAsync (string version, string trustCode, int dutyId);

        /// <summary>
        /// Cancel a duty
        /// </summary>
        /// <remarks>
        /// Service that cancels certain duty.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId);
        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of BookingResponse</returns>
        System.Threading.Tasks.Task<BookingResponse> FillDutyAsync (string version, string trustCode, int dutyId, BookingInfo bookingInfo);

        /// <summary>
        /// Creates booking for duty
        /// </summary>
        /// <remarks>
        /// Service that will create new booking on HR side with data sent by DE Provider.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of ApiResponse (BookingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BookingResponse>> FillDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo);
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        System.Threading.Tasks.Task<Duty> GetDutyDetailsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Duty>> GetDutyDetailsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        System.Threading.Tasks.Task<Duty> GetSingleDutyDetailsAsync (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Returns details about a duties.
        /// </summary>
        /// <remarks>
        /// Returns details about a duties.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Duty>> GetSingleDutyDetailsAsyncWithHttpInfo (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateContractStatusAsync (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);

        /// <summary>
        /// Updates DE Contract status
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContractStatusAsyncWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId);
        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTimesheetsAsync (string version, string trustCode, int dutyId, InlineObject inlineObject);

        /// <summary>
        /// Updates timesheet for duty
        /// </summary>
        /// <remarks>
        /// Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTimesheetsAsyncWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DutyApi : IDutyApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DutyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DutyApi(String basePath)
        {
            this.Configuration = new ASW.APIServices.Core.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DutyApi"/> class
        /// </summary>
        /// <returns></returns>
        public DutyApi()
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DutyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DutyApi(ASW.APIServices.Core.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns></returns>
        public void CancelDuty (string version, string trustCode, int dutyId)
        {
             CancelDutyWithHttpInfo(version, trustCode, dutyId);
        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelDutyWithHttpInfo (string version, string trustCode, int dutyId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->CancelDuty");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->CancelDuty");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->CancelDuty");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelDuty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelDutyAsync (string version, string trustCode, int dutyId)
        {
             await CancelDutyAsyncWithHttpInfo(version, trustCode, dutyId);

        }

        /// <summary>
        /// Cancel a duty Service that cancels certain duty.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->CancelDuty");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->CancelDuty");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->CancelDuty");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelDuty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>BookingResponse</returns>
        public BookingResponse FillDuty (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
             ApiResponse<BookingResponse> localVarResponse = FillDutyWithHttpInfo(version, trustCode, dutyId, bookingInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>ApiResponse of BookingResponse</returns>
        public ApiResponse<BookingResponse> FillDutyWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->FillDuty");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->FillDuty");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->FillDuty");
            // verify the required parameter 'bookingInfo' is set
            if (bookingInfo == null)
                throw new ApiException(400, "Missing required parameter 'bookingInfo' when calling DutyApi->FillDuty");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (bookingInfo != null && bookingInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bookingInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bookingInfo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillDuty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookingResponse)));
        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of BookingResponse</returns>
        public async System.Threading.Tasks.Task<BookingResponse> FillDutyAsync (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
             ApiResponse<BookingResponse> localVarResponse = await FillDutyAsyncWithHttpInfo(version, trustCode, dutyId, bookingInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates booking for duty Service that will create new booking on HR side with data sent by DE Provider.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="bookingInfo"></param>
        /// <returns>Task of ApiResponse (BookingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BookingResponse>> FillDutyAsyncWithHttpInfo (string version, string trustCode, int dutyId, BookingInfo bookingInfo)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->FillDuty");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->FillDuty");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->FillDuty");
            // verify the required parameter 'bookingInfo' is set
            if (bookingInfo == null)
                throw new ApiException(400, "Missing required parameter 'bookingInfo' when calling DutyApi->FillDuty");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/booking";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (bookingInfo != null && bookingInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bookingInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bookingInfo; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FillDuty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BookingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BookingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BookingResponse)));
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        public Duty GetDutyDetails (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<Duty> localVarResponse = GetDutyDetailsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        public ApiResponse<Duty> GetDutyDetailsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetDutyDetails");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetDutyDetails");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DutyApi->GetDutyDetails");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDutyDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Duty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Duty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Duty)));
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        public async System.Threading.Tasks.Task<Duty> GetDutyDetailsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<Duty> localVarResponse = await GetDutyDetailsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">IDs of the duties to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Duty>> GetDutyDetailsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetDutyDetails");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetDutyDetails");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DutyApi->GetDutyDetails");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDutyDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Duty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Duty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Duty)));
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Duty</returns>
        public Duty GetSingleDutyDetails (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<Duty> localVarResponse = GetSingleDutyDetailsWithHttpInfo(version, trustCode, dutyId, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of Duty</returns>
        public ApiResponse<Duty> GetSingleDutyDetailsWithHttpInfo (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetSingleDutyDetails");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetSingleDutyDetails");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->GetSingleDutyDetails");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingleDutyDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Duty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Duty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Duty)));
        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of Duty</returns>
        public async System.Threading.Tasks.Task<Duty> GetSingleDutyDetailsAsync (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<Duty> localVarResponse = await GetSingleDutyDetailsAsyncWithHttpInfo(version, trustCode, dutyId, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns details about a duties. Returns details about a duties.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of a duty to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (Duty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Duty>> GetSingleDutyDetailsAsyncWithHttpInfo (string version, string trustCode, int dutyId, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->GetSingleDutyDetails");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->GetSingleDutyDetails");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->GetSingleDutyDetails");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSingleDutyDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Duty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Duty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Duty)));
        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns></returns>
        public void UpdateContractStatus (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
             UpdateContractStatusWithHttpInfo(version, trustCode, dutyId, contractId, statusId);
        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateContractStatusWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling DutyApi->UpdateContractStatus");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContractStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateContractStatusAsync (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
             await UpdateContractStatusAsyncWithHttpInfo(version, trustCode, dutyId, contractId, statusId);

        }

        /// <summary>
        /// Updates DE Contract status Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="contractId">ID of the contract from DE Provider&#39;s system</param>
        /// <param name="statusId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateContractStatusAsyncWithHttpInfo (string version, string trustCode, int dutyId, string contractId, ContractStatus statusId)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'contractId' is set
            if (contractId == null)
                throw new ApiException(400, "Missing required parameter 'contractId' when calling DutyApi->UpdateContractStatus");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling DutyApi->UpdateContractStatus");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (contractId != null) localVarPathParams.Add("contractId", this.Configuration.ApiClient.ParameterToString(contractId)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContractStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns></returns>
        public void UpdateTimesheets (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
             UpdateTimesheetsWithHttpInfo(version, trustCode, dutyId, inlineObject);
        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTimesheetsWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateTimesheets");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateTimesheets");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateTimesheets");
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling DutyApi->UpdateTimesheets");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTimesheetsAsync (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
             await UpdateTimesheetsAsyncWithHttpInfo(version, trustCode, dutyId, inlineObject);

        }

        /// <summary>
        /// Updates timesheet for duty Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="dutyId">ID of the duty associated with the DE contract</param>
        /// <param name="inlineObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTimesheetsAsyncWithHttpInfo (string version, string trustCode, int dutyId, InlineObject inlineObject)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling DutyApi->UpdateTimesheets");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling DutyApi->UpdateTimesheets");
            // verify the required parameter 'dutyId' is set
            if (dutyId == null)
                throw new ApiException(400, "Missing required parameter 'dutyId' when calling DutyApi->UpdateTimesheets");
            // verify the required parameter 'inlineObject' is set
            if (inlineObject == null)
                throw new ApiException(400, "Missing required parameter 'inlineObject' when calling DutyApi->UpdateTimesheets");

            var localVarPath = "/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (dutyId != null) localVarPathParams.Add("dutyId", this.Configuration.ApiClient.ParameterToString(dutyId)); // path parameter
            if (inlineObject != null && inlineObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTimesheets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}

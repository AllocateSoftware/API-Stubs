/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ASW.APIServices.Core.Client;
using ASW.APIServices.Core.Model;

namespace ASW.APIServices.Core.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferenceDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAgenciesByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAgenciesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllAgencies (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllAgenciesWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllContractStatuses (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllContractStatusesWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllGrades (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllGradesWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllReasonsForVacancy (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllReasonsForVacancyWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetAllStaffGroups (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetAllStaffGroupsWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        List<UnitReferenceDataResponse> GetAllUnits (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        ApiResponse<List<UnitReferenceDataResponse>> GetAllUnitsWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetContractStatusesByIds (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetContractStatusesByIdsWithHttpInfo (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetGradesByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetGradesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetReasonsForVacancyByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetReasonsForVacancyByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        List<ReferenceDataResponse> GetStaffGroupsByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        ApiResponse<List<ReferenceDataResponse>> GetStaffGroupsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        List<UnitReferenceDataResponse> GetUnitsByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        ApiResponse<List<UnitReferenceDataResponse>> GetUnitsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAgenciesByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAgenciesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllAgenciesAsync (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all agencies
        /// </summary>
        /// <remarks>
        /// Returns an array of agencies
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllAgenciesAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllContractStatusesAsync (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses.
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllContractStatusesAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllGradesAsync (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllGradesAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllReasonsForVacancyAsync (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllReasonsForVacancyAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllStaffGroupsAsync (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllStaffGroupsAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetAllUnitsAsync (string version, string trustCode, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get all units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UnitReferenceDataResponse>>> GetAllUnitsAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetContractStatusesByIdsAsync (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get contract statuses
        /// </summary>
        /// <remarks>
        /// Returns an array of contract statuses
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetContractStatusesByIdsAsyncWithHttpInfo (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetGradesByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get grades
        /// </summary>
        /// <remarks>
        /// Returns an array of grades
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetGradesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetReasonsForVacancyByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get reasons for vacancy
        /// </summary>
        /// <remarks>
        /// Returns an array of reasons for vacancy
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetReasonsForVacancyByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetStaffGroupsByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get staff groups
        /// </summary>
        /// <remarks>
        /// Returns an array of staff groups
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetStaffGroupsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetUnitsByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));

        /// <summary>
        /// Get units
        /// </summary>
        /// <remarks>
        /// Returns an array of units
        /// </remarks>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UnitReferenceDataResponse>>> GetUnitsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferenceDataApi : IReferenceDataApi
    {
        private ASW.APIServices.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi(String basePath)
        {
            this.Configuration = new ASW.APIServices.Core.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReferenceDataApi()
        {
            this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferenceDataApi(ASW.APIServices.Core.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ASW.APIServices.Core.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ASW.APIServices.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ASW.APIServices.Core.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ASW.APIServices.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAgenciesByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAgenciesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetAgenciesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAgenciesByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAgenciesByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetAgenciesByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/agency/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgenciesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAgenciesByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAgenciesByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAgenciesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAgenciesByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAgenciesByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetAgenciesByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/agency/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAgenciesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllAgencies (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllAgenciesWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetAllAgenciesWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllAgencies");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllAgencies");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/agency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAgencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllAgenciesAsync (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllAgenciesAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all agencies Returns an array of agencies
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllAgenciesAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllAgencies");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllAgencies");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/agency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAgencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllContractStatuses (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllContractStatusesWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetAllContractStatusesWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllContractStatuses");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllContractStatuses");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/contractStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContractStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllContractStatusesAsync (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllContractStatusesAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contract statuses Returns an array of contract statuses.
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllContractStatusesAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllContractStatuses");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllContractStatuses");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/contractStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContractStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllGrades (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllGradesWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetAllGradesWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllGrades");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllGrades");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/grade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllGradesAsync (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllGradesAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllGradesAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllGrades");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllGrades");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/grade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllGrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllReasonsForVacancy (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllReasonsForVacancyWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetAllReasonsForVacancyWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllReasonsForVacancy");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllReasonsForVacancy");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReasonsForVacancy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllReasonsForVacancyAsync (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllReasonsForVacancyAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllReasonsForVacancyAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllReasonsForVacancy");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllReasonsForVacancy");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllReasonsForVacancy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetAllStaffGroups (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetAllStaffGroupsWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetAllStaffGroupsWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllStaffGroups");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllStaffGroups");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/staffGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllStaffGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetAllStaffGroupsAsync (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetAllStaffGroupsAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetAllStaffGroupsAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllStaffGroups");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllStaffGroups");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/staffGroup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllStaffGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        public List<UnitReferenceDataResponse> GetAllUnits (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = GetAllUnitsWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        public ApiResponse<List<UnitReferenceDataResponse>> GetAllUnitsWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllUnits");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllUnits");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/unit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UnitReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UnitReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UnitReferenceDataResponse>)));
        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetAllUnitsAsync (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = await GetAllUnitsAsyncWithHttpInfo(version, trustCode, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UnitReferenceDataResponse>>> GetAllUnitsAsyncWithHttpInfo (string version, string trustCode, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetAllUnits");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetAllUnits");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/unit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUnits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UnitReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UnitReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UnitReferenceDataResponse>)));
        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetContractStatusesByIds (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetContractStatusesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetContractStatusesByIdsWithHttpInfo (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetContractStatusesByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetContractStatusesByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetContractStatusesByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/contractStatus/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractStatusesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetContractStatusesByIdsAsync (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetContractStatusesByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contract statuses Returns an array of contract statuses
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetContractStatusesByIdsAsyncWithHttpInfo (string version, string trustCode, List<string> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetContractStatusesByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetContractStatusesByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetContractStatusesByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/contractStatus/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContractStatusesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetGradesByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetGradesByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetGradesByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetGradesByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetGradesByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetGradesByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/grade/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGradesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetGradesByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetGradesByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get grades Returns an array of grades
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetGradesByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetGradesByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetGradesByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetGradesByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/grade/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGradesByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetReasonsForVacancyByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetReasonsForVacancyByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetReasonsForVacancyByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetReasonsForVacancyByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetReasonsForVacancyByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetReasonsForVacancyByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReasonsForVacancyByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetReasonsForVacancyByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetReasonsForVacancyByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get reasons for vacancy Returns an array of reasons for vacancy
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetReasonsForVacancyByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetReasonsForVacancyByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetReasonsForVacancyByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetReasonsForVacancyByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/reasonForVacancy/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReasonsForVacancyByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;ReferenceDataResponse&gt;</returns>
        public List<ReferenceDataResponse> GetStaffGroupsByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = GetStaffGroupsByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;ReferenceDataResponse&gt;</returns>
        public ApiResponse<List<ReferenceDataResponse>> GetStaffGroupsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetStaffGroupsByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetStaffGroupsByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetStaffGroupsByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/staffGroup/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffGroupsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;ReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReferenceDataResponse>> GetStaffGroupsByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<ReferenceDataResponse>> localVarResponse = await GetStaffGroupsByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get staff groups Returns an array of staff groups
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReferenceDataResponse>>> GetStaffGroupsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetStaffGroupsByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetStaffGroupsByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetStaffGroupsByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/staffGroup/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStaffGroupsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReferenceDataResponse>)));
        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>List&lt;UnitReferenceDataResponse&gt;</returns>
        public List<UnitReferenceDataResponse> GetUnitsByIds (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = GetUnitsByIdsWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>ApiResponse of List&lt;UnitReferenceDataResponse&gt;</returns>
        public ApiResponse<List<UnitReferenceDataResponse>> GetUnitsByIdsWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetUnitsByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetUnitsByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetUnitsByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/unit/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnitsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UnitReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UnitReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UnitReferenceDataResponse>)));
        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of List&lt;UnitReferenceDataResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<UnitReferenceDataResponse>> GetUnitsByIdsAsync (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
             ApiResponse<List<UnitReferenceDataResponse>> localVarResponse = await GetUnitsByIdsAsyncWithHttpInfo(version, trustCode, id, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get units Returns an array of units
        /// </summary>
        /// <exception cref="ASW.APIServices.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">API version</param>
        /// <param name="trustCode">Trust code from BankStaff</param>
        /// <param name="id">Array of reference data IDs to return</param>
        /// <param name="page">Result page (optional)</param>
        /// <param name="pageSize">Count of records per page (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;UnitReferenceDataResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UnitReferenceDataResponse>>> GetUnitsByIdsAsyncWithHttpInfo (string version, string trustCode, List<int> id, int page = default(int), int pageSize = default(int))
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ReferenceDataApi->GetUnitsByIds");
            // verify the required parameter 'trustCode' is set
            if (trustCode == null)
                throw new ApiException(400, "Missing required parameter 'trustCode' when calling ReferenceDataApi->GetUnitsByIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ReferenceDataApi->GetUnitsByIds");

            var localVarPath = "/{version}/trustcode/{trustCode}/referenceData/unit/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", this.Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (trustCode != null) localVarPathParams.Add("trustCode", this.Configuration.ApiClient.ParameterToString(trustCode)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "id", id)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnitsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UnitReferenceDataResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UnitReferenceDataResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UnitReferenceDataResponse>)));
        }

    }
}

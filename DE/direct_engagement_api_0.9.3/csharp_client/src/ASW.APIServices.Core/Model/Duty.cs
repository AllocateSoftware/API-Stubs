/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Duty
    /// </summary>
    [DataContract]
    public partial class Duty :  IEquatable<Duty>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets RequestGender
        /// </summary>
        [DataMember(Name="requestGender", EmitDefaultValue=false)]
        public RequestGender? RequestGender { get; set; }
        /// <summary>
        /// Will need to understand if duty is no longer required and cancel on DE Provider
        /// </summary>
        /// <value>Will need to understand if duty is no longer required and cancel on DE Provider</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 2

        }

        /// <summary>
        /// Will need to understand if duty is no longer required and cancel on DE Provider
        /// </summary>
        /// <value>Will need to understand if duty is no longer required and cancel on DE Provider</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Duty" /> class.
        /// </summary>
        /// <param name="dutyId">Trust identifier of the duty.</param>
        /// <param name="slaveDutyId">Identifier of the slave duty if duty is part of consolidated duties.</param>
        /// <param name="blockId">Identifier of block duties if duty is part of the block.</param>
        /// <param name="clientDeptId">BankStaff ward trust identifier.</param>
        /// <param name="subDiscipline">Staff group trust identifier.</param>
        /// <param name="requestGender">requestGender.</param>
        /// <param name="grade">Grade trust identifier of the request.</param>
        /// <param name="fallbackGrade">fallbackGrade.</param>
        /// <param name="vacancyReason">vacancyReason.</param>
        /// <param name="date">Date of the duty.</param>
        /// <param name="startTime">Start time of the shift.</param>
        /// <param name="endTime">End time of the shift.</param>
        /// <param name="breakDuration">Duration of break in minutes.</param>
        /// <param name="poNumber">Need to understand if needed from Trust/Agency.</param>
        /// <param name="uniqueNumber">BRN / Unique number.</param>
        /// <param name="agency">Supplying agency trust identifier.</param>
        /// <param name="skill">Stored as free text in DE Provider.</param>
        /// <param name="specialty">Stored as free text in DE Provider.</param>
        /// <param name="fallbackSkill">Stored as free text in DE Provider.</param>
        /// <param name="fallbackSpeciality">Stored as free text in DE Provider.</param>
        /// <param name="status">Will need to understand if duty is no longer required and cancel on DE Provider.</param>
        /// <param name="rates">Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency.</param>
        /// <param name="timeIntervalRates">Array of rates and intervals for which the rate is applied.</param>
        /// <param name="person">person.</param>
        public Duty(string dutyId = default(string), string slaveDutyId = default(string), string blockId = default(string), string clientDeptId = default(string), string subDiscipline = default(string), RequestGender requestGender = default(RequestGender), string grade = default(string), string fallbackGrade = default(string), string vacancyReason = default(string), DateTime date = default(DateTime), string startTime = default(string), string endTime = default(string), int breakDuration = default(int), int poNumber = default(int), int uniqueNumber = default(int), string agency = default(string), string skill = default(string), string specialty = default(string), string fallbackSkill = default(string), string fallbackSpeciality = default(string), StatusEnum? status = default(StatusEnum?), List<Rates> rates = default(List<Rates>), List<TimeIntervalRates> timeIntervalRates = default(List<TimeIntervalRates>), Person person = default(Person))
        {
            this.DutyId = dutyId;
            this.SlaveDutyId = slaveDutyId;
            this.BlockId = blockId;
            this.ClientDeptId = clientDeptId;
            this.SubDiscipline = subDiscipline;
            this.RequestGender = requestGender;
            this.Grade = grade;
            this.FallbackGrade = fallbackGrade;
            this.VacancyReason = vacancyReason;
            this.Date = date;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.BreakDuration = breakDuration;
            this.PoNumber = poNumber;
            this.UniqueNumber = uniqueNumber;
            this.Agency = agency;
            this.Skill = skill;
            this.Specialty = specialty;
            this.FallbackSkill = fallbackSkill;
            this.FallbackSpeciality = fallbackSpeciality;
            this.Status = status;
            this.Rates = rates;
            this.TimeIntervalRates = timeIntervalRates;
            this.Person = person;
        }
        
        /// <summary>
        /// Trust identifier of the duty
        /// </summary>
        /// <value>Trust identifier of the duty</value>
        [DataMember(Name="dutyId", EmitDefaultValue=false)]
        public string DutyId { get; set; }

        /// <summary>
        /// Identifier of the slave duty if duty is part of consolidated duties
        /// </summary>
        /// <value>Identifier of the slave duty if duty is part of consolidated duties</value>
        [DataMember(Name="slaveDutyId", EmitDefaultValue=false)]
        public string SlaveDutyId { get; set; }

        /// <summary>
        /// Identifier of block duties if duty is part of the block
        /// </summary>
        /// <value>Identifier of block duties if duty is part of the block</value>
        [DataMember(Name="blockId", EmitDefaultValue=false)]
        public string BlockId { get; set; }

        /// <summary>
        /// BankStaff ward trust identifier
        /// </summary>
        /// <value>BankStaff ward trust identifier</value>
        [DataMember(Name="clientDeptId", EmitDefaultValue=false)]
        public string ClientDeptId { get; set; }

        /// <summary>
        /// Staff group trust identifier
        /// </summary>
        /// <value>Staff group trust identifier</value>
        [DataMember(Name="subDiscipline", EmitDefaultValue=false)]
        public string SubDiscipline { get; set; }


        /// <summary>
        /// Grade trust identifier of the request
        /// </summary>
        /// <value>Grade trust identifier of the request</value>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// Gets or Sets FallbackGrade
        /// </summary>
        [DataMember(Name="fallbackGrade", EmitDefaultValue=false)]
        public string FallbackGrade { get; set; }

        /// <summary>
        /// Gets or Sets VacancyReason
        /// </summary>
        [DataMember(Name="vacancyReason", EmitDefaultValue=false)]
        public string VacancyReason { get; set; }

        /// <summary>
        /// Date of the duty
        /// </summary>
        /// <value>Date of the duty</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// Start time of the shift
        /// </summary>
        /// <value>Start time of the shift</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// End time of the shift
        /// </summary>
        /// <value>End time of the shift</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Duration of break in minutes
        /// </summary>
        /// <value>Duration of break in minutes</value>
        [DataMember(Name="breakDuration", EmitDefaultValue=false)]
        public int BreakDuration { get; set; }

        /// <summary>
        /// Need to understand if needed from Trust/Agency
        /// </summary>
        /// <value>Need to understand if needed from Trust/Agency</value>
        [DataMember(Name="poNumber", EmitDefaultValue=false)]
        public int PoNumber { get; set; }

        /// <summary>
        /// BRN / Unique number
        /// </summary>
        /// <value>BRN / Unique number</value>
        [DataMember(Name="uniqueNumber", EmitDefaultValue=false)]
        public int UniqueNumber { get; set; }

        /// <summary>
        /// Supplying agency trust identifier
        /// </summary>
        /// <value>Supplying agency trust identifier</value>
        [DataMember(Name="agency", EmitDefaultValue=false)]
        public string Agency { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="skill", EmitDefaultValue=false)]
        public string Skill { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="specialty", EmitDefaultValue=false)]
        public string Specialty { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="fallbackSkill", EmitDefaultValue=false)]
        public string FallbackSkill { get; set; }

        /// <summary>
        /// Stored as free text in DE Provider
        /// </summary>
        /// <value>Stored as free text in DE Provider</value>
        [DataMember(Name="fallbackSpeciality", EmitDefaultValue=false)]
        public string FallbackSpeciality { get; set; }


        /// <summary>
        /// Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency
        /// </summary>
        /// <value>Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency</value>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public List<Rates> Rates { get; set; }

        /// <summary>
        /// Array of rates and intervals for which the rate is applied
        /// </summary>
        /// <value>Array of rates and intervals for which the rate is applied</value>
        [DataMember(Name="timeIntervalRates", EmitDefaultValue=false)]
        public List<TimeIntervalRates> TimeIntervalRates { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public Person Person { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Duty {\n");
            sb.Append("  DutyId: ").Append(DutyId).Append("\n");
            sb.Append("  SlaveDutyId: ").Append(SlaveDutyId).Append("\n");
            sb.Append("  BlockId: ").Append(BlockId).Append("\n");
            sb.Append("  ClientDeptId: ").Append(ClientDeptId).Append("\n");
            sb.Append("  SubDiscipline: ").Append(SubDiscipline).Append("\n");
            sb.Append("  RequestGender: ").Append(RequestGender).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  FallbackGrade: ").Append(FallbackGrade).Append("\n");
            sb.Append("  VacancyReason: ").Append(VacancyReason).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  BreakDuration: ").Append(BreakDuration).Append("\n");
            sb.Append("  PoNumber: ").Append(PoNumber).Append("\n");
            sb.Append("  UniqueNumber: ").Append(UniqueNumber).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  Skill: ").Append(Skill).Append("\n");
            sb.Append("  Specialty: ").Append(Specialty).Append("\n");
            sb.Append("  FallbackSkill: ").Append(FallbackSkill).Append("\n");
            sb.Append("  FallbackSpeciality: ").Append(FallbackSpeciality).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  TimeIntervalRates: ").Append(TimeIntervalRates).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Duty);
        }

        /// <summary>
        /// Returns true if Duty instances are equal
        /// </summary>
        /// <param name="input">Instance of Duty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Duty input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DutyId == input.DutyId ||
                    (this.DutyId != null &&
                    this.DutyId.Equals(input.DutyId))
                ) && 
                (
                    this.SlaveDutyId == input.SlaveDutyId ||
                    (this.SlaveDutyId != null &&
                    this.SlaveDutyId.Equals(input.SlaveDutyId))
                ) && 
                (
                    this.BlockId == input.BlockId ||
                    (this.BlockId != null &&
                    this.BlockId.Equals(input.BlockId))
                ) && 
                (
                    this.ClientDeptId == input.ClientDeptId ||
                    (this.ClientDeptId != null &&
                    this.ClientDeptId.Equals(input.ClientDeptId))
                ) && 
                (
                    this.SubDiscipline == input.SubDiscipline ||
                    (this.SubDiscipline != null &&
                    this.SubDiscipline.Equals(input.SubDiscipline))
                ) && 
                (
                    this.RequestGender == input.RequestGender ||
                    (this.RequestGender != null &&
                    this.RequestGender.Equals(input.RequestGender))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.FallbackGrade == input.FallbackGrade ||
                    (this.FallbackGrade != null &&
                    this.FallbackGrade.Equals(input.FallbackGrade))
                ) && 
                (
                    this.VacancyReason == input.VacancyReason ||
                    (this.VacancyReason != null &&
                    this.VacancyReason.Equals(input.VacancyReason))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.BreakDuration == input.BreakDuration ||
                    (this.BreakDuration != null &&
                    this.BreakDuration.Equals(input.BreakDuration))
                ) && 
                (
                    this.PoNumber == input.PoNumber ||
                    (this.PoNumber != null &&
                    this.PoNumber.Equals(input.PoNumber))
                ) && 
                (
                    this.UniqueNumber == input.UniqueNumber ||
                    (this.UniqueNumber != null &&
                    this.UniqueNumber.Equals(input.UniqueNumber))
                ) && 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                ) && 
                (
                    this.Skill == input.Skill ||
                    (this.Skill != null &&
                    this.Skill.Equals(input.Skill))
                ) && 
                (
                    this.Specialty == input.Specialty ||
                    (this.Specialty != null &&
                    this.Specialty.Equals(input.Specialty))
                ) && 
                (
                    this.FallbackSkill == input.FallbackSkill ||
                    (this.FallbackSkill != null &&
                    this.FallbackSkill.Equals(input.FallbackSkill))
                ) && 
                (
                    this.FallbackSpeciality == input.FallbackSpeciality ||
                    (this.FallbackSpeciality != null &&
                    this.FallbackSpeciality.Equals(input.FallbackSpeciality))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                ) && 
                (
                    this.TimeIntervalRates == input.TimeIntervalRates ||
                    this.TimeIntervalRates != null &&
                    input.TimeIntervalRates != null &&
                    this.TimeIntervalRates.SequenceEqual(input.TimeIntervalRates)
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DutyId != null)
                    hashCode = hashCode * 59 + this.DutyId.GetHashCode();
                if (this.SlaveDutyId != null)
                    hashCode = hashCode * 59 + this.SlaveDutyId.GetHashCode();
                if (this.BlockId != null)
                    hashCode = hashCode * 59 + this.BlockId.GetHashCode();
                if (this.ClientDeptId != null)
                    hashCode = hashCode * 59 + this.ClientDeptId.GetHashCode();
                if (this.SubDiscipline != null)
                    hashCode = hashCode * 59 + this.SubDiscipline.GetHashCode();
                if (this.RequestGender != null)
                    hashCode = hashCode * 59 + this.RequestGender.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.FallbackGrade != null)
                    hashCode = hashCode * 59 + this.FallbackGrade.GetHashCode();
                if (this.VacancyReason != null)
                    hashCode = hashCode * 59 + this.VacancyReason.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.BreakDuration != null)
                    hashCode = hashCode * 59 + this.BreakDuration.GetHashCode();
                if (this.PoNumber != null)
                    hashCode = hashCode * 59 + this.PoNumber.GetHashCode();
                if (this.UniqueNumber != null)
                    hashCode = hashCode * 59 + this.UniqueNumber.GetHashCode();
                if (this.Agency != null)
                    hashCode = hashCode * 59 + this.Agency.GetHashCode();
                if (this.Skill != null)
                    hashCode = hashCode * 59 + this.Skill.GetHashCode();
                if (this.Specialty != null)
                    hashCode = hashCode * 59 + this.Specialty.GetHashCode();
                if (this.FallbackSkill != null)
                    hashCode = hashCode * 59 + this.FallbackSkill.GetHashCode();
                if (this.FallbackSpeciality != null)
                    hashCode = hashCode * 59 + this.FallbackSpeciality.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                if (this.TimeIntervalRates != null)
                    hashCode = hashCode * 59 + this.TimeIntervalRates.GetHashCode();
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

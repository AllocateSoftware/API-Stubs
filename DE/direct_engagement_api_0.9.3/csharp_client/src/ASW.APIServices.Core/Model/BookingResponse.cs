/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// BookingResponse
    /// </summary>
    [DataContract]
    public partial class BookingResponse :  IEquatable<BookingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingResponse" /> class.
        /// </summary>
        /// <param name="dutyId">Trust identifier of the booked duty.</param>
        /// <param name="bookingId">Trust identifier of the booking in BankStaff.</param>
        /// <param name="allocatePersonId">Trust identifier of the booked person in BankStaff.</param>
        /// <param name="masterDutyId">Trust identifier of the master duty if the duty is part of the consolidated duty.</param>
        /// <param name="slaveDutyId">Trust identifier of the slave duty if the duty is part of the consolidated duty.</param>
        public BookingResponse(string dutyId = default(string), string bookingId = default(string), string allocatePersonId = default(string), string masterDutyId = default(string), string slaveDutyId = default(string))
        {
            this.DutyId = dutyId;
            this.BookingId = bookingId;
            this.AllocatePersonId = allocatePersonId;
            this.MasterDutyId = masterDutyId;
            this.SlaveDutyId = slaveDutyId;
        }
        
        /// <summary>
        /// Trust identifier of the booked duty
        /// </summary>
        /// <value>Trust identifier of the booked duty</value>
        [DataMember(Name="dutyId", EmitDefaultValue=false)]
        public string DutyId { get; set; }

        /// <summary>
        /// Trust identifier of the booking in BankStaff
        /// </summary>
        /// <value>Trust identifier of the booking in BankStaff</value>
        [DataMember(Name="bookingId", EmitDefaultValue=false)]
        public string BookingId { get; set; }

        /// <summary>
        /// Trust identifier of the booked person in BankStaff
        /// </summary>
        /// <value>Trust identifier of the booked person in BankStaff</value>
        [DataMember(Name="allocatePersonId", EmitDefaultValue=false)]
        public string AllocatePersonId { get; set; }

        /// <summary>
        /// Trust identifier of the master duty if the duty is part of the consolidated duty
        /// </summary>
        /// <value>Trust identifier of the master duty if the duty is part of the consolidated duty</value>
        [DataMember(Name="masterDutyId", EmitDefaultValue=false)]
        public string MasterDutyId { get; set; }

        /// <summary>
        /// Trust identifier of the slave duty if the duty is part of the consolidated duty
        /// </summary>
        /// <value>Trust identifier of the slave duty if the duty is part of the consolidated duty</value>
        [DataMember(Name="slaveDutyId", EmitDefaultValue=false)]
        public string SlaveDutyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingResponse {\n");
            sb.Append("  DutyId: ").Append(DutyId).Append("\n");
            sb.Append("  BookingId: ").Append(BookingId).Append("\n");
            sb.Append("  AllocatePersonId: ").Append(AllocatePersonId).Append("\n");
            sb.Append("  MasterDutyId: ").Append(MasterDutyId).Append("\n");
            sb.Append("  SlaveDutyId: ").Append(SlaveDutyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookingResponse);
        }

        /// <summary>
        /// Returns true if BookingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BookingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DutyId == input.DutyId ||
                    (this.DutyId != null &&
                    this.DutyId.Equals(input.DutyId))
                ) && 
                (
                    this.BookingId == input.BookingId ||
                    (this.BookingId != null &&
                    this.BookingId.Equals(input.BookingId))
                ) && 
                (
                    this.AllocatePersonId == input.AllocatePersonId ||
                    (this.AllocatePersonId != null &&
                    this.AllocatePersonId.Equals(input.AllocatePersonId))
                ) && 
                (
                    this.MasterDutyId == input.MasterDutyId ||
                    (this.MasterDutyId != null &&
                    this.MasterDutyId.Equals(input.MasterDutyId))
                ) && 
                (
                    this.SlaveDutyId == input.SlaveDutyId ||
                    (this.SlaveDutyId != null &&
                    this.SlaveDutyId.Equals(input.SlaveDutyId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DutyId != null)
                    hashCode = hashCode * 59 + this.DutyId.GetHashCode();
                if (this.BookingId != null)
                    hashCode = hashCode * 59 + this.BookingId.GetHashCode();
                if (this.AllocatePersonId != null)
                    hashCode = hashCode * 59 + this.AllocatePersonId.GetHashCode();
                if (this.MasterDutyId != null)
                    hashCode = hashCode * 59 + this.MasterDutyId.GetHashCode();
                if (this.SlaveDutyId != null)
                    hashCode = hashCode * 59 + this.SlaveDutyId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

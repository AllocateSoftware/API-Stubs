/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// Rates
    /// </summary>
    [DataContract]
    public partial class Rates :  IEquatable<Rates>, IValidatableObject
    {
        /// <summary>
        /// Defines Reference
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReferenceEnum
        {
            /// <summary>
            /// Enum Basicworkerpay for value: basic_worker_pay
            /// </summary>
            [EnumMember(Value = "basic_worker_pay")]
            Basicworkerpay = 1,

            /// <summary>
            /// Enum Basiccommission for value: basic_commission
            /// </summary>
            [EnumMember(Value = "basic_commission")]
            Basiccommission = 2,

            /// <summary>
            /// Enum Basicni for value: basic_ni
            /// </summary>
            [EnumMember(Value = "basic_ni")]
            Basicni = 3,

            /// <summary>
            /// Enum Enhancedworkerpay for value: enhanced_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_worker_pay")]
            Enhancedworkerpay = 4,

            /// <summary>
            /// Enum Enhancedcommission for value: enhanced_commission
            /// </summary>
            [EnumMember(Value = "enhanced_commission")]
            Enhancedcommission = 5,

            /// <summary>
            /// Enum Enhancedni for value: enhanced_ni
            /// </summary>
            [EnumMember(Value = "enhanced_ni")]
            Enhancedni = 6,

            /// <summary>
            /// Enum Fixedworkerpay for value: fixed_worker_pay
            /// </summary>
            [EnumMember(Value = "fixed_worker_pay")]
            Fixedworkerpay = 7,

            /// <summary>
            /// Enum Fixedcommission for value: fixed_commission
            /// </summary>
            [EnumMember(Value = "fixed_commission")]
            Fixedcommission = 8,

            /// <summary>
            /// Enum Fixedni for value: fixed_ni
            /// </summary>
            [EnumMember(Value = "fixed_ni")]
            Fixedni = 9,

            /// <summary>
            /// Enum Enhancednightworkerpay for value: enhanced_night_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_night_worker_pay")]
            Enhancednightworkerpay = 10,

            /// <summary>
            /// Enum Enhancednightcommission for value: enhanced_night_commission
            /// </summary>
            [EnumMember(Value = "enhanced_night_commission")]
            Enhancednightcommission = 11,

            /// <summary>
            /// Enum Enhancednightni for value: enhanced_night_ni
            /// </summary>
            [EnumMember(Value = "enhanced_night_ni")]
            Enhancednightni = 12,

            /// <summary>
            /// Enum Enhancedsaturdayworkerpay for value: enhanced_saturday_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_saturday_worker_pay")]
            Enhancedsaturdayworkerpay = 13,

            /// <summary>
            /// Enum Enhancedsaturdaycommission for value: enhanced_saturday_commission
            /// </summary>
            [EnumMember(Value = "enhanced_saturday_commission")]
            Enhancedsaturdaycommission = 14,

            /// <summary>
            /// Enum Enhancedsaturdayni for value: enhanced_saturday_ni
            /// </summary>
            [EnumMember(Value = "enhanced_saturday_ni")]
            Enhancedsaturdayni = 15,

            /// <summary>
            /// Enum Enhancedsundayworkerpay for value: enhanced_sunday_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_sunday_worker_pay")]
            Enhancedsundayworkerpay = 16,

            /// <summary>
            /// Enum Enhancedsundaycommission for value: enhanced_sunday_commission
            /// </summary>
            [EnumMember(Value = "enhanced_sunday_commission")]
            Enhancedsundaycommission = 17,

            /// <summary>
            /// Enum Enhancedsundayni for value: enhanced_sunday_ni
            /// </summary>
            [EnumMember(Value = "enhanced_sunday_ni")]
            Enhancedsundayni = 18,

            /// <summary>
            /// Enum Enhancedholidayworkerpay for value: enhanced_holiday_worker_pay
            /// </summary>
            [EnumMember(Value = "enhanced_holiday_worker_pay")]
            Enhancedholidayworkerpay = 19,

            /// <summary>
            /// Enum Enhancedholidaycommission for value: enhanced_holiday_commission
            /// </summary>
            [EnumMember(Value = "enhanced_holiday_commission")]
            Enhancedholidaycommission = 20,

            /// <summary>
            /// Enum Enhancedholidayni for value: enhanced_holiday_ni
            /// </summary>
            [EnumMember(Value = "enhanced_holiday_ni")]
            Enhancedholidayni = 21

        }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public ReferenceEnum? Reference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rates" /> class.
        /// </summary>
        /// <param name="reference">reference.</param>
        /// <param name="rate">rate.</param>
        public Rates(ReferenceEnum? reference = default(ReferenceEnum?), decimal rate = default(decimal))
        {
            this.Reference = reference;
            this.Rate = rate;
        }
        

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rates {\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rates);
        }

        /// <summary>
        /// Returns true if Rates instances are equal
        /// </summary>
        /// <param name="input">Instance of Rates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// XPaginationHeader
    /// </summary>
    [DataContract]
    public partial class XPaginationHeader :  IEquatable<XPaginationHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XPaginationHeader" /> class.
        /// </summary>
        /// <param name="currentPage">Current page of the response.</param>
        /// <param name="pageSize">Number of rows per page.</param>
        /// <param name="totalCount">Total number of rows in the response.</param>
        /// <param name="totalPages">Total number of pages of the response.</param>
        /// <param name="previousPageInputParameters">Input parameter values for getting the previous page of the response.</param>
        /// <param name="nextPageInputParameters">Input parameter values for calling the next page of the response.</param>
        public XPaginationHeader(int currentPage = default(int), int pageSize = default(int), int totalCount = default(int), int totalPages = default(int), string previousPageInputParameters = default(string), string nextPageInputParameters = default(string))
        {
            this.CurrentPage = currentPage;
            this.PageSize = pageSize;
            this.TotalCount = totalCount;
            this.TotalPages = totalPages;
            this.PreviousPageInputParameters = previousPageInputParameters;
            this.NextPageInputParameters = nextPageInputParameters;
        }
        
        /// <summary>
        /// Current page of the response
        /// </summary>
        /// <value>Current page of the response</value>
        [DataMember(Name="currentPage", EmitDefaultValue=false)]
        public int CurrentPage { get; set; }

        /// <summary>
        /// Number of rows per page
        /// </summary>
        /// <value>Number of rows per page</value>
        [DataMember(Name="pageSize", EmitDefaultValue=false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Total number of rows in the response
        /// </summary>
        /// <value>Total number of rows in the response</value>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public int TotalCount { get; set; }

        /// <summary>
        /// Total number of pages of the response
        /// </summary>
        /// <value>Total number of pages of the response</value>
        [DataMember(Name="totalPages", EmitDefaultValue=false)]
        public int TotalPages { get; set; }

        /// <summary>
        /// Input parameter values for getting the previous page of the response
        /// </summary>
        /// <value>Input parameter values for getting the previous page of the response</value>
        [DataMember(Name="previousPageInputParameters", EmitDefaultValue=false)]
        public string PreviousPageInputParameters { get; set; }

        /// <summary>
        /// Input parameter values for calling the next page of the response
        /// </summary>
        /// <value>Input parameter values for calling the next page of the response</value>
        [DataMember(Name="nextPageInputParameters", EmitDefaultValue=false)]
        public string NextPageInputParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XPaginationHeader {\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  PreviousPageInputParameters: ").Append(PreviousPageInputParameters).Append("\n");
            sb.Append("  NextPageInputParameters: ").Append(NextPageInputParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XPaginationHeader);
        }

        /// <summary>
        /// Returns true if XPaginationHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of XPaginationHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XPaginationHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentPage == input.CurrentPage ||
                    (this.CurrentPage != null &&
                    this.CurrentPage.Equals(input.CurrentPage))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    (this.TotalCount != null &&
                    this.TotalCount.Equals(input.TotalCount))
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    (this.TotalPages != null &&
                    this.TotalPages.Equals(input.TotalPages))
                ) && 
                (
                    this.PreviousPageInputParameters == input.PreviousPageInputParameters ||
                    (this.PreviousPageInputParameters != null &&
                    this.PreviousPageInputParameters.Equals(input.PreviousPageInputParameters))
                ) && 
                (
                    this.NextPageInputParameters == input.NextPageInputParameters ||
                    (this.NextPageInputParameters != null &&
                    this.NextPageInputParameters.Equals(input.NextPageInputParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentPage != null)
                    hashCode = hashCode * 59 + this.CurrentPage.GetHashCode();
                if (this.PageSize != null)
                    hashCode = hashCode * 59 + this.PageSize.GetHashCode();
                if (this.TotalCount != null)
                    hashCode = hashCode * 59 + this.TotalCount.GetHashCode();
                if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                if (this.PreviousPageInputParameters != null)
                    hashCode = hashCode * 59 + this.PreviousPageInputParameters.GetHashCode();
                if (this.NextPageInputParameters != null)
                    hashCode = hashCode * 59 + this.NextPageInputParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

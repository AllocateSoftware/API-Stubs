/* 
 * DE Provider Direct Engagement API
 *
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ASW.APIServices.Core.Client.OpenAPIDateConverter;

namespace ASW.APIServices.Core.Model
{
    /// <summary>
    /// BookingInfo
    /// </summary>
    [DataContract]
    public partial class BookingInfo :  IEquatable<BookingInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingInfo" /> class.
        /// </summary>
        /// <param name="contractId">Id of the contract in DE Provider system.</param>
        /// <param name="agency">Id of the booked agency.</param>
        /// <param name="person">person.</param>
        /// <param name="grade">Booking grade trust identifier..</param>
        /// <param name="rates">Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency.</param>
        public BookingInfo(string contractId = default(string), int agency = default(int), Person person = default(Person), string grade = default(string), List<Rates> rates = default(List<Rates>))
        {
            this.ContractId = contractId;
            this.Agency = agency;
            this.Person = person;
            this.Grade = grade;
            this.Rates = rates;
        }
        
        /// <summary>
        /// Id of the contract in DE Provider system
        /// </summary>
        /// <value>Id of the contract in DE Provider system</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public string ContractId { get; set; }

        /// <summary>
        /// Id of the booked agency
        /// </summary>
        /// <value>Id of the booked agency</value>
        [DataMember(Name="agency", EmitDefaultValue=false)]
        public int Agency { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public Person Person { get; set; }

        /// <summary>
        /// Booking grade trust identifier.
        /// </summary>
        /// <value>Booking grade trust identifier.</value>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency
        /// </summary>
        /// <value>Trust Pay Agency &amp; Trust Pays DE provider - split rate between pay to worker and pay to agency</value>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public List<Rates> Rates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingInfo {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookingInfo);
        }

        /// <summary>
        /// Returns true if BookingInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BookingInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractId != null)
                    hashCode = hashCode * 59 + this.ContractId.GetHashCode();
                if (this.Agency != null)
                    hashCode = hashCode * 59 + this.Agency.GetHashCode();
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

# coding: utf-8

"""
    DE Provider Direct Engagement API

    description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from api_server.api_client import ApiClient
from api_server.exceptions import (
    ApiTypeError,
    ApiValueError
)


class DutyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_duty(self, version, trust_code, duty_id, **kwargs):  # noqa: E501
        """Cancel a duty  # noqa: E501

        Service that cancels certain duty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_duty(version, trust_code, duty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.cancel_duty_with_http_info(version, trust_code, duty_id, **kwargs)  # noqa: E501

    def cancel_duty_with_http_info(self, version, trust_code, duty_id, **kwargs):  # noqa: E501
        """Cancel a duty  # noqa: E501

        Service that cancels certain duty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_duty_with_http_info(version, trust_code, duty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['version', 'trust_code', 'duty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_duty" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `cancel_duty`")  # noqa: E501
        # verify the required parameter 'trust_code' is set
        if self.api_client.client_side_validation and ('trust_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['trust_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trust_code` when calling `cancel_duty`")  # noqa: E501
        # verify the required parameter 'duty_id' is set
        if self.api_client.client_side_validation and ('duty_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['duty_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duty_id` when calling `cancel_duty`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'trust_code' in local_var_params:
            path_params['trustCode'] = local_var_params['trust_code']  # noqa: E501
        if 'duty_id' in local_var_params:
            path_params['dutyId'] = local_var_params['duty_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/trustcode/{trustCode}/duty/{dutyId}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fill_duty(self, version, trust_code, duty_id, booking_info, **kwargs):  # noqa: E501
        """Creates booking for duty  # noqa: E501

        Service that will create new booking on HR side with data sent by DE Provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fill_duty(version, trust_code, duty_id, booking_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param BookingInfo booking_info: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fill_duty_with_http_info(version, trust_code, duty_id, booking_info, **kwargs)  # noqa: E501

    def fill_duty_with_http_info(self, version, trust_code, duty_id, booking_info, **kwargs):  # noqa: E501
        """Creates booking for duty  # noqa: E501

        Service that will create new booking on HR side with data sent by DE Provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fill_duty_with_http_info(version, trust_code, duty_id, booking_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param BookingInfo booking_info: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BookingResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['version', 'trust_code', 'duty_id', 'booking_info']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fill_duty" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `fill_duty`")  # noqa: E501
        # verify the required parameter 'trust_code' is set
        if self.api_client.client_side_validation and ('trust_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['trust_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trust_code` when calling `fill_duty`")  # noqa: E501
        # verify the required parameter 'duty_id' is set
        if self.api_client.client_side_validation and ('duty_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['duty_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duty_id` when calling `fill_duty`")  # noqa: E501
        # verify the required parameter 'booking_info' is set
        if self.api_client.client_side_validation and ('booking_info' not in local_var_params or  # noqa: E501
                                                        local_var_params['booking_info'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `booking_info` when calling `fill_duty`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'trust_code' in local_var_params:
            path_params['trustCode'] = local_var_params['trust_code']  # noqa: E501
        if 'duty_id' in local_var_params:
            path_params['dutyId'] = local_var_params['duty_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'booking_info' in local_var_params:
            body_params = local_var_params['booking_info']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/trustcode/{trustCode}/duty/{dutyId}/booking', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BookingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_duty_details(self, version, trust_code, id, **kwargs):  # noqa: E501
        """Returns details about a duties.  # noqa: E501

        Returns details about a duties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_duty_details(version, trust_code, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param list[int] id: IDs of the duties to return (required)
        :param int page: Result page
        :param int page_size: Count of records per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Duty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_duty_details_with_http_info(version, trust_code, id, **kwargs)  # noqa: E501

    def get_duty_details_with_http_info(self, version, trust_code, id, **kwargs):  # noqa: E501
        """Returns details about a duties.  # noqa: E501

        Returns details about a duties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_duty_details_with_http_info(version, trust_code, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param list[int] id: IDs of the duties to return (required)
        :param int page: Result page
        :param int page_size: Count of records per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Duty, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['version', 'trust_code', 'id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_duty_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `get_duty_details`")  # noqa: E501
        # verify the required parameter 'trust_code' is set
        if self.api_client.client_side_validation and ('trust_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['trust_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trust_code` when calling `get_duty_details`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_duty_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'trust_code' in local_var_params:
            path_params['trustCode'] = local_var_params['trust_code']  # noqa: E501

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/trustcode/{trustCode}/duty/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Duty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_duty_details(self, version, trust_code, duty_id, **kwargs):  # noqa: E501
        """Returns details about a duties.  # noqa: E501

        Returns details about a duties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_duty_details(version, trust_code, duty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of a duty to return (required)
        :param int page: Result page
        :param int page_size: Count of records per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Duty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_single_duty_details_with_http_info(version, trust_code, duty_id, **kwargs)  # noqa: E501

    def get_single_duty_details_with_http_info(self, version, trust_code, duty_id, **kwargs):  # noqa: E501
        """Returns details about a duties.  # noqa: E501

        Returns details about a duties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_duty_details_with_http_info(version, trust_code, duty_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of a duty to return (required)
        :param int page: Result page
        :param int page_size: Count of records per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Duty, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['version', 'trust_code', 'duty_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_duty_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `get_single_duty_details`")  # noqa: E501
        # verify the required parameter 'trust_code' is set
        if self.api_client.client_side_validation and ('trust_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['trust_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trust_code` when calling `get_single_duty_details`")  # noqa: E501
        # verify the required parameter 'duty_id' is set
        if self.api_client.client_side_validation and ('duty_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['duty_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duty_id` when calling `get_single_duty_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'trust_code' in local_var_params:
            path_params['trustCode'] = local_var_params['trust_code']  # noqa: E501
        if 'duty_id' in local_var_params:
            path_params['dutyId'] = local_var_params['duty_id']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/trustcode/{trustCode}/duty/{dutyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Duty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_contract_status(self, version, trust_code, duty_id, contract_id, status_id, **kwargs):  # noqa: E501
        """Updates DE Contract status  # noqa: E501

        Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_contract_status(version, trust_code, duty_id, contract_id, status_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param str contract_id: ID of the contract from DE Provider's system (required)
        :param ContractStatus status_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_contract_status_with_http_info(version, trust_code, duty_id, contract_id, status_id, **kwargs)  # noqa: E501

    def update_contract_status_with_http_info(self, version, trust_code, duty_id, contract_id, status_id, **kwargs):  # noqa: E501
        """Updates DE Contract status  # noqa: E501

        Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_contract_status_with_http_info(version, trust_code, duty_id, contract_id, status_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param str contract_id: ID of the contract from DE Provider's system (required)
        :param ContractStatus status_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['version', 'trust_code', 'duty_id', 'contract_id', 'status_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_contract_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `update_contract_status`")  # noqa: E501
        # verify the required parameter 'trust_code' is set
        if self.api_client.client_side_validation and ('trust_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['trust_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trust_code` when calling `update_contract_status`")  # noqa: E501
        # verify the required parameter 'duty_id' is set
        if self.api_client.client_side_validation and ('duty_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['duty_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duty_id` when calling `update_contract_status`")  # noqa: E501
        # verify the required parameter 'contract_id' is set
        if self.api_client.client_side_validation and ('contract_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['contract_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `contract_id` when calling `update_contract_status`")  # noqa: E501
        # verify the required parameter 'status_id' is set
        if self.api_client.client_side_validation and ('status_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['status_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `status_id` when calling `update_contract_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'trust_code' in local_var_params:
            path_params['trustCode'] = local_var_params['trust_code']  # noqa: E501
        if 'duty_id' in local_var_params:
            path_params['dutyId'] = local_var_params['duty_id']  # noqa: E501
        if 'contract_id' in local_var_params:
            path_params['contractId'] = local_var_params['contract_id']  # noqa: E501
        if 'status_id' in local_var_params:
            path_params['statusId'] = local_var_params['status_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/trustcode/{trustCode}/duty/{dutyId}/contract/{contractId}/status/{statusId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_timesheets(self, version, trust_code, duty_id, inline_object, **kwargs):  # noqa: E501
        """Updates timesheet for duty  # noqa: E501

        Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_timesheets(version, trust_code, duty_id, inline_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param InlineObject inline_object: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_timesheets_with_http_info(version, trust_code, duty_id, inline_object, **kwargs)  # noqa: E501

    def update_timesheets_with_http_info(self, version, trust_code, duty_id, inline_object, **kwargs):  # noqa: E501
        """Updates timesheet for duty  # noqa: E501

        Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_timesheets_with_http_info(version, trust_code, duty_id, inline_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str version: API version (required)
        :param str trust_code: Trust code from BankStaff (required)
        :param int duty_id: ID of the duty associated with the DE contract (required)
        :param InlineObject inline_object: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['version', 'trust_code', 'duty_id', 'inline_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_timesheets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `update_timesheets`")  # noqa: E501
        # verify the required parameter 'trust_code' is set
        if self.api_client.client_side_validation and ('trust_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['trust_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trust_code` when calling `update_timesheets`")  # noqa: E501
        # verify the required parameter 'duty_id' is set
        if self.api_client.client_side_validation and ('duty_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['duty_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duty_id` when calling `update_timesheets`")  # noqa: E501
        # verify the required parameter 'inline_object' is set
        if self.api_client.client_side_validation and ('inline_object' not in local_var_params or  # noqa: E501
                                                        local_var_params['inline_object'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `inline_object` when calling `update_timesheets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'trust_code' in local_var_params:
            path_params['trustCode'] = local_var_params['trust_code']  # noqa: E501
        if 'duty_id' in local_var_params:
            path_params['dutyId'] = local_var_params['duty_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'inline_object' in local_var_params:
            body_params = local_var_params['inline_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{version}/trustcode/{trustCode}/duty/{dutyId}/timesheet', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

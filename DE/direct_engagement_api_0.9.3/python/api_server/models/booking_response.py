# coding: utf-8

"""
    DE Provider Direct Engagement API

    description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class BookingResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'duty_id': 'str',
        'booking_id': 'str',
        'allocate_person_id': 'str',
        'master_duty_id': 'str',
        'slave_duty_id': 'str'
    }

    attribute_map = {
        'duty_id': 'dutyId',
        'booking_id': 'bookingId',
        'allocate_person_id': 'allocatePersonId',
        'master_duty_id': 'masterDutyId',
        'slave_duty_id': 'slaveDutyId'
    }

    def __init__(self, duty_id=None, booking_id=None, allocate_person_id=None, master_duty_id=None, slave_duty_id=None, local_vars_configuration=None):  # noqa: E501
        """BookingResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._duty_id = None
        self._booking_id = None
        self._allocate_person_id = None
        self._master_duty_id = None
        self._slave_duty_id = None
        self.discriminator = None

        if duty_id is not None:
            self.duty_id = duty_id
        if booking_id is not None:
            self.booking_id = booking_id
        if allocate_person_id is not None:
            self.allocate_person_id = allocate_person_id
        if master_duty_id is not None:
            self.master_duty_id = master_duty_id
        if slave_duty_id is not None:
            self.slave_duty_id = slave_duty_id

    @property
    def duty_id(self):
        """Gets the duty_id of this BookingResponse.  # noqa: E501

        Trust identifier of the booked duty  # noqa: E501

        :return: The duty_id of this BookingResponse.  # noqa: E501
        :rtype: str
        """
        return self._duty_id

    @duty_id.setter
    def duty_id(self, duty_id):
        """Sets the duty_id of this BookingResponse.

        Trust identifier of the booked duty  # noqa: E501

        :param duty_id: The duty_id of this BookingResponse.  # noqa: E501
        :type: str
        """

        self._duty_id = duty_id

    @property
    def booking_id(self):
        """Gets the booking_id of this BookingResponse.  # noqa: E501

        Trust identifier of the booking in BankStaff  # noqa: E501

        :return: The booking_id of this BookingResponse.  # noqa: E501
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """Sets the booking_id of this BookingResponse.

        Trust identifier of the booking in BankStaff  # noqa: E501

        :param booking_id: The booking_id of this BookingResponse.  # noqa: E501
        :type: str
        """

        self._booking_id = booking_id

    @property
    def allocate_person_id(self):
        """Gets the allocate_person_id of this BookingResponse.  # noqa: E501

        Trust identifier of the booked person in BankStaff  # noqa: E501

        :return: The allocate_person_id of this BookingResponse.  # noqa: E501
        :rtype: str
        """
        return self._allocate_person_id

    @allocate_person_id.setter
    def allocate_person_id(self, allocate_person_id):
        """Sets the allocate_person_id of this BookingResponse.

        Trust identifier of the booked person in BankStaff  # noqa: E501

        :param allocate_person_id: The allocate_person_id of this BookingResponse.  # noqa: E501
        :type: str
        """

        self._allocate_person_id = allocate_person_id

    @property
    def master_duty_id(self):
        """Gets the master_duty_id of this BookingResponse.  # noqa: E501

        Trust identifier of the master duty if the duty is part of the consolidated duty  # noqa: E501

        :return: The master_duty_id of this BookingResponse.  # noqa: E501
        :rtype: str
        """
        return self._master_duty_id

    @master_duty_id.setter
    def master_duty_id(self, master_duty_id):
        """Sets the master_duty_id of this BookingResponse.

        Trust identifier of the master duty if the duty is part of the consolidated duty  # noqa: E501

        :param master_duty_id: The master_duty_id of this BookingResponse.  # noqa: E501
        :type: str
        """

        self._master_duty_id = master_duty_id

    @property
    def slave_duty_id(self):
        """Gets the slave_duty_id of this BookingResponse.  # noqa: E501

        Trust identifier of the slave duty if the duty is part of the consolidated duty  # noqa: E501

        :return: The slave_duty_id of this BookingResponse.  # noqa: E501
        :rtype: str
        """
        return self._slave_duty_id

    @slave_duty_id.setter
    def slave_duty_id(self, slave_duty_id):
        """Sets the slave_duty_id of this BookingResponse.

        Trust identifier of the slave duty if the duty is part of the consolidated duty  # noqa: E501

        :param slave_duty_id: The slave_duty_id of this BookingResponse.  # noqa: E501
        :type: str
        """

        self._slave_duty_id = slave_duty_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookingResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BookingResponse):
            return True

        return self.to_dict() != other.to_dict()

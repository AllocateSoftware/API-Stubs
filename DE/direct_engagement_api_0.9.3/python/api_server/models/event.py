# coding: utf-8

"""
    DE Provider Direct Engagement API

    description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_type': 'str',
        'entity_type': 'str',
        'entity_id': 'str',
        'time_stamp': 'datetime'
    }

    attribute_map = {
        'event_type': 'eventType',
        'entity_type': 'entityType',
        'entity_id': 'entityId',
        'time_stamp': 'timeStamp'
    }

    def __init__(self, event_type=None, entity_type=None, entity_id=None, time_stamp=None, local_vars_configuration=None):  # noqa: E501
        """Event - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event_type = None
        self._entity_type = None
        self._entity_id = None
        self._time_stamp = None
        self.discriminator = None

        if event_type is not None:
            self.event_type = event_type
        if entity_type is not None:
            self.entity_type = entity_type
        if entity_id is not None:
            self.entity_id = entity_id
        if time_stamp is not None:
            self.time_stamp = time_stamp

    @property
    def event_type(self):
        """Gets the event_type of this Event.  # noqa: E501

        Type of change that is done to the entity  # noqa: E501

        :return: The event_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.

        Type of change that is done to the entity  # noqa: E501

        :param event_type: The event_type of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATE", "DELETE", "UPDATE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and event_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def entity_type(self):
        """Gets the entity_type of this Event.  # noqa: E501

        Entity that is changed.  # noqa: E501

        :return: The entity_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Event.

        Entity that is changed.  # noqa: E501

        :param entity_type: The entity_type of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["duty", "timesheet", "booking", "grade", "agency", "reason_for_vacancy", "contract_status", "staff_group", "unit"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and entity_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def entity_id(self):
        """Gets the entity_id of this Event.  # noqa: E501

        Trust identifier of the changed entity  # noqa: E501

        :return: The entity_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Event.

        Trust identifier of the changed entity  # noqa: E501

        :param entity_id: The entity_id of this Event.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this Event.  # noqa: E501

        Timestamp of the event  # noqa: E501

        :return: The time_stamp of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this Event.

        Timestamp of the event  # noqa: E501

        :param time_stamp: The time_stamp of this Event.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()

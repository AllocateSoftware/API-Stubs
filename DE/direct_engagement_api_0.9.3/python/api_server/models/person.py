# coding: utf-8

"""
    DE Provider Direct Engagement API

    description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class Person(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'surname': 'str',
        'date_of_birth': 'date',
        'person_gender': 'PersonGender',
        'match_id': 'str',
        'allocate_person_id': 'str',
        'email': 'str',
        'telephone_number': 'str',
        'ext_system_id': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'surname': 'surname',
        'date_of_birth': 'dateOfBirth',
        'person_gender': 'personGender',
        'match_id': 'matchId',
        'allocate_person_id': 'allocatePersonId',
        'email': 'email',
        'telephone_number': 'telephoneNumber',
        'ext_system_id': 'extSystemId'
    }

    def __init__(self, first_name=None, surname=None, date_of_birth=None, person_gender=None, match_id=None, allocate_person_id=None, email=None, telephone_number=None, ext_system_id=None, local_vars_configuration=None):  # noqa: E501
        """Person - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._surname = None
        self._date_of_birth = None
        self._person_gender = None
        self._match_id = None
        self._allocate_person_id = None
        self._email = None
        self._telephone_number = None
        self._ext_system_id = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if surname is not None:
            self.surname = surname
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if person_gender is not None:
            self.person_gender = person_gender
        if match_id is not None:
            self.match_id = match_id
        if allocate_person_id is not None:
            self.allocate_person_id = allocate_person_id
        if email is not None:
            self.email = email
        if telephone_number is not None:
            self.telephone_number = telephone_number
        if ext_system_id is not None:
            self.ext_system_id = ext_system_id

    @property
    def first_name(self):
        """Gets the first_name of this Person.  # noqa: E501


        :return: The first_name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.


        :param first_name: The first_name of this Person.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def surname(self):
        """Gets the surname of this Person.  # noqa: E501


        :return: The surname of this Person.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this Person.


        :param surname: The surname of this Person.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Person.  # noqa: E501

        Date of birth  # noqa: E501

        :return: The date_of_birth of this Person.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Person.

        Date of birth  # noqa: E501

        :param date_of_birth: The date_of_birth of this Person.  # noqa: E501
        :type: date
        """

        self._date_of_birth = date_of_birth

    @property
    def person_gender(self):
        """Gets the person_gender of this Person.  # noqa: E501


        :return: The person_gender of this Person.  # noqa: E501
        :rtype: PersonGender
        """
        return self._person_gender

    @person_gender.setter
    def person_gender(self, person_gender):
        """Sets the person_gender of this Person.


        :param person_gender: The person_gender of this Person.  # noqa: E501
        :type: PersonGender
        """

        self._person_gender = person_gender

    @property
    def match_id(self):
        """Gets the match_id of this Person.  # noqa: E501

        NINumber.e-mail   # noqa: E501

        :return: The match_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this Person.

        NINumber.e-mail   # noqa: E501

        :param match_id: The match_id of this Person.  # noqa: E501
        :type: str
        """

        self._match_id = match_id

    @property
    def allocate_person_id(self):
        """Gets the allocate_person_id of this Person.  # noqa: E501

        Business Key  # noqa: E501

        :return: The allocate_person_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._allocate_person_id

    @allocate_person_id.setter
    def allocate_person_id(self, allocate_person_id):
        """Sets the allocate_person_id of this Person.

        Business Key  # noqa: E501

        :param allocate_person_id: The allocate_person_id of this Person.  # noqa: E501
        :type: str
        """

        self._allocate_person_id = allocate_person_id

    @property
    def email(self):
        """Gets the email of this Person.  # noqa: E501


        :return: The email of this Person.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.


        :param email: The email of this Person.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def telephone_number(self):
        """Gets the telephone_number of this Person.  # noqa: E501


        :return: The telephone_number of this Person.  # noqa: E501
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this Person.


        :param telephone_number: The telephone_number of this Person.  # noqa: E501
        :type: str
        """

        self._telephone_number = telephone_number

    @property
    def ext_system_id(self):
        """Gets the ext_system_id of this Person.  # noqa: E501


        :return: The ext_system_id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._ext_system_id

    @ext_system_id.setter
    def ext_system_id(self, ext_system_id):
        """Sets the ext_system_id of this Person.


        :param ext_system_id: The ext_system_id of this Person.  # noqa: E501
        :type: str
        """

        self._ext_system_id = ext_system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Person):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Person):
            return True

        return self.to_dict() != other.to_dict()

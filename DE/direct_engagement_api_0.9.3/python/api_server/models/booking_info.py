# coding: utf-8

"""
    DE Provider Direct Engagement API

    description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from api_server.configuration import Configuration


class BookingInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contract_id': 'str',
        'agency': 'int',
        'person': 'Person',
        'grade': 'str',
        'rates': 'list[Rates]'
    }

    attribute_map = {
        'contract_id': 'contractId',
        'agency': 'agency',
        'person': 'person',
        'grade': 'grade',
        'rates': 'rates'
    }

    def __init__(self, contract_id=None, agency=None, person=None, grade=None, rates=None, local_vars_configuration=None):  # noqa: E501
        """BookingInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contract_id = None
        self._agency = None
        self._person = None
        self._grade = None
        self._rates = None
        self.discriminator = None

        if contract_id is not None:
            self.contract_id = contract_id
        if agency is not None:
            self.agency = agency
        if person is not None:
            self.person = person
        if grade is not None:
            self.grade = grade
        if rates is not None:
            self.rates = rates

    @property
    def contract_id(self):
        """Gets the contract_id of this BookingInfo.  # noqa: E501

        Id of the contract in DE Provider system  # noqa: E501

        :return: The contract_id of this BookingInfo.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this BookingInfo.

        Id of the contract in DE Provider system  # noqa: E501

        :param contract_id: The contract_id of this BookingInfo.  # noqa: E501
        :type: str
        """

        self._contract_id = contract_id

    @property
    def agency(self):
        """Gets the agency of this BookingInfo.  # noqa: E501

        Id of the booked agency  # noqa: E501

        :return: The agency of this BookingInfo.  # noqa: E501
        :rtype: int
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this BookingInfo.

        Id of the booked agency  # noqa: E501

        :param agency: The agency of this BookingInfo.  # noqa: E501
        :type: int
        """

        self._agency = agency

    @property
    def person(self):
        """Gets the person of this BookingInfo.  # noqa: E501


        :return: The person of this BookingInfo.  # noqa: E501
        :rtype: Person
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this BookingInfo.


        :param person: The person of this BookingInfo.  # noqa: E501
        :type: Person
        """

        self._person = person

    @property
    def grade(self):
        """Gets the grade of this BookingInfo.  # noqa: E501

        Booking grade trust identifier.  # noqa: E501

        :return: The grade of this BookingInfo.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this BookingInfo.

        Booking grade trust identifier.  # noqa: E501

        :param grade: The grade of this BookingInfo.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def rates(self):
        """Gets the rates of this BookingInfo.  # noqa: E501

        Trust Pay Agency & Trust Pays DE provider - split rate between pay to worker and pay to agency  # noqa: E501

        :return: The rates of this BookingInfo.  # noqa: E501
        :rtype: list[Rates]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this BookingInfo.

        Trust Pay Agency & Trust Pays DE provider - split rate between pay to worker and pay to agency  # noqa: E501

        :param rates: The rates of this BookingInfo.  # noqa: E501
        :type: list[Rates]
        """

        self._rates = rates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookingInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BookingInfo):
            return True

        return self.to_dict() != other.to_dict()

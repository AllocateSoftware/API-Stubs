/**
 * DE Provider Direct Engagement API
 * description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { BookingInfo } from '../model/bookingInfo';
import { BookingResponse } from '../model/bookingResponse';
import { ContractStatus } from '../model/contractStatus';
import { Duty } from '../model/duty';
import { InlineObject } from '../model/inlineObject';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class DutyService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Cancel a duty
     * Service that cancels certain duty.
     * @param version API version
     * @param trustCode Trust code from BankStaff
     * @param dutyId ID of the duty associated with the DE contract
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelDuty(version: string, trustCode: string, dutyId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public cancelDuty(version: string, trustCode: string, dutyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public cancelDuty(version: string, trustCode: string, dutyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public cancelDuty(version: string, trustCode: string, dutyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling cancelDuty.');
        }
        if (trustCode === null || trustCode === undefined) {
            throw new Error('Required parameter trustCode was null or undefined when calling cancelDuty.');
        }
        if (dutyId === null || dutyId === undefined) {
            throw new Error('Required parameter dutyId was null or undefined when calling cancelDuty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.post<any>(`${this.configuration.basePath}/${encodeURIComponent(String(version))}/trustcode/${encodeURIComponent(String(trustCode))}/duty/${encodeURIComponent(String(dutyId))}/cancel`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates booking for duty
     * Service that will create new booking on HR side with data sent by DE Provider.
     * @param version API version
     * @param trustCode Trust code from BankStaff
     * @param dutyId ID of the duty associated with the DE contract
     * @param bookingInfo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fillDuty(version: string, trustCode: string, dutyId: number, bookingInfo: BookingInfo, observe?: 'body', reportProgress?: boolean): Observable<BookingResponse>;
    public fillDuty(version: string, trustCode: string, dutyId: number, bookingInfo: BookingInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BookingResponse>>;
    public fillDuty(version: string, trustCode: string, dutyId: number, bookingInfo: BookingInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BookingResponse>>;
    public fillDuty(version: string, trustCode: string, dutyId: number, bookingInfo: BookingInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling fillDuty.');
        }
        if (trustCode === null || trustCode === undefined) {
            throw new Error('Required parameter trustCode was null or undefined when calling fillDuty.');
        }
        if (dutyId === null || dutyId === undefined) {
            throw new Error('Required parameter dutyId was null or undefined when calling fillDuty.');
        }
        if (bookingInfo === null || bookingInfo === undefined) {
            throw new Error('Required parameter bookingInfo was null or undefined when calling fillDuty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BookingResponse>(`${this.configuration.basePath}/${encodeURIComponent(String(version))}/trustcode/${encodeURIComponent(String(trustCode))}/duty/${encodeURIComponent(String(dutyId))}/booking`,
            bookingInfo,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns details about a duties.
     * Returns details about a duties.
     * @param version API version
     * @param trustCode Trust code from BankStaff
     * @param id IDs of the duties to return
     * @param page Result page
     * @param pageSize Count of records per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDutyDetails(version: string, trustCode: string, id: Array<number>, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<Duty>;
    public getDutyDetails(version: string, trustCode: string, id: Array<number>, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Duty>>;
    public getDutyDetails(version: string, trustCode: string, id: Array<number>, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Duty>>;
    public getDutyDetails(version: string, trustCode: string, id: Array<number>, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getDutyDetails.');
        }
        if (trustCode === null || trustCode === undefined) {
            throw new Error('Required parameter trustCode was null or undefined when calling getDutyDetails.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDutyDetails.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (id) {
            id.forEach((element) => {
                queryParameters = queryParameters.append('id', <any>element);
            })
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Duty>(`${this.configuration.basePath}/${encodeURIComponent(String(version))}/trustcode/${encodeURIComponent(String(trustCode))}/duty/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns details about a duties.
     * Returns details about a duties.
     * @param version API version
     * @param trustCode Trust code from BankStaff
     * @param dutyId ID of a duty to return
     * @param page Result page
     * @param pageSize Count of records per page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSingleDutyDetails(version: string, trustCode: string, dutyId: number, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<Duty>;
    public getSingleDutyDetails(version: string, trustCode: string, dutyId: number, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Duty>>;
    public getSingleDutyDetails(version: string, trustCode: string, dutyId: number, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Duty>>;
    public getSingleDutyDetails(version: string, trustCode: string, dutyId: number, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getSingleDutyDetails.');
        }
        if (trustCode === null || trustCode === undefined) {
            throw new Error('Required parameter trustCode was null or undefined when calling getSingleDutyDetails.');
        }
        if (dutyId === null || dutyId === undefined) {
            throw new Error('Required parameter dutyId was null or undefined when calling getSingleDutyDetails.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<Duty>(`${this.configuration.basePath}/${encodeURIComponent(String(version))}/trustcode/${encodeURIComponent(String(trustCode))}/duty/${encodeURIComponent(String(dutyId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates DE Contract status
     * Service that will be used by DE Provider to update the contract status, after DE contract is created/approved.
     * @param version API version
     * @param trustCode Trust code from BankStaff
     * @param dutyId ID of the duty associated with the DE contract
     * @param contractId ID of the contract from DE Provider\&#39;s system
     * @param statusId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateContractStatus(version: string, trustCode: string, dutyId: number, contractId: string, statusId: ContractStatus, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateContractStatus(version: string, trustCode: string, dutyId: number, contractId: string, statusId: ContractStatus, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateContractStatus(version: string, trustCode: string, dutyId: number, contractId: string, statusId: ContractStatus, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateContractStatus(version: string, trustCode: string, dutyId: number, contractId: string, statusId: ContractStatus, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling updateContractStatus.');
        }
        if (trustCode === null || trustCode === undefined) {
            throw new Error('Required parameter trustCode was null or undefined when calling updateContractStatus.');
        }
        if (dutyId === null || dutyId === undefined) {
            throw new Error('Required parameter dutyId was null or undefined when calling updateContractStatus.');
        }
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling updateContractStatus.');
        }
        if (statusId === null || statusId === undefined) {
            throw new Error('Required parameter statusId was null or undefined when calling updateContractStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.put<any>(`${this.configuration.basePath}/${encodeURIComponent(String(version))}/trustcode/${encodeURIComponent(String(trustCode))}/duty/${encodeURIComponent(String(dutyId))}/contract/${encodeURIComponent(String(contractId))}/status/${encodeURIComponent(String(statusId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates timesheet for duty
     * Service that will be used by DE Provider to update the timesheets, after approving the payment on their side.
     * @param version API version
     * @param trustCode Trust code from BankStaff
     * @param dutyId ID of the duty associated with the DE contract
     * @param inlineObject 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTimesheets(version: string, trustCode: string, dutyId: number, inlineObject: InlineObject, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTimesheets(version: string, trustCode: string, dutyId: number, inlineObject: InlineObject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTimesheets(version: string, trustCode: string, dutyId: number, inlineObject: InlineObject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTimesheets(version: string, trustCode: string, dutyId: number, inlineObject: InlineObject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling updateTimesheets.');
        }
        if (trustCode === null || trustCode === undefined) {
            throw new Error('Required parameter trustCode was null or undefined when calling updateTimesheets.');
        }
        if (dutyId === null || dutyId === undefined) {
            throw new Error('Required parameter dutyId was null or undefined when calling updateTimesheets.');
        }
        if (inlineObject === null || inlineObject === undefined) {
            throw new Error('Required parameter inlineObject was null or undefined when calling updateTimesheets.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/${encodeURIComponent(String(version))}/trustcode/${encodeURIComponent(String(trustCode))}/duty/${encodeURIComponent(String(dutyId))}/timesheet`,
            inlineObject,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

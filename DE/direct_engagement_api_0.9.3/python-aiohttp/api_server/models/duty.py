# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from api_server.models.base_model_ import Model
from api_server.models.person import Person
from api_server.models.rates import Rates
from api_server.models.request_gender import RequestGender
from api_server.models.time_interval_rates import TimeIntervalRates
from api_server import util


class Duty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duty_id: str=None, slave_duty_id: str=None, block_id: str=None, client_dept_id: str=None, sub_discipline: str=None, request_gender: RequestGender=None, grade: str=None, fallback_grade: str=None, vacancy_reason: str=None, date: date=None, start_time: str=None, end_time: str=None, break_duration: int=None, po_number: int=None, unique_number: int=None, agency: str=None, skill: str=None, specialty: str=None, fallback_skill: str=None, fallback_speciality: str=None, status: str=None, rates: List[Rates]=None, time_interval_rates: List[TimeIntervalRates]=None, person: Person=None):
        """Duty - a model defined in OpenAPI

        :param duty_id: The duty_id of this Duty.
        :param slave_duty_id: The slave_duty_id of this Duty.
        :param block_id: The block_id of this Duty.
        :param client_dept_id: The client_dept_id of this Duty.
        :param sub_discipline: The sub_discipline of this Duty.
        :param request_gender: The request_gender of this Duty.
        :param grade: The grade of this Duty.
        :param fallback_grade: The fallback_grade of this Duty.
        :param vacancy_reason: The vacancy_reason of this Duty.
        :param date: The date of this Duty.
        :param start_time: The start_time of this Duty.
        :param end_time: The end_time of this Duty.
        :param break_duration: The break_duration of this Duty.
        :param po_number: The po_number of this Duty.
        :param unique_number: The unique_number of this Duty.
        :param agency: The agency of this Duty.
        :param skill: The skill of this Duty.
        :param specialty: The specialty of this Duty.
        :param fallback_skill: The fallback_skill of this Duty.
        :param fallback_speciality: The fallback_speciality of this Duty.
        :param status: The status of this Duty.
        :param rates: The rates of this Duty.
        :param time_interval_rates: The time_interval_rates of this Duty.
        :param person: The person of this Duty.
        """
        self.openapi_types = {
            'duty_id': str,
            'slave_duty_id': str,
            'block_id': str,
            'client_dept_id': str,
            'sub_discipline': str,
            'request_gender': RequestGender,
            'grade': str,
            'fallback_grade': str,
            'vacancy_reason': str,
            'date': date,
            'start_time': str,
            'end_time': str,
            'break_duration': int,
            'po_number': int,
            'unique_number': int,
            'agency': str,
            'skill': str,
            'specialty': str,
            'fallback_skill': str,
            'fallback_speciality': str,
            'status': str,
            'rates': List[Rates],
            'time_interval_rates': List[TimeIntervalRates],
            'person': Person
        }

        self.attribute_map = {
            'duty_id': 'dutyId',
            'slave_duty_id': 'slaveDutyId',
            'block_id': 'blockId',
            'client_dept_id': 'clientDeptId',
            'sub_discipline': 'subDiscipline',
            'request_gender': 'requestGender',
            'grade': 'grade',
            'fallback_grade': 'fallbackGrade',
            'vacancy_reason': 'vacancyReason',
            'date': 'date',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'break_duration': 'breakDuration',
            'po_number': 'poNumber',
            'unique_number': 'uniqueNumber',
            'agency': 'agency',
            'skill': 'skill',
            'specialty': 'specialty',
            'fallback_skill': 'fallbackSkill',
            'fallback_speciality': 'fallbackSpeciality',
            'status': 'status',
            'rates': 'rates',
            'time_interval_rates': 'timeIntervalRates',
            'person': 'person'
        }

        self._duty_id = duty_id
        self._slave_duty_id = slave_duty_id
        self._block_id = block_id
        self._client_dept_id = client_dept_id
        self._sub_discipline = sub_discipline
        self._request_gender = request_gender
        self._grade = grade
        self._fallback_grade = fallback_grade
        self._vacancy_reason = vacancy_reason
        self._date = date
        self._start_time = start_time
        self._end_time = end_time
        self._break_duration = break_duration
        self._po_number = po_number
        self._unique_number = unique_number
        self._agency = agency
        self._skill = skill
        self._specialty = specialty
        self._fallback_skill = fallback_skill
        self._fallback_speciality = fallback_speciality
        self._status = status
        self._rates = rates
        self._time_interval_rates = time_interval_rates
        self._person = person

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Duty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Duty of this Duty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duty_id(self):
        """Gets the duty_id of this Duty.

        Trust identifier of the duty

        :return: The duty_id of this Duty.
        :rtype: str
        """
        return self._duty_id

    @duty_id.setter
    def duty_id(self, duty_id):
        """Sets the duty_id of this Duty.

        Trust identifier of the duty

        :param duty_id: The duty_id of this Duty.
        :type duty_id: str
        """

        self._duty_id = duty_id

    @property
    def slave_duty_id(self):
        """Gets the slave_duty_id of this Duty.

        Identifier of the slave duty if duty is part of consolidated duties

        :return: The slave_duty_id of this Duty.
        :rtype: str
        """
        return self._slave_duty_id

    @slave_duty_id.setter
    def slave_duty_id(self, slave_duty_id):
        """Sets the slave_duty_id of this Duty.

        Identifier of the slave duty if duty is part of consolidated duties

        :param slave_duty_id: The slave_duty_id of this Duty.
        :type slave_duty_id: str
        """

        self._slave_duty_id = slave_duty_id

    @property
    def block_id(self):
        """Gets the block_id of this Duty.

        Identifier of block duties if duty is part of the block

        :return: The block_id of this Duty.
        :rtype: str
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """Sets the block_id of this Duty.

        Identifier of block duties if duty is part of the block

        :param block_id: The block_id of this Duty.
        :type block_id: str
        """

        self._block_id = block_id

    @property
    def client_dept_id(self):
        """Gets the client_dept_id of this Duty.

        BankStaff ward trust identifier

        :return: The client_dept_id of this Duty.
        :rtype: str
        """
        return self._client_dept_id

    @client_dept_id.setter
    def client_dept_id(self, client_dept_id):
        """Sets the client_dept_id of this Duty.

        BankStaff ward trust identifier

        :param client_dept_id: The client_dept_id of this Duty.
        :type client_dept_id: str
        """

        self._client_dept_id = client_dept_id

    @property
    def sub_discipline(self):
        """Gets the sub_discipline of this Duty.

        Staff group trust identifier

        :return: The sub_discipline of this Duty.
        :rtype: str
        """
        return self._sub_discipline

    @sub_discipline.setter
    def sub_discipline(self, sub_discipline):
        """Sets the sub_discipline of this Duty.

        Staff group trust identifier

        :param sub_discipline: The sub_discipline of this Duty.
        :type sub_discipline: str
        """

        self._sub_discipline = sub_discipline

    @property
    def request_gender(self):
        """Gets the request_gender of this Duty.


        :return: The request_gender of this Duty.
        :rtype: RequestGender
        """
        return self._request_gender

    @request_gender.setter
    def request_gender(self, request_gender):
        """Sets the request_gender of this Duty.


        :param request_gender: The request_gender of this Duty.
        :type request_gender: RequestGender
        """

        self._request_gender = request_gender

    @property
    def grade(self):
        """Gets the grade of this Duty.

        Grade trust identifier of the request

        :return: The grade of this Duty.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this Duty.

        Grade trust identifier of the request

        :param grade: The grade of this Duty.
        :type grade: str
        """

        self._grade = grade

    @property
    def fallback_grade(self):
        """Gets the fallback_grade of this Duty.


        :return: The fallback_grade of this Duty.
        :rtype: str
        """
        return self._fallback_grade

    @fallback_grade.setter
    def fallback_grade(self, fallback_grade):
        """Sets the fallback_grade of this Duty.


        :param fallback_grade: The fallback_grade of this Duty.
        :type fallback_grade: str
        """

        self._fallback_grade = fallback_grade

    @property
    def vacancy_reason(self):
        """Gets the vacancy_reason of this Duty.


        :return: The vacancy_reason of this Duty.
        :rtype: str
        """
        return self._vacancy_reason

    @vacancy_reason.setter
    def vacancy_reason(self, vacancy_reason):
        """Sets the vacancy_reason of this Duty.


        :param vacancy_reason: The vacancy_reason of this Duty.
        :type vacancy_reason: str
        """

        self._vacancy_reason = vacancy_reason

    @property
    def date(self):
        """Gets the date of this Duty.

        Date of the duty

        :return: The date of this Duty.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Duty.

        Date of the duty

        :param date: The date of this Duty.
        :type date: date
        """

        self._date = date

    @property
    def start_time(self):
        """Gets the start_time of this Duty.

        Start time of the shift

        :return: The start_time of this Duty.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Duty.

        Start time of the shift

        :param start_time: The start_time of this Duty.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Duty.

        End time of the shift

        :return: The end_time of this Duty.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Duty.

        End time of the shift

        :param end_time: The end_time of this Duty.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def break_duration(self):
        """Gets the break_duration of this Duty.

        Duration of break in minutes

        :return: The break_duration of this Duty.
        :rtype: int
        """
        return self._break_duration

    @break_duration.setter
    def break_duration(self, break_duration):
        """Sets the break_duration of this Duty.

        Duration of break in minutes

        :param break_duration: The break_duration of this Duty.
        :type break_duration: int
        """

        self._break_duration = break_duration

    @property
    def po_number(self):
        """Gets the po_number of this Duty.

        Need to understand if needed from Trust/Agency

        :return: The po_number of this Duty.
        :rtype: int
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this Duty.

        Need to understand if needed from Trust/Agency

        :param po_number: The po_number of this Duty.
        :type po_number: int
        """

        self._po_number = po_number

    @property
    def unique_number(self):
        """Gets the unique_number of this Duty.

        BRN / Unique number

        :return: The unique_number of this Duty.
        :rtype: int
        """
        return self._unique_number

    @unique_number.setter
    def unique_number(self, unique_number):
        """Sets the unique_number of this Duty.

        BRN / Unique number

        :param unique_number: The unique_number of this Duty.
        :type unique_number: int
        """

        self._unique_number = unique_number

    @property
    def agency(self):
        """Gets the agency of this Duty.

        Supplying agency trust identifier

        :return: The agency of this Duty.
        :rtype: str
        """
        return self._agency

    @agency.setter
    def agency(self, agency):
        """Sets the agency of this Duty.

        Supplying agency trust identifier

        :param agency: The agency of this Duty.
        :type agency: str
        """

        self._agency = agency

    @property
    def skill(self):
        """Gets the skill of this Duty.

        Stored as free text in DE Provider

        :return: The skill of this Duty.
        :rtype: str
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this Duty.

        Stored as free text in DE Provider

        :param skill: The skill of this Duty.
        :type skill: str
        """

        self._skill = skill

    @property
    def specialty(self):
        """Gets the specialty of this Duty.

        Stored as free text in DE Provider

        :return: The specialty of this Duty.
        :rtype: str
        """
        return self._specialty

    @specialty.setter
    def specialty(self, specialty):
        """Sets the specialty of this Duty.

        Stored as free text in DE Provider

        :param specialty: The specialty of this Duty.
        :type specialty: str
        """

        self._specialty = specialty

    @property
    def fallback_skill(self):
        """Gets the fallback_skill of this Duty.

        Stored as free text in DE Provider

        :return: The fallback_skill of this Duty.
        :rtype: str
        """
        return self._fallback_skill

    @fallback_skill.setter
    def fallback_skill(self, fallback_skill):
        """Sets the fallback_skill of this Duty.

        Stored as free text in DE Provider

        :param fallback_skill: The fallback_skill of this Duty.
        :type fallback_skill: str
        """

        self._fallback_skill = fallback_skill

    @property
    def fallback_speciality(self):
        """Gets the fallback_speciality of this Duty.

        Stored as free text in DE Provider

        :return: The fallback_speciality of this Duty.
        :rtype: str
        """
        return self._fallback_speciality

    @fallback_speciality.setter
    def fallback_speciality(self, fallback_speciality):
        """Sets the fallback_speciality of this Duty.

        Stored as free text in DE Provider

        :param fallback_speciality: The fallback_speciality of this Duty.
        :type fallback_speciality: str
        """

        self._fallback_speciality = fallback_speciality

    @property
    def status(self):
        """Gets the status of this Duty.

        Will need to understand if duty is no longer required and cancel on DE Provider

        :return: The status of this Duty.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Duty.

        Will need to understand if duty is no longer required and cancel on DE Provider

        :param status: The status of this Duty.
        :type status: str
        """
        allowed_values = ["active", "cancelled"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def rates(self):
        """Gets the rates of this Duty.

        Trust Pay Agency & Trust Pays DE provider - split rate between pay to worker and pay to agency

        :return: The rates of this Duty.
        :rtype: List[Rates]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this Duty.

        Trust Pay Agency & Trust Pays DE provider - split rate between pay to worker and pay to agency

        :param rates: The rates of this Duty.
        :type rates: List[Rates]
        """

        self._rates = rates

    @property
    def time_interval_rates(self):
        """Gets the time_interval_rates of this Duty.

        Array of rates and intervals for which the rate is applied

        :return: The time_interval_rates of this Duty.
        :rtype: List[TimeIntervalRates]
        """
        return self._time_interval_rates

    @time_interval_rates.setter
    def time_interval_rates(self, time_interval_rates):
        """Sets the time_interval_rates of this Duty.

        Array of rates and intervals for which the rate is applied

        :param time_interval_rates: The time_interval_rates of this Duty.
        :type time_interval_rates: List[TimeIntervalRates]
        """

        self._time_interval_rates = time_interval_rates

    @property
    def person(self):
        """Gets the person of this Duty.


        :return: The person of this Duty.
        :rtype: Person
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this Duty.


        :param person: The person of this Duty.
        :type person: Person
        """

        self._person = person
